diff --git a/README.md b/README.md
index e7a7a62..28e366e 100644
--- a/README.md
+++ b/README.md
@@ -12,7 +12,7 @@ We recommend starting from [Setting up the environment](https://cairo-lang.org/d
 # Installation instructions
 
 You should be able to download the python package zip file directly from
-[github](https://github.com/starkware-libs/cairo-lang/releases/tag/v0.10.3)
+[github](https://github.com/starkware-libs/cairo-lang/releases/tag/v0.10.2)
 and install it using ``pip``.
 See [Setting up the environment](https://cairo-lang.org/docs/quickstart.html).
 
@@ -54,7 +54,7 @@ Once the docker image is built, you can fetch the python package zip file using:
 
 ```bash
 > container_id=$(docker create cairo)
-> docker cp ${container_id}:/app/cairo-lang-0.10.3.zip .
+> docker cp ${container_id}:/app/cairo-lang-0.10.2.zip .
 > docker rm -v ${container_id}
 ```
 
diff --git a/src/cmake_utils/gen_venv.py b/src/cmake_utils/gen_venv.py
index 1e7c434..8503ff4 100755
--- a/src/cmake_utils/gen_venv.py
+++ b/src/cmake_utils/gen_venv.py
@@ -123,9 +123,10 @@ def main():
 
     # Prepare an empty virtual environment in the background.
     # --symlinks prefers symlinks of copying.
+    # --without-pip installs a completely empty venv, with no pip.
     # --clear clears the old venv if exists.
     venv_proc = subprocess.Popen(
-        [python_exec, "-m", "venv", "--symlinks", "--clear", args.venv_dir]
+        [python_exec, "-m", "venv", "--symlinks", "--without-pip", "--clear", args.venv_dir]
     )
 
     # Find all libraries.
diff --git a/src/demo/amm_demo/amm.cairo b/src/demo/amm_demo/amm.cairo
index 0ddee06..ec84cfd 100644
--- a/src/demo/amm_demo/amm.cairo
+++ b/src/demo/amm_demo/amm.cairo
@@ -40,8 +40,10 @@ func modify_account{range_check_ptr}(state: AmmState, account_id, diff_a, diff_b
     let (local old_account: Account*) = dict_read{dict_ptr=account_dict_end}(key=account_id);
 
     // Compute the new account values.
-    tempvar new_token_a_balance = (old_account.token_a_balance + diff_a);
-    tempvar new_token_b_balance = (old_account.token_b_balance + diff_b);
+    tempvar new_token_a_balance = (
+        old_account.token_a_balance + diff_a);
+    tempvar new_token_b_balance = (
+        old_account.token_b_balance + diff_b);
 
     // Verify that the new balances are positive.
     assert_nn_le(new_token_a_balance, MAX_BALANCE);
@@ -62,7 +64,8 @@ func modify_account{range_check_ptr}(state: AmmState, account_id, diff_a, diff_b
     // Construct and return the new state with the updated
     // 'account_dict_end'.
     local new_state: AmmState;
-    assert new_state.account_dict_start = (state.account_dict_start);
+    assert new_state.account_dict_start = (
+        state.account_dict_start);
     assert new_state.account_dict_end = account_dict_end;
     assert new_state.token_a_balance = state.token_a_balance;
     assert new_state.token_b_balance = state.token_b_balance;
@@ -111,7 +114,8 @@ func swap{range_check_ptr}(state: AmmState, transaction: SwapTransaction*) -> (s
 
     // Update the state.
     local new_state: AmmState;
-    assert new_state.account_dict_start = (state.account_dict_start);
+    assert new_state.account_dict_start = (
+        state.account_dict_start);
     assert new_state.account_dict_end = state.account_dict_end;
     assert new_state.token_a_balance = new_x;
     assert new_state.token_b_balance = new_y;
diff --git a/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo b/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo
index 28047e3..9d4ee85 100644
--- a/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo
+++ b/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo
@@ -288,8 +288,7 @@ func unpack_composite_packed_task{
     // Verify task output.
     assert [cast(task_output, CairoVerifierOutput*)] = CairoVerifierOutput(
         program_hash=bootloader_config.simple_bootloader_program_hash,
-        output_hash=subtasks_output_hash,
-    );
+        output_hash=subtasks_output_hash);
     local task_output: felt* = task_output + CairoVerifierOutput.SIZE;
 
     // Call recursively to parse the composite task's subtasks.
diff --git a/src/starkware/cairo/bootloaders/simple_bootloader/execute_task.cairo b/src/starkware/cairo/bootloaders/simple_bootloader/execute_task.cairo
index 35363da..cdccaf5 100644
--- a/src/starkware/cairo/bootloaders/simple_bootloader/execute_task.cairo
+++ b/src/starkware/cairo/bootloaders/simple_bootloader/execute_task.cairo
@@ -104,8 +104,7 @@ func execute_task{builtin_ptrs: BuiltinData*, self_range_check_ptr}(
         ecdsa=input_builtin_ptrs.ecdsa,
         bitwise=input_builtin_ptrs.bitwise,
         ec_op=input_builtin_ptrs.ec_op,
-        keccak=input_builtin_ptrs.keccak,
-    );
+        keccak=input_builtin_ptrs.keccak);
 
     // Call select_input_builtins to get the relevant input builtin pointers for the task.
     select_input_builtins(
diff --git a/src/starkware/cairo/bootloaders/simple_bootloader/run_simple_bootloader.cairo b/src/starkware/cairo/bootloaders/simple_bootloader/run_simple_bootloader.cairo
index 73ccc5d..b220df4 100644
--- a/src/starkware/cairo/bootloaders/simple_bootloader/run_simple_bootloader.cairo
+++ b/src/starkware/cairo/bootloaders/simple_bootloader/run_simple_bootloader.cairo
@@ -46,8 +46,7 @@ func run_simple_bootloader{
         ecdsa=ecdsa_ptr,
         bitwise=bitwise_ptr,
         ec_op=ec_op_ptr,
-        keccak=keccak_ptr,
-    );
+        keccak=keccak_ptr);
 
     // A struct containing the encoding of each builtin.
     local builtin_encodings: BuiltinData = BuiltinData(
@@ -57,12 +56,10 @@ func run_simple_bootloader{
         ecdsa='ecdsa',
         bitwise='bitwise',
         ec_op='ec_op',
-        keccak='keccak',
-    );
+        keccak='keccak');
 
     local builtin_instance_sizes: BuiltinData = BuiltinData(
-        output=1, pedersen=3, range_check=1, ecdsa=2, bitwise=5, ec_op=7, keccak=16
-    );
+        output=1, pedersen=3, range_check=1, ecdsa=2, bitwise=5, ec_op=7, keccak=16);
 
     // Call execute_tasks.
     let (__fp__, _) = get_fp_and_pc();
diff --git a/src/starkware/cairo/cairo_verifier/layouts/recursive/cairo_verifier.cairo b/src/starkware/cairo/cairo_verifier/layouts/recursive/cairo_verifier.cairo
index 0e9b3f8..2e9ee74 100644
--- a/src/starkware/cairo/cairo_verifier/layouts/recursive/cairo_verifier.cairo
+++ b/src/starkware/cairo/cairo_verifier/layouts/recursive/cairo_verifier.cairo
@@ -198,8 +198,8 @@ func main{
 
     // Write program_hash and output_hash to output.
     assert [cast(output_ptr, CairoVerifierOutput*)] = CairoVerifierOutput(
-        program_hash=program_hash, output_hash=output_hash
-    );
+        program_hash=program_hash,
+        output_hash=output_hash);
     let output_ptr = output_ptr + CairoVerifierOutput.SIZE;
 
     return ();
diff --git a/src/starkware/cairo/common/cairo_blake2s/blake2s.cairo b/src/starkware/cairo/common/cairo_blake2s/blake2s.cairo
index 4841461..603e609 100644
--- a/src/starkware/cairo/common/cairo_blake2s/blake2s.cairo
+++ b/src/starkware/cairo/common/cairo_blake2s/blake2s.cairo
@@ -450,15 +450,8 @@ func _pack_ints{range_check_ptr, blake2s_ptr: felt*}(m, packed_values: felt*) {
     tempvar x6 = blake2s_ptr[6 * INSTANCE_SIZE];
     assert [range_check_ptr + 12] = x6;
     assert [range_check_ptr + 13] = MAX_VALUE - x6;
-    assert packed_values[0] = (
-        x0 +
-        2 ** 35 * x1 +
-        2 ** (35 * 2) * x2 +
-        2 ** (35 * 3) * x3 +
-        2 ** (35 * 4) * x4 +
-        2 ** (35 * 5) * x5 +
-        2 ** (35 * 6) * x6
-    );
+    assert packed_values[0] = x0 + 2 ** 35 * x1 + 2 ** (35 * 2) * x2 + 2 ** (35 * 3) * x3 +
+        2 ** (35 * 4) * x4 + 2 ** (35 * 5) * x5 + 2 ** (35 * 6) * x6;
 
     tempvar packed_values = packed_values + 1;
     tempvar blake2s_ptr = blake2s_ptr + 1;
diff --git a/src/starkware/cairo/common/cairo_blake2s/packed_blake2s.cairo b/src/starkware/cairo/common/cairo_blake2s/packed_blake2s.cairo
index c6b0d20..c0e3b7a 100644
--- a/src/starkware/cairo/common/cairo_blake2s/packed_blake2s.cairo
+++ b/src/starkware/cairo/common/cairo_blake2s/packed_blake2s.cairo
@@ -4,9 +4,8 @@ from starkware.cairo.common.registers import get_fp_and_pc
 
 const N_PACKED_INSTANCES = 7;
 const ALL_ONES = 2 ** 251 - 1;
-const SHIFTS = (
-    1 + 2 ** 35 + 2 ** (35 * 2) + 2 ** (35 * 3) + 2 ** (35 * 4) + 2 ** (35 * 5) + 2 ** (35 * 6)
-);
+const SHIFTS = 1 + 2 ** 35 + 2 ** (35 * 2) + 2 ** (35 * 3) + 2 ** (35 * 4) + 2 ** (35 * 5) +
+    2 ** (35 * 6);
 
 func mix{bitwise_ptr: BitwiseBuiltin*}(a: felt, b: felt, c: felt, d: felt, m0: felt, m1: felt) -> (
     a: felt, b: felt, c: felt, d: felt
@@ -28,9 +27,8 @@ func mix{bitwise_ptr: BitwiseBuiltin*}(a: felt, b: felt, c: felt, d: felt, m0: f
     tempvar a_xor_d = bitwise_ptr[0].x_xor_y;
     assert bitwise_ptr[1].x = a_xor_d;
     assert bitwise_ptr[1].y = SHIFTS * (2 ** 32 - 2 ** 16);
-    tempvar d = (
-        (2 ** (32 - 16)) * a_xor_d + (1 / 2 ** 16 - 2 ** (32 - 16)) * bitwise_ptr[1].x_and_y
-    );
+    tempvar d = (2 ** (32 - 16)) * a_xor_d +
+        (1 / 2 ** 16 - 2 ** (32 - 16)) * bitwise_ptr[1].x_and_y;
     let bitwise_ptr = bitwise_ptr + 2 * BitwiseBuiltin.SIZE;
 
     // c = (c + d) % 2**32.
@@ -45,9 +43,8 @@ func mix{bitwise_ptr: BitwiseBuiltin*}(a: felt, b: felt, c: felt, d: felt, m0: f
     tempvar b_xor_c = bitwise_ptr[0].x_xor_y;
     assert bitwise_ptr[1].x = b_xor_c;
     assert bitwise_ptr[1].y = SHIFTS * (2 ** 32 - 2 ** 12);
-    tempvar b = (
-        (2 ** (32 - 12)) * b_xor_c + (1 / 2 ** 12 - 2 ** (32 - 12)) * bitwise_ptr[1].x_and_y
-    );
+    tempvar b = (2 ** (32 - 12)) * b_xor_c +
+        (1 / 2 ** 12 - 2 ** (32 - 12)) * bitwise_ptr[1].x_and_y;
     let bitwise_ptr = bitwise_ptr + 2 * BitwiseBuiltin.SIZE;
 
     // a = (a + b + m1) % 2**32.
diff --git a/src/starkware/cairo/common/cairo_secp/bigint.cairo b/src/starkware/cairo/common/cairo_secp/bigint.cairo
index dbc59ca..603575c 100644
--- a/src/starkware/cairo/common/cairo_secp/bigint.cairo
+++ b/src/starkware/cairo/common/cairo_secp/bigint.cairo
@@ -44,12 +44,11 @@ struct UnreducedBigInt5 {
 func bigint_mul(x: BigInt3, y: BigInt3) -> (res: UnreducedBigInt5) {
     return (
         UnreducedBigInt5(
-            d0=x.d0 * y.d0,
-            d1=x.d0 * y.d1 + x.d1 * y.d0,
-            d2=x.d0 * y.d2 + x.d1 * y.d1 + x.d2 * y.d0,
-            d3=x.d1 * y.d2 + x.d2 * y.d1,
-            d4=x.d2 * y.d2,
-        ),
+        d0=x.d0 * y.d0,
+        d1=x.d0 * y.d1 + x.d1 * y.d0,
+        d2=x.d0 * y.d2 + x.d1 * y.d1 + x.d2 * y.d0,
+        d3=x.d1 * y.d2 + x.d2 * y.d1,
+        d4=x.d2 * y.d2),
     );
 }
 
diff --git a/src/starkware/cairo/common/cairo_secp/ec.cairo b/src/starkware/cairo/common/cairo_secp/ec.cairo
index 19b5732..9c7cd58 100644
--- a/src/starkware/cairo/common/cairo_secp/ec.cairo
+++ b/src/starkware/cairo/common/cairo_secp/ec.cairo
@@ -33,8 +33,9 @@ func ec_negate{range_check_ptr}(point: EcPoint) -> (point: EcPoint) {
     let (minus_y) = nondet_bigint3();
     verify_zero(
         UnreducedBigInt3(
-            d0=minus_y.d0 + point.y.d0, d1=minus_y.d1 + point.y.d1, d2=minus_y.d2 + point.y.d2
-        ),
+        d0=minus_y.d0 + point.y.d0,
+        d1=minus_y.d1 + point.y.d1,
+        d2=minus_y.d2 + point.y.d2),
     );
 
     return (point=EcPoint(x=point.x, y=minus_y));
@@ -69,10 +70,9 @@ func compute_doubling_slope{range_check_ptr}(point: EcPoint) -> (slope: BigInt3)
 
     verify_zero(
         UnreducedBigInt3(
-            d0=3 * x_sqr.d0 - 2 * slope_y.d0,
-            d1=3 * x_sqr.d1 - 2 * slope_y.d1,
-            d2=3 * x_sqr.d2 - 2 * slope_y.d2,
-        ),
+        d0=3 * x_sqr.d0 - 2 * slope_y.d0,
+        d1=3 * x_sqr.d1 - 2 * slope_y.d1,
+        d2=3 * x_sqr.d2 - 2 * slope_y.d2),
     );
 
     return (slope=slope);
@@ -111,10 +111,9 @@ func compute_slope{range_check_ptr}(point0: EcPoint, point1: EcPoint) -> (slope:
 
     verify_zero(
         UnreducedBigInt3(
-            d0=x_diff_slope.d0 - point0.y.d0 + point1.y.d0,
-            d1=x_diff_slope.d1 - point0.y.d1 + point1.y.d1,
-            d2=x_diff_slope.d2 - point0.y.d2 + point1.y.d2,
-        ),
+        d0=x_diff_slope.d0 - point0.y.d0 + point1.y.d0,
+        d1=x_diff_slope.d1 - point0.y.d1 + point1.y.d1,
+        d2=x_diff_slope.d2 - point0.y.d2 + point1.y.d2),
     );
 
     return (slope=slope);
@@ -156,10 +155,9 @@ func ec_double{range_check_ptr}(point: EcPoint) -> (res: EcPoint) {
 
     verify_zero(
         UnreducedBigInt3(
-            d0=slope_sqr.d0 - new_x.d0 - 2 * point.x.d0,
-            d1=slope_sqr.d1 - new_x.d1 - 2 * point.x.d1,
-            d2=slope_sqr.d2 - new_x.d2 - 2 * point.x.d2,
-        ),
+        d0=slope_sqr.d0 - new_x.d0 - 2 * point.x.d0,
+        d1=slope_sqr.d1 - new_x.d1 - 2 * point.x.d1,
+        d2=slope_sqr.d2 - new_x.d2 - 2 * point.x.d2),
     );
 
     let (x_diff_slope: UnreducedBigInt3) = unreduced_mul(
@@ -168,10 +166,9 @@ func ec_double{range_check_ptr}(point: EcPoint) -> (res: EcPoint) {
 
     verify_zero(
         UnreducedBigInt3(
-            d0=x_diff_slope.d0 - point.y.d0 - new_y.d0,
-            d1=x_diff_slope.d1 - point.y.d1 - new_y.d1,
-            d2=x_diff_slope.d2 - point.y.d2 - new_y.d2,
-        ),
+        d0=x_diff_slope.d0 - point.y.d0 - new_y.d0,
+        d1=x_diff_slope.d1 - point.y.d1 - new_y.d1,
+        d2=x_diff_slope.d2 - point.y.d2 - new_y.d2),
     );
 
     return (res=EcPoint(new_x, new_y));
@@ -227,10 +224,9 @@ func fast_ec_add{range_check_ptr}(point0: EcPoint, point1: EcPoint) -> (res: EcP
 
     verify_zero(
         UnreducedBigInt3(
-            d0=slope_sqr.d0 - new_x.d0 - point0.x.d0 - point1.x.d0,
-            d1=slope_sqr.d1 - new_x.d1 - point0.x.d1 - point1.x.d1,
-            d2=slope_sqr.d2 - new_x.d2 - point0.x.d2 - point1.x.d2,
-        ),
+        d0=slope_sqr.d0 - new_x.d0 - point0.x.d0 - point1.x.d0,
+        d1=slope_sqr.d1 - new_x.d1 - point0.x.d1 - point1.x.d1,
+        d2=slope_sqr.d2 - new_x.d2 - point0.x.d2 - point1.x.d2),
     );
 
     let (x_diff_slope: UnreducedBigInt3) = unreduced_mul(
@@ -240,10 +236,9 @@ func fast_ec_add{range_check_ptr}(point0: EcPoint, point1: EcPoint) -> (res: EcP
 
     verify_zero(
         UnreducedBigInt3(
-            d0=x_diff_slope.d0 - point0.y.d0 - new_y.d0,
-            d1=x_diff_slope.d1 - point0.y.d1 - new_y.d1,
-            d2=x_diff_slope.d2 - point0.y.d2 - new_y.d2,
-        ),
+        d0=x_diff_slope.d0 - point0.y.d0 - new_y.d0,
+        d1=x_diff_slope.d1 - point0.y.d1 - new_y.d1,
+        d2=x_diff_slope.d2 - point0.y.d2 - new_y.d2),
     );
 
     return (res=EcPoint(new_x, new_y));
diff --git a/src/starkware/cairo/common/cairo_secp/field.cairo b/src/starkware/cairo/common/cairo_secp/field.cairo
index 2e4e789..64a9758 100644
--- a/src/starkware/cairo/common/cairo_secp/field.cairo
+++ b/src/starkware/cairo/common/cairo_secp/field.cairo
@@ -28,10 +28,9 @@ func unreduced_mul(a: BigInt3, b: BigInt3) -> (res_low: UnreducedBigInt3) {
     // since BASE ** 3 = 4 * SECP_REM (mod secp256k1_prime).
     return (
         UnreducedBigInt3(
-            d0=a.d0 * b.d0 + (a.d1 * b.d2 + a.d2 * b.d1) * (4 * SECP_REM),
-            d1=a.d0 * b.d1 + a.d1 * b.d0 + (a.d2 * b.d2) * (4 * SECP_REM),
-            d2=a.d0 * b.d2 + a.d1 * b.d1 + a.d2 * b.d0,
-        ),
+        d0=a.d0 * b.d0 + (a.d1 * b.d2 + a.d2 * b.d1) * (4 * SECP_REM),
+        d1=a.d0 * b.d1 + a.d1 * b.d0 + (a.d2 * b.d2) * (4 * SECP_REM),
+        d2=a.d0 * b.d2 + a.d1 * b.d1 + a.d2 * b.d0),
     );
 }
 
@@ -43,10 +42,9 @@ func unreduced_sqr(a: BigInt3) -> (res_low: UnreducedBigInt3) {
     tempvar twice_d0 = a.d0 * 2;
     return (
         UnreducedBigInt3(
-            d0=a.d0 * a.d0 + (a.d1 * a.d2) * (2 * 4 * SECP_REM),
-            d1=twice_d0 * a.d1 + (a.d2 * a.d2) * (4 * SECP_REM),
-            d2=twice_d0 * a.d2 + a.d1 * a.d1,
-        ),
+        d0=a.d0 * a.d0 + (a.d1 * a.d2) * (2 * 4 * SECP_REM),
+        d1=twice_d0 * a.d1 + (a.d2 * a.d2) * (4 * SECP_REM),
+        d2=twice_d0 * a.d2 + a.d1 * a.d1),
     );
 }
 
@@ -118,7 +116,10 @@ func is_zero{range_check_ptr}(x: BigInt3) -> (res: felt) {
     let (x_x_inv) = unreduced_mul(x, x_inv);
 
     // Check that x * x_inv = 1 to verify that x != 0.
-    verify_zero(UnreducedBigInt3(d0=x_x_inv.d0 - 1, d1=x_x_inv.d1, d2=x_x_inv.d2));
+    verify_zero(UnreducedBigInt3(
+        d0=x_x_inv.d0 - 1,
+        d1=x_x_inv.d1,
+        d2=x_x_inv.d2));
     return (res=0);
 }
 
@@ -136,7 +137,10 @@ func reduce{range_check_ptr}(x: UnreducedBigInt3) -> (reduced_x: BigInt3) {
     let (reduced_x: BigInt3) = nondet_bigint3();
 
     verify_zero(
-        UnreducedBigInt3(d0=x.d0 - reduced_x.d0, d1=x.d1 - reduced_x.d1, d2=x.d2 - reduced_x.d2)
+        UnreducedBigInt3(
+        d0=x.d0 - reduced_x.d0,
+        d1=x.d1 - reduced_x.d1,
+        d2=x.d2 - reduced_x.d2),
     );
     return (reduced_x=reduced_x);
 }
diff --git a/src/starkware/cairo/common/cairo_secp/signature.cairo b/src/starkware/cairo/common/cairo_secp/signature.cairo
index 2a7043b..aeb40d4 100644
--- a/src/starkware/cairo/common/cairo_secp/signature.cairo
+++ b/src/starkware/cairo/common/cairo_secp/signature.cairo
@@ -31,9 +31,8 @@ func get_generator_point() -> (point: EcPoint) {
     // ).
     return (
         point=EcPoint(
-            BigInt3(0xe28d959f2815b16f81798, 0xa573a1c2c1c0a6ff36cb7, 0x79be667ef9dcbbac55a06),
-            BigInt3(0x554199c47d08ffb10d4b8, 0x2ff0384422a3f45ed1229a, 0x483ada7726a3c4655da4f),
-        ),
+        BigInt3(0xe28d959f2815b16f81798, 0xa573a1c2c1c0a6ff36cb7, 0x79be667ef9dcbbac55a06),
+        BigInt3(0x554199c47d08ffb10d4b8, 0x2ff0384422a3f45ed1229a, 0x483ada7726a3c4655da4f)),
     );
 }
 
@@ -169,9 +168,9 @@ func get_point_from_x{range_check_ptr}(x: BigInt3, v: felt) -> (point: EcPoint)
     // Check that y_square = x_cube + BETA.
     verify_zero(
         UnreducedBigInt3(
-            d0=x_cube.d0 + BETA - y_square.d0,
-            d1=x_cube.d1 - y_square.d1,
-            d2=x_cube.d2 - y_square.d2,
+        d0=x_cube.d0 + BETA - y_square.d0,
+        d1=x_cube.d1 - y_square.d1,
+        d2=x_cube.d2 - y_square.d2,
         ),
     );
 
diff --git a/src/starkware/cairo/common/hash_chain.cairo b/src/starkware/cairo/common/hash_chain.cairo
index 740ae0f..34ab6e1 100644
--- a/src/starkware/cairo/common/hash_chain.cairo
+++ b/src/starkware/cairo/common/hash_chain.cairo
@@ -16,8 +16,9 @@ func hash_chain{hash_ptr: HashBuiltin*}(data_ptr: felt*) -> (hash: felt) {
     tempvar data_ptr_end = data_ptr + data_length;
     // Prepare the loop_frame for the first iteration of the hash_loop.
     tempvar loop_frame = LoopLocals(
-        data_ptr=data_ptr_end, hash_ptr=hash_ptr, cur_hash=[data_ptr_end]
-    );
+        data_ptr=data_ptr_end,
+        hash_ptr=hash_ptr,
+        cur_hash=[data_ptr_end]);
 
     hash_loop:
     let curr_frame = cast(ap - LoopLocals.SIZE, LoopLocals*);
@@ -34,8 +35,7 @@ func hash_chain{hash_ptr: HashBuiltin*}(data_ptr: felt*) -> (hash: felt) {
     tempvar next_frame = LoopLocals(
         data_ptr=curr_frame.data_ptr - 1,
         hash_ptr=curr_frame.hash_ptr + HashBuiltin.SIZE,
-        cur_hash=current_hash.result,
-    );
+        cur_hash=current_hash.result);
 
     // Update n_elements_to_hash and loop accordingly. Note that the hash is calculated backwards.
     n_elements_to_hash = next_frame.data_ptr - data_ptr;
diff --git a/src/starkware/cairo/common/patricia.cairo b/src/starkware/cairo/common/patricia.cairo
index 7c90ea8..7bc581e 100644
--- a/src/starkware/cairo/common/patricia.cairo
+++ b/src/starkware/cairo/common/patricia.cairo
@@ -527,8 +527,7 @@ func patricia_update_using_update_constants{hash_ptr: HashBuiltin*, range_check_
     let original_siblings = siblings;
     let (local globals_prev: ParticiaGlobals*) = alloc();
     assert [globals_prev] = ParticiaGlobals(
-        pow2=patricia_update_constants.globals_pow2, access_offset=DictAccess.prev_value
-    );
+        pow2=patricia_update_constants.globals_pow2, access_offset=DictAccess.prev_value);
 
     assert_le(height, MAX_LENGTH);
     %{ vm_enter_scope(dict(node=node, **common_args)) %}
@@ -544,8 +543,7 @@ func patricia_update_using_update_constants{hash_ptr: HashBuiltin*, range_check_
     let siblings = original_siblings;
     let (local globals_new: ParticiaGlobals*) = alloc();
     assert [globals_new] = ParticiaGlobals(
-        pow2=patricia_update_constants.globals_pow2, access_offset=DictAccess.new_value
-    );
+        pow2=patricia_update_constants.globals_pow2, access_offset=DictAccess.new_value);
 
     %{ vm_enter_scope(dict(node=node, **common_args)) %}
     with update_ptr, siblings {
diff --git a/src/starkware/cairo/lang/VERSION b/src/starkware/cairo/lang/VERSION
index a3f5a8e..a23d969 100644
--- a/src/starkware/cairo/lang/VERSION
+++ b/src/starkware/cairo/lang/VERSION
@@ -1 +1 @@
-0.10.3
+0.10.2a0
diff --git a/src/starkware/cairo/lang/compiler/CMakeLists.txt b/src/starkware/cairo/lang/compiler/CMakeLists.txt
index 51d53ae..189c865 100644
--- a/src/starkware/cairo/lang/compiler/CMakeLists.txt
+++ b/src/starkware/cairo/lang/compiler/CMakeLists.txt
@@ -19,8 +19,6 @@ python_lib(cairo_compile_lib
     ast/module.py
     ast/node.py
     ast/notes.py
-    ast/parentheses_expr_wrapper.py
-    ast/particle.py
     ast/rvalue.py
     ast/types.py
     ast/visitor.py
diff --git a/src/starkware/cairo/lang/compiler/ast/CMakeLists.txt b/src/starkware/cairo/lang/compiler/ast/CMakeLists.txt
index 6f9bbfe..eeb8951 100644
--- a/src/starkware/cairo/lang/compiler/ast/CMakeLists.txt
+++ b/src/starkware/cairo/lang/compiler/ast/CMakeLists.txt
@@ -1,14 +1,12 @@
-full_python_test(cairo_compile_formatting_test
+full_python_test(cairo_compile_formatting_utils_test
     PREFIX starkware/cairo/lang/compiler/ast
     PYTHON ${PYTHON_COMMAND}
     TESTED_MODULES starkware/cairo/lang/compiler/ast
 
     FILES
-    parentheses_expr_wrapper_test.py
-    particle_test.py
+    formatting_utils_test.py
 
     LIBS
     cairo_compile_lib
-    cairo_compile_test_utils_lib
     pip_pytest
 )
diff --git a/src/starkware/cairo/lang/compiler/ast/arguments.py b/src/starkware/cairo/lang/compiler/ast/arguments.py
index 214dc68..e83861b 100644
--- a/src/starkware/cairo/lang/compiler/ast/arguments.py
+++ b/src/starkware/cairo/lang/compiler/ast/arguments.py
@@ -4,7 +4,6 @@ from typing import List, Optional, Sequence
 from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField
 from starkware.cairo.lang.compiler.ast.node import AstNode
 from starkware.cairo.lang.compiler.ast.notes import NoteListField, Notes
-from starkware.cairo.lang.compiler.ast.particle import ParticleList
 from starkware.cairo.lang.compiler.ast.types import TypedIdentifier
 from starkware.cairo.lang.compiler.error_handling import Location
 
@@ -15,10 +14,10 @@ class IdentifierList(AstNode):
     notes: List[Notes] = NoteListField  # type: ignore
     location: Optional[Location] = LocationField
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self):
         for note in self.notes:
             note.assert_no_comments()
-        return ParticleList(elements=[x.to_particle() for x in self.identifiers])
+        return [x.to_particle() for x in self.identifiers]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return self.identifiers
diff --git a/src/starkware/cairo/lang/compiler/ast/ast_objects_test_utils.py b/src/starkware/cairo/lang/compiler/ast/ast_objects_test_utils.py
index 82da759..1652cdd 100644
--- a/src/starkware/cairo/lang/compiler/ast/ast_objects_test_utils.py
+++ b/src/starkware/cairo/lang/compiler/ast/ast_objects_test_utils.py
@@ -6,7 +6,6 @@ from starkware.cairo.lang.compiler.ast.expr import (
     ExprNewOperator,
     ExprOperator,
     ExprParentheses,
-    ExprPow,
     ExprSubscript,
 )
 
@@ -19,8 +18,6 @@ def remove_parentheses(expr):
         return remove_parentheses(expr.val)
     if isinstance(expr, ExprOperator):
         return ExprOperator(a=remove_parentheses(expr.a), op=expr.op, b=remove_parentheses(expr.b))
-    if isinstance(expr, ExprPow):
-        return ExprPow(a=remove_parentheses(expr.a), b=remove_parentheses(expr.b))
     if isinstance(expr, ExprAddressOf):
         return ExprAddressOf(expr=remove_parentheses(expr.expr))
     if isinstance(expr, ExprNeg):
diff --git a/src/starkware/cairo/lang/compiler/ast/bool_expr.py b/src/starkware/cairo/lang/compiler/ast/bool_expr.py
index b931efd..b515fba 100644
--- a/src/starkware/cairo/lang/compiler/ast/bool_expr.py
+++ b/src/starkware/cairo/lang/compiler/ast/bool_expr.py
@@ -3,10 +3,14 @@ from abc import ABC, abstractmethod
 from typing import Optional, Sequence
 
 from starkware.cairo.lang.compiler.ast.expr import Expression
-from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    LocationField,
+    Particle,
+    ParticleList,
+    SingleParticle,
+)
 from starkware.cairo.lang.compiler.ast.node import AstNode
 from starkware.cairo.lang.compiler.ast.notes import Notes, NotesField
-from starkware.cairo.lang.compiler.ast.particle import Particle, ParticleList, SingleParticle
 from starkware.cairo.lang.compiler.error_handling import Location
 
 
diff --git a/src/starkware/cairo/lang/compiler/ast/cairo_types.py b/src/starkware/cairo/lang/compiler/ast/cairo_types.py
index f8a42d4..0b6fdbc 100644
--- a/src/starkware/cairo/lang/compiler/ast/cairo_types.py
+++ b/src/starkware/cairo/lang/compiler/ast/cairo_types.py
@@ -5,14 +5,14 @@ from contextvars import ContextVar
 from enum import Enum, auto
 from typing import List, Optional, Sequence
 
-from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField
-from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.notes import Notes
-from starkware.cairo.lang.compiler.ast.particle import (
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    LocationField,
     Particle,
     SeparatedParticleList,
     SingleParticle,
 )
+from starkware.cairo.lang.compiler.ast.node import AstNode
+from starkware.cairo.lang.compiler.ast.notes import Notes
 from starkware.cairo.lang.compiler.error_handling import Location
 from starkware.cairo.lang.compiler.scoped_name import ScopedName
 
@@ -179,14 +179,14 @@ class TypeTuple(CairoType):
         for note in self.notes:
             note.assert_no_comments()
 
-    def to_particle(self) -> Particle:
+    def get_particles(self) -> List[Particle]:
         self.assert_no_comments()
+        return [member.to_particle() for member in self.members]
+
+    def to_particle(self) -> Particle:
         has_trailing_comma = len(self.members) == 1 and self.members[0].name is None
         return SeparatedParticleList(
-            elements=[member.to_particle() for member in self.members],
-            start="(",
-            end=")",
-            trailing_separator=has_trailing_comma,
+            elements=self.get_particles(), start="(", end=")", trailing_separator=has_trailing_comma
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
diff --git a/src/starkware/cairo/lang/compiler/ast/code_elements.py b/src/starkware/cairo/lang/compiler/ast/code_elements.py
index ac4846b..20ad123 100644
--- a/src/starkware/cairo/lang/compiler/ast/code_elements.py
+++ b/src/starkware/cairo/lang/compiler/ast/code_elements.py
@@ -6,19 +6,19 @@ from starkware.cairo.lang.compiler.ast.aliased_identifier import AliasedIdentifi
 from starkware.cairo.lang.compiler.ast.arguments import IdentifierList
 from starkware.cairo.lang.compiler.ast.bool_expr import BoolExpr
 from starkware.cairo.lang.compiler.ast.cairo_types import CairoType
-from starkware.cairo.lang.compiler.ast.expr import Expression, ExprHint, ExprIdentifier
-from starkware.cairo.lang.compiler.ast.formatting_utils import INDENTATION, LocationField
-from starkware.cairo.lang.compiler.ast.instructions import InstructionAst
-from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.notes import NoteListField, Notes
-from starkware.cairo.lang.compiler.ast.parentheses_expr_wrapper import parenthesize_expression
-from starkware.cairo.lang.compiler.ast.particle import (
+from starkware.cairo.lang.compiler.ast.expr import Expression, ExprHint, ExprIdentifier, ExprTuple
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    INDENTATION,
+    LocationField,
     Particle,
     ParticleFormattingConfig,
     ParticleList,
     SeparatedParticleList,
     particles_in_lines,
 )
+from starkware.cairo.lang.compiler.ast.instructions import InstructionAst
+from starkware.cairo.lang.compiler.ast.node import AstNode
+from starkware.cairo.lang.compiler.ast.notes import NoteListField, Notes
 from starkware.cairo.lang.compiler.ast.rvalue import Rvalue, RvalueCall, RvalueFuncCall
 from starkware.cairo.lang.compiler.ast.types import TypedIdentifier
 from starkware.cairo.lang.compiler.error_handling import Location
@@ -26,25 +26,6 @@ from starkware.cairo.lang.compiler.scoped_name import ScopedName
 from starkware.python.utils import indent
 
 
-def code_particles_in_lines(
-    particles: Particle,
-    allowed_line_length: int,
-    one_per_line: bool = False,
-    double_indentation: bool = False,
-    force_one_per_line: bool = False,
-):
-    return particles_in_lines(
-        particles=particles,
-        config=ParticleFormattingConfig(
-            allowed_line_length=allowed_line_length,
-            line_indent=INDENTATION,
-            one_per_line=one_per_line,
-            double_indentation=double_indentation,
-            force_one_per_line=force_one_per_line,
-        ),
-    )
-
-
 class CodeElement(AstNode):
     @abstractmethod
     def format(self, allowed_line_length):
@@ -57,8 +38,8 @@ class CodeElement(AstNode):
 class CodeElementInstruction(CodeElement):
     instruction: InstructionAst
 
-    def get_particles(self) -> ParticleList:
-        return ParticleList(elements=[self.instruction.format()])
+    def get_particles(self):
+        return [self.instruction.format()]
 
     def format(self, allowed_line_length):
         return self.instruction.format() + ";"
@@ -73,17 +54,7 @@ class CodeElementConst(CodeElement):
     expr: Expression
 
     def format(self, allowed_line_length):
-        identifier_particles = self.identifier.get_particles()
-        expr_particles = parenthesize_expression(self.expr).get_particles()
-
-        identifier_particles.add_prefix("const ")
-        identifier_particles.add_suffix(f" = {expr_particles.pop_prefix()}")
-        expr_particles.add_suffix(";")
-
-        return code_particles_in_lines(
-            particles=identifier_particles + expr_particles,
-            allowed_line_length=allowed_line_length,
-        )
+        return f"const {self.identifier.format()} = {self.expr.format()};"
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.identifier, self.expr]
@@ -96,7 +67,12 @@ class CodeElementMember(CodeElement):
     def format(self, allowed_line_length):
         particle = self.typed_identifier.to_particle()
         particle.add_suffix(",")
-        return code_particles_in_lines(particles=particle, allowed_line_length=allowed_line_length)
+        return particles_in_lines(
+            particles=particle,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION
+            ),
+        )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.typed_identifier]
@@ -108,16 +84,14 @@ class CodeElementReference(CodeElement):
     expr: Expression
 
     def format(self, allowed_line_length):
-        identifier_particle = self.typed_identifier.to_particle()
-        expr_particles = parenthesize_expression(self.expr).get_particles()
-
-        identifier_particle.add_prefix("let ")
-        identifier_particle.add_suffix(f" = {expr_particles.pop_prefix()}")
-        expr_particles.add_suffix(";")
-
-        return code_particles_in_lines(
-            particles=ParticleList(elements=[identifier_particle]) + expr_particles,
-            allowed_line_length=allowed_line_length,
+        particle = self.typed_identifier.to_particle()
+        particle.add_prefix("let ")
+        particle.add_suffix(f" = {self.expr.format()};")
+        return particles_in_lines(
+            particles=particle,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION
+            ),
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
@@ -138,17 +112,17 @@ class CodeElementLocalVariable(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        identifier_particle = self.typed_identifier.to_particle()
-        identifier_particle.add_prefix("local ")
-        particles = ParticleList(elements=[identifier_particle])
-
+        particle = self.typed_identifier.to_particle()
+        particle.add_prefix("local ")
         if self.expr is not None:
-            expr_particles = parenthesize_expression(self.expr).get_particles()
-            particles.add_suffix(f" = {expr_particles.pop_prefix()}")
-            particles += expr_particles
-
-        particles.add_suffix(";")
-        return code_particles_in_lines(particles=particles, allowed_line_length=allowed_line_length)
+            particle.add_suffix(f" = {self.expr.format()}")
+        particle.add_suffix(";")
+        return particles_in_lines(
+            particles=particle,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION
+            ),
+        )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.typed_identifier, self.expr]
@@ -166,17 +140,17 @@ class CodeElementTemporaryVariable(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        identifier_particle = self.typed_identifier.to_particle()
-        identifier_particle.add_prefix("tempvar ")
-        particles = ParticleList(elements=[identifier_particle])
-
+        particle = self.typed_identifier.to_particle()
+        particle.add_prefix("tempvar ")
         if self.expr is not None:
-            expr_particles = parenthesize_expression(self.expr).get_particles()
-            particles.add_suffix(f" = {expr_particles.pop_prefix()}")
-            particles += expr_particles
-
-        particles.add_suffix(";")
-        return code_particles_in_lines(particles=particles, allowed_line_length=allowed_line_length)
+            particle.add_suffix(f" = {self.expr.format()}")
+        particle.add_suffix(";")
+        return particles_in_lines(
+            particles=particle,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION
+            ),
+        )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.typed_identifier, self.expr]
@@ -195,17 +169,7 @@ class CodeElementCompoundAssertEq(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        a_particles = parenthesize_expression(self.a).get_particles()
-        b_particles = parenthesize_expression(self.b).get_particles()
-
-        a_particles.add_prefix("assert ")
-        a_particles.add_suffix(" = ")
-        a_particles.add_suffix(b_particles.pop_prefix())
-        b_particles.add_suffix(";")
-
-        return code_particles_in_lines(
-            particles=a_particles + b_particles, allowed_line_length=allowed_line_length
-        )
+        return f"assert {self.a.format()} = {self.b.format()};"
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.a, self.b]
@@ -218,17 +182,7 @@ class CodeElementStaticAssert(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        a_particles = parenthesize_expression(self.a).get_particles()
-        b_particles = parenthesize_expression(self.b).get_particles()
-
-        a_particles.add_prefix("static_assert ")
-        a_particles.add_suffix(" == ")
-        a_particles.add_suffix(b_particles.pop_prefix())
-        b_particles.add_suffix(";")
-
-        return code_particles_in_lines(
-            particles=a_particles + b_particles, allowed_line_length=allowed_line_length
-        )
+        return f"static_assert {self.a.format()} == {self.b.format()};"
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.a, self.b]
@@ -245,14 +199,30 @@ class CodeElementReturn(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        particles = parenthesize_expression(self.expr).get_particles()
-        particles.add_prefix("return ")
-        particles.add_suffix(";")
-        return code_particles_in_lines(
-            particles=particles,
-            allowed_line_length=allowed_line_length,
-            one_per_line=True,
-        )
+        if isinstance(self.expr, ExprTuple):
+            self.expr.members.assert_no_comments()
+            args = self.expr.members.args
+            expr_codes = [arg.format() for arg in args]
+
+            trailing_comma = self.expr.members.has_trailing_comma and len(args) > 0
+
+            return particles_in_lines(
+                particles=ParticleList(
+                    elements=[
+                        "return (",
+                        SeparatedParticleList(
+                            elements=expr_codes, end=");", trailing_separator=trailing_comma
+                        ),
+                    ]
+                ),
+                config=ParticleFormattingConfig(
+                    allowed_line_length=allowed_line_length,
+                    line_indent=INDENTATION,
+                    one_per_line=True,
+                ),
+            )
+
+        return "return " + self.expr.format() + ";"
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr]
@@ -268,17 +238,18 @@ class CodeElementTailCall(CodeElement):
     func_call: RvalueFuncCall
     location: Optional[Location] = LocationField
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self):
         particles = self.func_call.get_particles()
-        particles.add_prefix("return ")
-        particles.add_suffix(";")
+        particles[0].add_prefix("return ")
+        particles[-1].add_suffix(";")
         return particles
 
     def format(self, allowed_line_length):
-        return code_particles_in_lines(
-            particles=self.get_particles(),
-            allowed_line_length=allowed_line_length,
-            one_per_line=True,
+        return particles_in_lines(
+            particles=ParticleList(elements=self.get_particles()),
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION, one_per_line=True
+            ),
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
@@ -294,17 +265,11 @@ class CodeElementFuncCall(CodeElement):
 
     func_call: RvalueFuncCall
 
-    def get_particles(self) -> ParticleList:
-        particles = self.func_call.get_particles()
-        particles.add_suffix(";")
-        return particles
+    def get_particles(self):
+        return self.func_call.get_particles()
 
     def format(self, allowed_line_length):
-        return code_particles_in_lines(
-            particles=self.get_particles(),
-            allowed_line_length=allowed_line_length,
-            one_per_line=True,
-        )
+        return self.func_call.format_ex(allowed_line_length, semicolon=True)
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.func_call]
@@ -327,16 +292,18 @@ class CodeElementReturnValueReference(CodeElement):
 
     def format(self, allowed_line_length):
         call_particles = self.func_call.get_particles()
-        call_prefix = call_particles.pop_prefix()
         first_particle = self.typed_identifier.to_particle()
         first_particle.add_prefix("let ")
-        first_particle.add_suffix(f" = {call_prefix}")
+        first_particle.add_suffix(f" = {call_particles[0]}")
 
-        particles = ParticleList(elements=[first_particle]) + call_particles
+        particles = ParticleList(elements=[first_particle] + call_particles[1:])
         particles.add_suffix(";")
 
-        return code_particles_in_lines(
-            particles=particles, allowed_line_length=allowed_line_length, one_per_line=True
+        return particles_in_lines(
+            particles=particles,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION, one_per_line=True
+            ),
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
@@ -358,19 +325,23 @@ class CodeElementUnpackBinding(CodeElement):
 
     def format(self, allowed_line_length):
         rvalue_particles = self.rvalue.get_particles()
-        rvalue_particles.add_prefix(") = ")
-        rvalue_prefix = rvalue_particles.pop_prefix()
-        unpacking_list_particles = SeparatedParticleList(
-            elements=self.unpacking_list.get_particles(),
-            start="let (",
-            end=rvalue_prefix,
-        )
+        rvalue_particles[0].add_prefix(") = ")
+        unpacking_list_particles: List[Particle] = [
+            SeparatedParticleList(
+                elements=self.unpacking_list.get_particles(),
+                start="let (",
+                end=str(rvalue_particles[0]),
+            )
+        ]
 
-        particles = ParticleList(elements=[unpacking_list_particles]) + rvalue_particles
+        particles = ParticleList(elements=unpacking_list_particles + rvalue_particles[1:])
         particles.add_suffix(";")
 
-        return code_particles_in_lines(
-            particles=particles, allowed_line_length=allowed_line_length, one_per_line=True
+        return particles_in_lines(
+            particles=particles,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION, one_per_line=True
+            ),
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
@@ -562,7 +533,8 @@ class CodeElementFunction(CodeElement):
                 return_particle.add_suffix(" {")
                 args_suffix = ") -> "
                 if isinstance(return_particle, SeparatedParticleList):
-                    args_suffix += return_particle.pop_prefix()
+                    args_suffix += return_particle.start
+                    return_particle.start = ""
                     return_particles = [return_particle]
                 else:
                     # If return_particle is not a SeparatedParticleList we add the entire
@@ -580,10 +552,13 @@ class CodeElementFunction(CodeElement):
             ]
 
         decorators = "".join(f"@{decorator.format()}\n" for decorator in self.decorators)
-        header = code_particles_in_lines(
+        header = particles_in_lines(
             particles=ParticleList(elements=particles),
-            allowed_line_length=allowed_line_length,
-            double_indentation=True,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length,
+                line_indent=INDENTATION,
+                double_indentation=True,
+            ),
         )
         return f"{decorators}{header}\n{code}}}"
 
@@ -611,17 +586,7 @@ class CodeElementTypeDef(CodeElement):
     location: Optional[Location] = LocationField
 
     def format(self, allowed_line_length):
-        identifier_particles = self.identifier.get_particles()
-        type_particle = self.cairo_type.to_particle()
-
-        identifier_particles.add_prefix("using ")
-        identifier_particles.add_suffix(f" = {type_particle.pop_prefix()}")
-        type_particle.add_suffix(";")
-
-        return code_particles_in_lines(
-            particles=identifier_particles + ParticleList(elements=[type_particle]),
-            allowed_line_length=allowed_line_length,
-        )
+        return f"using {self.identifier.format()} = {self.cairo_type.format()};"
 
     @property
     def name(self) -> str:
@@ -694,8 +659,11 @@ class CodeElementIf(CodeElement):
         cond_particle = self.condition.to_particle()
         cond_particle.add_prefix("if (")
         cond_particle.add_suffix(") {")
-        code = code_particles_in_lines(
-            particles=cond_particle, allowed_line_length=allowed_line_length
+        code = particles_in_lines(
+            particles=cond_particle,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length, line_indent=INDENTATION
+            ),
         )
         main_code = self.main_code_block.format(
             allowed_line_length=allowed_line_length - INDENTATION
@@ -776,13 +744,16 @@ class CodeElementImport(CodeElement):
         if len(one_liner) <= allowed_line_length:
             return one_liner
 
-        return code_particles_in_lines(
+        return particles_in_lines(
             particles=ParticleList(
                 elements=[f"{prefix}(", SeparatedParticleList(elements=items, end=")")]
             ),
-            allowed_line_length=allowed_line_length,
-            one_per_line=False,
-            force_one_per_line=True,
+            config=ParticleFormattingConfig(
+                allowed_line_length=allowed_line_length,
+                line_indent=INDENTATION,
+                one_per_line=False,
+                force_one_per_line=True,
+            ),
         )
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
diff --git a/src/starkware/cairo/lang/compiler/ast/expr.py b/src/starkware/cairo/lang/compiler/ast/expr.py
index c763c62..e375cf2 100644
--- a/src/starkware/cairo/lang/compiler/ast/expr.py
+++ b/src/starkware/cairo/lang/compiler/ast/expr.py
@@ -7,17 +7,19 @@ from typing import List, Optional, Sequence
 import marshmallow
 
 from starkware.cairo.lang.compiler.ast.cairo_types import CairoType, CastType
-from starkware.cairo.lang.compiler.ast.formatting_utils import INDENTATION, LocationField
-from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.notes import Notes, NotesField
-from starkware.cairo.lang.compiler.ast.particle import (
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    INDENTATION,
+    LocationField,
+    Particle,
     ParticleList,
     SeparatedParticleList,
     SingleParticle,
 )
+from starkware.cairo.lang.compiler.ast.node import AstNode
+from starkware.cairo.lang.compiler.ast.notes import Notes, NotesField
 from starkware.cairo.lang.compiler.error_handling import Location
 from starkware.cairo.lang.compiler.instruction import Register
-from starkware.python.expression_string import ExpressionString, OperatorPrecedence
+from starkware.python.expression_string import ExpressionString
 from starkware.python.utils import indent, safe_zip
 from starkware.starkware_utils.marshmallow_dataclass_fields import additional_metadata
 
@@ -41,15 +43,9 @@ class Expression(AstNode):
         """
 
     @abstractmethod
-    def get_particles(self) -> ParticleList:
-        """
-        Returns a ParticleList representing the expression, for formatting purposes.
-        """
-
-    @abstractmethod
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
+    def get_particles(self) -> List[Particle]:
         """
-        Returns the outmost operator precedence of the expression.
+        Returns a list of particles representing the expression, for formatting purposes.
         """
 
 
@@ -77,15 +73,9 @@ class ExprConst(Expression):
             return ExpressionString.highest(abs_format)
         return -ExpressionString.highest(abs_format)
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         abs_format = self.absolute_val_format()
-        particle = SingleParticle(text=abs_format if self.val >= 0 else f"-{abs_format}")
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        if self.val >= 0:
-            return OperatorPrecedence.HIGHEST
-        return OperatorPrecedence.LOWEST
+        return [SingleParticle(text=abs_format if self.val >= 0 else f"-{abs_format}")]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return []
@@ -132,12 +122,8 @@ class ExprHint(Expression):
     def to_expr_str(self):
         return ExpressionString.highest(f"nondet {self.to_str()}")
 
-    def get_particles(self) -> ParticleList:
-        particle = SingleParticle(text=f"nondet {self.to_str()}")
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+    def get_particles(self) -> List[Particle]:
+        return [SingleParticle(text=f"nondet {self.to_str()}")]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return []
@@ -151,12 +137,8 @@ class ExprIdentifier(Expression):
     def to_expr_str(self):
         return ExpressionString.highest(self.name)
 
-    def get_particles(self) -> ParticleList:
-        particle = SingleParticle(text=self.name)
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+    def get_particles(self) -> List[Particle]:
+        return [SingleParticle(text=self.name)]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return []
@@ -177,15 +159,6 @@ class ExprAssignment(AstNode):
             return self.expr.format()
         return f"{self.identifier.format()}={self.expr.format()}"
 
-    def get_particles(self) -> ParticleList:
-        expr_particles = self.expr.get_particles()
-        if self.identifier is None:
-            return expr_particles
-
-        identifier_particles = self.identifier.get_particles()
-        identifier_particles.add_suffix(f"={expr_particles.pop_prefix()}")
-        return identifier_particles + expr_particles
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.identifier, self.expr]
 
@@ -209,18 +182,11 @@ class ArgList(AstNode):
         for note in self.notes:
             note.assert_no_comments()
 
-    def to_particle(
-        self, start: str = "", end: str = "", is_tuple: bool = False
-    ) -> SeparatedParticleList:
-        has_trailing_comma = is_tuple and len(self.args) == 1 and self.args[0].identifier is None
-        return SeparatedParticleList(
-            elements=[x.get_particles() for x in self.args],
-            start=start,
-            end=end,
-            trailing_separator=has_trailing_comma,
-        )
-
     def format(self):
+        if len(self.args) == 0:
+            assert len(self.notes) == 1
+            return self.notes[0].format()
+
         code = ""
         assert len(self.args) + 1 == len(self.notes)
         for notes, arg in safe_zip(self.notes[:-1], self.args):
@@ -248,12 +214,8 @@ class ExprReg(Expression):
     def to_expr_str(self):
         return ExpressionString.highest(self.reg.name.lower())
 
-    def get_particles(self) -> ParticleList:
-        particle = SingleParticle(text=self.reg.name.lower())
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+    def get_particles(self) -> List[Particle]:
+        return [SingleParticle(text=self.reg.name.lower())]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return []
@@ -284,25 +246,12 @@ class ExprOperator(Expression):
         else:
             raise NotImplementedError(f"Unexpected operator '{self.op}'")
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.notes.assert_no_comments()
 
         a_particles = self.a.get_particles()
-        a_particles.add_suffix(f" {self.op} ")
-        if self.op in ["+", "-"]:
-            return a_particles + self.b.get_particles()
-        elif self.op in ["*", "/"]:
-            return ParticleList(elements=[a_particles + self.b.get_particles()])
-        else:
-            raise NotImplementedError(f"Unexpected operator '{self.op}'.")
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        if self.op in ["+", "-"]:
-            return OperatorPrecedence.PLUS
-        elif self.op in ["*", "/"]:
-            return OperatorPrecedence.MUL
-        else:
-            raise NotImplementedError(f"Unexpected operator '{self.op}'.")
+        a_particles[-1].add_suffix(f" {self.op} ")
+        return a_particles + self.b.get_particles()
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.a, self.b]
@@ -323,15 +272,12 @@ class ExprPow(Expression):
             b = b.prepend("\n")
         return a.double_star_pow(b)
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.notes.assert_no_comments()
 
         a_particles = self.a.get_particles()
-        a_particles.add_suffix(f" ** ")
-        return ParticleList(elements=[a_particles + self.b.get_particles()])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.POW
+        a_particles[-1].add_suffix(f" ** ")
+        return a_particles + self.b.get_particles()
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.a, self.b]
@@ -349,14 +295,11 @@ class ExprAddressOf(Expression):
     def to_expr_str(self):
         return self.expr.to_expr_str().address_of()
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         particles = self.expr.get_particles()
-        particles.add_prefix("&")
+        particles[0].add_prefix("&")
         return particles
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.ADDROF
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr]
 
@@ -369,17 +312,11 @@ class ExprNeg(Expression):
     def to_expr_str(self):
         return -self.val.to_expr_str()
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         particles = self.val.get_particles()
-        particles.add_prefix("-")
+        particles[0].add_prefix("-")
         return particles
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        # Use OperatorPrecedence.LOWEST (even though the actual precedence of the unary minus is
-        # higher) so that parentheses will be added even when lower-precedence operators are used.
-        # For example: `(-x) + y`.
-        return OperatorPrecedence.LOWEST
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.val]
 
@@ -393,18 +330,16 @@ class ExprParentheses(Expression):
     def to_expr_str(self):
         return ExpressionString.highest(f"({self.notes.format()}{str(self.val.to_expr_str())})")
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.notes.assert_no_comments()
-        particle = SeparatedParticleList(
-            elements=self.val.get_particles(),
-            start="(",
-            end=")",
-            separator="",
-        )
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+        return [
+            SeparatedParticleList(
+                elements=self.val.get_particles(),
+                start="(",
+                end=")",
+                separator="",
+            )
+        ]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.val]
@@ -425,15 +360,13 @@ class ExprDeref(Expression):
         notes = "" if self.notes.empty else "\n"
         return ExpressionString.highest(f"[{notes}{str(self.addr.to_expr_str())}]")
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.notes.assert_no_comments()
-        particle = SeparatedParticleList(
-            elements=self.addr.get_particles(), start="[", end="]", separator=""
-        )
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+        return [
+            SeparatedParticleList(
+                elements=self.addr.get_particles(), start="[", end="]", separator=""
+            )
+        ]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.addr]
@@ -458,19 +391,16 @@ class ExprSubscript(Expression):
             f"{self.expr.to_expr_str():HIGHEST}[{notes}{str(self.offset.to_expr_str())}]"
         )
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.notes.assert_no_comments()
 
         expr_particles = self.expr.get_particles()
-        start = expr_particles.pop_suffix() + "["
+        expr_particles[-1].add_suffix("[")
         offset_particle = SeparatedParticleList(
-            elements=self.offset.get_particles(), start=start, end="]", separator=""
+            elements=self.offset.get_particles(), start="", end="]", separator=""
         )
 
-        return expr_particles + ParticleList(elements=[offset_particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+        return expr_particles + [offset_particle]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr, self.offset]
@@ -492,16 +422,13 @@ class ExprDot(Expression):
             f"{self.expr.to_expr_str():HIGHEST}.{str(self.member.to_expr_str())}"
         )
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         expr_particles = self.expr.get_particles()
         member_str = "".join(str(particle) for particle in self.member.get_particles())
-        expr_particles.add_suffix(f".{member_str}")
+        expr_particles[-1].add_suffix(f".{member_str}")
 
         return expr_particles
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr, self.member]
 
@@ -527,19 +454,16 @@ class ExprCast(Expression):
             f"cast({notes}{str(self.expr.to_expr_str())}, {self.dest_type.format()})"
         )
 
-    def get_particles(self) -> ParticleList:
-        self.notes.assert_no_comments()
+    def get_particles(self) -> List[Particle]:
         expr_particles = self.expr.get_particles()
         type_particle = self.dest_type.to_particle()
-        particle = SeparatedParticleList(
-            elements=[expr_particles, type_particle],
-            start="cast(",
-            end=")",
-        )
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+        return [
+            SeparatedParticleList(
+                elements=[ParticleList(elements=expr_particles), type_particle],
+                start="cast(",
+                end=")",
+            )
+        ]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr, self.dest_type]
@@ -554,12 +478,12 @@ class ExprTuple(Expression):
         code = self.members.format()
         return ExpressionString.highest(f"({code})")
 
-    def get_particles(self) -> ParticleList:
-        particle = self.members.to_particle(start="(", end=")", is_tuple=True)
-        return ParticleList(elements=[particle])
-
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
+    def get_particles(self) -> List[Particle]:
+        return [
+            SeparatedParticleList(
+                elements=[x.format() for x in self.members.args], start="(", end=")"
+            )
+        ]
 
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.members]
@@ -579,12 +503,9 @@ class ExprFutureLabel(Expression):
     def to_expr_str(self):
         return self.identifier.to_expr_str()
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         return self.identifier.get_particles()
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return self.identifier.get_outmost_operator_precedence()
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.identifier]
 
@@ -605,16 +526,10 @@ class ExprNewOperator(Expression):
     def to_expr_str(self):
         return self.expr.to_expr_str().operator_new()
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         particles = self.expr.get_particles()
-        particles.add_prefix("new ")
+        particles[0].add_prefix("new ")
         return particles
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        # Use OperatorPrecedence.LOWEST (even though the actual precedence of the new operator is
-        # higher) so that parentheses will be added even when lower-precedence operators are used.
-        # For example: `(new x) + y`.
-        return OperatorPrecedence.LOWEST
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.expr]
diff --git a/src/starkware/cairo/lang/compiler/ast/expr_func_call.py b/src/starkware/cairo/lang/compiler/ast/expr_func_call.py
index e4cda3c..045465b 100644
--- a/src/starkware/cairo/lang/compiler/ast/expr_func_call.py
+++ b/src/starkware/cairo/lang/compiler/ast/expr_func_call.py
@@ -1,13 +1,12 @@
 import dataclasses
-from typing import Optional, Sequence
+from typing import List, Optional, Sequence
 
 from starkware.cairo.lang.compiler.ast.expr import Expression
-from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField
+from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField, Particle
 from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.particle import ParticleList
 from starkware.cairo.lang.compiler.ast.rvalue import RvalueFuncCall
 from starkware.cairo.lang.compiler.error_handling import Location
-from starkware.python.expression_string import ExpressionString, OperatorPrecedence
+from starkware.python.expression_string import ExpressionString
 
 
 @dataclasses.dataclass
@@ -22,11 +21,8 @@ class ExprFuncCall(Expression):
     def to_expr_str(self):
         return ExpressionString.highest(self.rvalue.format_for_expr())
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         return self.rvalue.get_particles()
 
-    def get_outmost_operator_precedence(self) -> OperatorPrecedence:
-        return OperatorPrecedence.HIGHEST
-
     def get_children(self) -> Sequence[Optional[AstNode]]:
         return [self.rvalue]
diff --git a/src/starkware/cairo/lang/compiler/ast/formatting_utils.py b/src/starkware/cairo/lang/compiler/ast/formatting_utils.py
index 628eada..c37af63 100644
--- a/src/starkware/cairo/lang/compiler/ast/formatting_utils.py
+++ b/src/starkware/cairo/lang/compiler/ast/formatting_utils.py
@@ -2,9 +2,12 @@
 Contains utils that help with formatting of Cairo code.
 """
 
+import dataclasses
+from abc import ABC, abstractmethod
 from contextlib import contextmanager
 from contextvars import ContextVar
 from dataclasses import field
+from typing import List, Sequence, Union
 
 import marshmallow
 
@@ -56,3 +59,394 @@ def set_one_item_per_line(value: bool):
 
 class FormattingError(LocationError):
     pass
+
+
+@dataclasses.dataclass
+class ParticleFormattingConfig:
+    # The maximal line length.
+    allowed_line_length: int
+    # The indentation, starting from the second line.
+    line_indent: int
+    # The prefix of the first line.
+    first_line_prefix: str = ""
+    # At most one item per line.
+    # Note: if the one_item_per_line ContextVar is True, this field is ignored (it has a slightly
+    # different formatting).
+    one_per_line: bool = False
+    # Force one item per line, even if the entire list fits into a single new line.
+    # If the list fits into the current line, it will still be concatenated to it.
+    # Note: if the one_item_per_line ContextVar is False, this field is ignored.
+    force_one_per_line: bool = False
+    # If True, line_indent is doubled.
+    # Note: if the one_item_per_line ContextVar is True, this field is ignored.
+    double_indentation: bool = False
+
+
+class ParticleLineBuilder:
+    """
+    Builds particle lines, wrapping line lengths as needed.
+    """
+
+    def __init__(self, config: ParticleFormattingConfig):
+        self.lines: List[str] = []
+        self.line = config.first_line_prefix
+        self.line_is_new = True
+        self.line_indent_stack = [0]
+        self.current_line_indent = 0
+
+        self.config = config
+
+    def push_indentation(self):
+        """
+        Saves the current line indentation into self.line_indent stack.
+        New indented lines will be indented relatively to the current line indentation.
+        """
+        self.line_indent_stack.append(self.current_line_indent)
+
+    def pop_indentation(self):
+        """
+        Pops the latest line indentation from self.line_indent_stack.
+        New indented lines will be indented relatively to the previous line indentation in the
+        stack.
+        """
+        assert len(self.line_indent_stack) > 1
+        self.line_indent_stack.pop()
+
+    def newline(self, indent: bool = True):
+        """
+        Opens a new line.
+        """
+        if self.line_is_new:
+            return
+        self.lines.append(self.line)
+        self.line_is_new = True
+        self.current_line_indent = self.line_indent_stack[-1] + (
+            self.config.line_indent if indent else 0
+        )
+        self.line = " " * self.current_line_indent
+
+    def add_to_line(self, string):
+        """
+        Adds to current line, opening a new one if needed.
+        """
+        if string == "":
+            return
+        if not self.can_fit_in_line(string) and not self.line_is_new:
+            self.newline()
+        self.line += string
+        self.line_is_new = False
+
+    def can_fit_in_line(self, string: str) -> bool:
+        """
+        Returns True if the given string can fit in the current line.
+        """
+        return len(self.line) + len(string.rstrip()) <= self.config.allowed_line_length
+
+    def finalize(self):
+        """
+        Finalizes the particle lines and returns the result.
+        """
+        if self.line:
+            self.lines.append(self.line)
+        return "\n".join(line.rstrip() for line in self.lines)
+
+
+class Particle(ABC):
+    """
+    An interface for particles.
+    """
+
+    @abstractmethod
+    def __str__(self):
+        pass
+
+    @abstractmethod
+    def is_splitable(self) -> bool:
+        """
+        Returns True if and only if the particle can be split into multiple lines.
+        """
+
+    @abstractmethod
+    def add_prefix(self, prefix: str):
+        """
+        Adds a prefix to the beginning of the particle.
+        The prefix is glued to the particle (not splittable).
+        """
+
+    @abstractmethod
+    def add_suffix(self, suffix: str):
+        """
+        Appends a suffix to the end of the particle.
+        The suffix is glued to the particle (not splittable).
+        """
+
+    @abstractmethod
+    def pop_prefix(self) -> str:
+        """
+        Removes and returns the particle prefix.
+        """
+
+    @abstractmethod
+    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
+        """
+        Adds the particle to a builder, according to the formatting configuration of the builder.
+        suffix is concatanated to the end of the particle.
+        """
+
+
+@dataclasses.dataclass()
+class SingleParticle(Particle):
+    """
+    A particle of a single expression, that cannot be split into multiple lines.
+    """
+
+    text: str
+
+    def __str__(self):
+        return self.text
+
+    def is_splitable(self) -> bool:
+        return False
+
+    def add_prefix(self, prefix: str):
+        self.text = prefix + self.text
+
+    def add_suffix(self, suffix: str):
+        self.text += suffix
+
+    def pop_prefix(self) -> str:
+        prefix = self.text
+        self.text = ""
+        return prefix
+
+    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
+        builder.add_to_line(f"{self.text}{suffix}")
+
+
+@dataclasses.dataclass()
+class ParticleList(Particle):
+    """
+    A list of particles, that should be concatenated one after the other.
+    """
+
+    def __init__(
+        self,
+        elements: Sequence[Union[Particle, str]],
+    ):
+        self.elements = []
+        for elm in elements:
+            self.elements.append(SingleParticle(text=elm) if isinstance(elm, str) else elm)
+
+    def __str__(self):
+        return "".join([str(elm) for elm in self.elements])
+
+    def is_splitable(self) -> bool:
+        return len(self.elements) > 0
+
+    def add_prefix(self, prefix: str):
+        assert len(self.elements) > 0
+        self.elements[0].add_prefix(prefix)
+
+    def add_suffix(self, suffix: str):
+        assert len(self.elements) > 0
+        self.elements[-1].add_suffix(suffix)
+
+    def pop_prefix(self) -> str:
+        if len(self.elements) == 0:
+            return ""
+        return self.elements[0].pop_prefix()
+
+    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
+        for i, particle in enumerate(self.elements):
+            particle.add_to_builder(
+                builder=builder, suffix=suffix if i == len(self.elements) - 1 else ""
+            )
+
+
+@dataclasses.dataclass()
+class SeparatedParticleList(Particle):
+    """
+    A list of particles, separated by separator (e.g. comma separated argument list).
+
+    If 'trailing_separator' is True, a separator is added to the last element of the list
+    or as a stand-alone character if the list is empty.
+    """
+
+    def __init__(
+        self,
+        elements: Sequence[Union[Particle, str]],
+        separator: str = ", ",
+        start: str = "",
+        end: str = "",
+        trailing_separator: bool = False,
+    ):
+        self.elements = []
+        for elm in elements:
+            self.elements.append(SingleParticle(text=elm) if isinstance(elm, str) else elm)
+        self.separator = separator
+        self.start = start
+        self.end = end
+        self.trailing_separator = trailing_separator
+
+    def __str__(self):
+        return self.start + self.elements_to_string() + self.end
+
+    def is_splitable(self) -> bool:
+        return len(self.elements) > 0
+
+    def add_prefix(self, prefix: str):
+        self.start = prefix + self.start
+
+    def add_suffix(self, suffix: str):
+        self.end += suffix
+
+    def pop_prefix(self) -> str:
+        prefix = self.start
+        self.start = ""
+        return prefix
+
+    def elements_to_string(self) -> str:
+        """
+        Returns a concatenation of the strings in self.elements, separated with self.separator.
+        """
+        elements_string = self.separator.join(str(elm) for elm in self.elements)
+        if self.trailing_separator:
+            elements_string += self.separator.rstrip()
+        return elements_string
+
+    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
+        """
+        Adds a particle list to the current line builder.
+        If the list cannot be fully concatenated to the current line opens a new line, and puts the
+        elements as described in self.add_elements_*().
+        """
+
+        # If the entire list fits in the current line, or the list is empty, add everything to the
+        # current line.
+        particle_list_str = f"{self}{suffix}"
+        if builder.can_fit_in_line(particle_list_str) or len(self.elements) == 0:
+            builder.add_to_line(particle_list_str)
+            return
+
+        builder.newline()
+        builder.add_to_line(self.start)
+
+        if one_item_per_line_ctx_var.get():
+            self.add_elements_one_per_line(builder=builder, suffix=suffix)
+        else:
+            self.add_elements_indent_new_lines(
+                builder=builder, suffix=suffix, one_per_line=builder.config.one_per_line
+            )
+
+    def add_elements_one_per_line(self, builder: ParticleLineBuilder, suffix: str):
+        """
+        Adds each element in a separate line, indented by 'INDENTATION' characters.
+
+        For example, using this function to format a list of arguments may result in the following
+        formatting:
+            func f(
+                x,
+                y,
+                z,
+            ) -> (
+                a,
+                b,
+                c,
+            ) {
+        """
+        # If the entire list fits in a new line, add it.
+        # Else, add each element of the list in a separate line.
+        builder.newline()
+        elements_string = self.elements_to_string()
+        if not builder.config.force_one_per_line and builder.can_fit_in_line(elements_string):
+            builder.add_to_line(elements_string)
+        else:
+            for particle in self.elements:
+                builder.newline()
+                builder.push_indentation()
+                particle.add_to_builder(builder=builder, suffix=self.separator)
+                builder.pop_indentation()
+
+        builder.newline(indent=False)
+        builder.add_to_line(f"{self.end}{suffix}")
+
+    def add_elements_indent_new_lines(
+        self, builder: ParticleLineBuilder, suffix: str, one_per_line: bool
+    ):
+        """
+        Adds each element to the current line if possible, otherwise opens a new line.
+        If one_per_line is True put each element in a separate line, without trailing separator
+        (unlike add_elements_one_per_line).
+
+        For example, using this function to format a list of arguments may result in the following
+        formatting:
+            func f(
+                x, y,
+                z) -> (
+                a, b,
+                c) {
+
+        With a longer line length we will get the lists on the same line:
+            func f(x, y, z) -> (a, b, c) {
+        """
+        # If the entire list fits in the current line, add it.
+        elements_string = f"{self.elements_to_string()}{self.end}{suffix}"
+        if len(elements_string) + len(builder.line) < builder.config.allowed_line_length:
+            builder.add_to_line(elements_string)
+            return
+
+        for i, particle in enumerate(self.elements):
+            if one_per_line:
+                builder.newline()
+            if i == len(self.elements) - 1:
+                particle_suffix = (
+                    (self.separator.rstrip() if self.trailing_separator else "") + self.end + suffix
+                )
+            else:
+                particle_suffix = self.separator
+
+            start_new_line = particle.is_splitable() and not builder.can_fit_in_line(
+                f"{particle}{particle_suffix}"
+            )
+            if start_new_line:
+                builder.newline()
+                builder.push_indentation()
+            particle.add_to_builder(builder=builder, suffix=particle_suffix)
+            if start_new_line:
+                builder.pop_indentation()
+
+
+def particles_in_lines(particles: Particle, config: ParticleFormattingConfig) -> str:
+    """
+    Receives a Particle and generates lines according to the following rules:
+
+    When one_item_per_line ContextVar is False:
+        - The first line is not indented. All other lines start with 'line_indent' spaces.
+        - A line containing more than one particle can be no longer than 'allowed_line_length'.
+        - A sublist that cannot be fully concatenated to the current line opens a new line (see
+        add_list_old_format).
+
+    When one_item_per_line ContextVar is True:
+        - The first line is not indented. Other lines start with 'line_indent' spaces. Lines
+        that construct sublists are indented as described in add_list_new_format.
+        - A line containing more than one particle can be no longer than 'allowed_line_length'.
+        - A sublist that cannot be fully concatenated to the current line opens a new line (see
+        add_list_new_format).
+
+    Usage example:
+        particles_in_lines(
+            ParticleList(elements=[
+                'func f(',
+                SeparatedParticleList(elements=['x', 'y', 'z'], end=') -> ('),
+                SeparatedParticleList(elements=['a', 'b', 'c'], end=') {')]),
+            12, 4)
+    """
+
+    if config.double_indentation and not one_item_per_line_ctx_var.get():
+        config = dataclasses.replace(
+            config, line_indent=2 * config.line_indent, double_indentation=False
+        )
+
+    builder = ParticleLineBuilder(config=config)
+    particles.add_to_builder(builder)
+    return builder.finalize()
diff --git a/src/starkware/cairo/lang/compiler/ast/particle_test.py b/src/starkware/cairo/lang/compiler/ast/formatting_utils_test.py
similarity index 75%
rename from src/starkware/cairo/lang/compiler/ast/particle_test.py
rename to src/starkware/cairo/lang/compiler/ast/formatting_utils_test.py
index 98e095b..bb504c1 100644
--- a/src/starkware/cairo/lang/compiler/ast/particle_test.py
+++ b/src/starkware/cairo/lang/compiler/ast/formatting_utils_test.py
@@ -1,12 +1,12 @@
 import pytest
 
-from starkware.cairo.lang.compiler.ast.formatting_utils import set_one_item_per_line
-from starkware.cairo.lang.compiler.ast.particle import (
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
     Particle,
     ParticleFormattingConfig,
     ParticleList,
     SeparatedParticleList,
     particles_in_lines,
+    set_one_item_per_line,
 )
 
 
@@ -40,119 +40,37 @@ def test_particles_in_lines(trailing_separator: bool):
     particles = ParticleList(
         elements=[
             "start ",
-            "+++ ",
-            "ba( ",
+            "foo ",
+            "bar ",
             SeparatedParticleList(
                 elements=["a", "b", "c", "dddd", "e", "f"],
-                end=")",
+                end="*",
                 trailing_separator=trailing_separator,
             ),
-            " + df",
+            " asdf",
         ]
     )
     expected = f"""\
-start +++
-    ba(
-    a, b, c,
-    dddd, e,
-    f{maybe_comma}) + df\
+start foo
+  bar
+  a, b, c,
+  dddd, e,
+  f{maybe_comma}* asdf\
 """
     expected_one_per_line = """\
-start +++
-    ba(
-        a,
-        b,
-        c,
-        dddd,
-        e,
-        f,
-    ) + df\
+start foo
+  bar
+  a,
+  b,
+  c,
+  dddd,
+  e,
+  f,
+* asdf\
 """
     run_test_particles_in_lines(
         particles=particles,
-        config=ParticleFormattingConfig(allowed_line_length=12, line_indent=4),
-        expected=expected,
-        expected_one_per_line=expected_one_per_line,
-    )
-
-    # Formatting of SeparatedParticleList with non-trivial starts.
-
-    particles = ParticleList(
-        elements=[
-            "let x = ",
-            "a ",
-            "- ",
-            SeparatedParticleList(
-                elements=["b + ", "c"],
-                separator="",
-                start="(",
-                end=")",
-                trailing_separator=trailing_separator,
-            ),
-        ]
-    )
-
-    expected = """\
-let x = a -
-    (b + c)\
-"""
-
-    expected_one_per_line = """\
-let x = a - (
-    b + c
-)\
-"""
-
-    run_test_particles_in_lines(
-        particles=particles,
-        config=ParticleFormattingConfig(allowed_line_length=15, line_indent=4),
-        expected=expected,
-        expected_one_per_line=expected_one_per_line,
-    )
-
-    particles = ParticleList(
-        elements=[
-            "let uvwxyz = ",
-            SeparatedParticleList(
-                elements=["a", "b"],
-                separator=", ",
-                start="foobar(",
-                end=")",
-                trailing_separator=trailing_separator,
-            ),
-        ]
-    )
-
-    expected = expected_one_per_line = f"""\
-let uvwxyz =
-    foobar(a, b{maybe_comma})\
-"""
-
-    run_test_particles_in_lines(
-        particles=particles,
-        config=ParticleFormattingConfig(allowed_line_length=18, line_indent=4),
-        expected=expected,
-        expected_one_per_line=expected_one_per_line,
-    )
-
-    # Same particles, shorter line length.
-
-    expected = f"""\
-let uvwxyz =
-    foobar(a,
-        b{maybe_comma})\
-"""
-
-    expected_one_per_line = f"""\
-let uvwxyz =
-    foobar(
-        a, b{maybe_comma}
-    )\
-"""
-
-    run_test_particles_in_lines(
-        particles=particles,
-        config=ParticleFormattingConfig(allowed_line_length=15, line_indent=4),
+        config=ParticleFormattingConfig(allowed_line_length=12, line_indent=2),
         expected=expected,
         expected_one_per_line=expected_one_per_line,
     )
diff --git a/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper.py b/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper.py
deleted file mode 100644
index a64bcc7..0000000
--- a/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper.py
+++ /dev/null
@@ -1,112 +0,0 @@
-from starkware.cairo.lang.compiler.ast.expr import (
-    ExprAddressOf,
-    ExprDot,
-    Expression,
-    ExprNeg,
-    ExprNewOperator,
-    ExprOperator,
-    ExprParentheses,
-    ExprPow,
-    ExprSubscript,
-)
-from starkware.cairo.lang.compiler.expression_transformer import ExpressionTransformer
-from starkware.python.expression_string import OperatorPrecedence
-
-
-def maybe_add_parentheses(expr: Expression, operator_precedence: OperatorPrecedence) -> Expression:
-    """
-    Adds parentheses if the given operator_precedence is higher than the expression's
-    outmost operator precedence.
-    """
-    if expr.get_outmost_operator_precedence() < operator_precedence:
-        return ExprParentheses(val=expr, location=expr.location)
-    return expr
-
-
-class ParenthesesExpressionWrapper(ExpressionTransformer):
-    """
-    Adds parentheses to expressions according to their arithmetic precedence.
-    For example, if a=4*19 and b=20*54 are two expressions, then the lowest operation in both
-    is '*'. In this case a + b and a * b do not require parentheses:
-        a + b: 4 * 19 + 20 * 54
-        a * b: 4 * 19 * 20 * 54
-    whereas a**b and a / b do:
-        a**b: (4 * 19)**(20 * 54)
-        a / b: 4 * 19 / (20 * 54)
-    """
-
-    def visit_ExprOperator(self, expr: ExprOperator):
-        if expr.op == "+":
-            a = maybe_add_parentheses(self.visit(expr.a), OperatorPrecedence.PLUS)
-            b = maybe_add_parentheses(self.visit(expr.b), OperatorPrecedence.PLUS)
-        elif expr.op == "-":
-            a = maybe_add_parentheses(self.visit(expr.a), OperatorPrecedence.PLUS)
-            b = maybe_add_parentheses(self.visit(expr.b), OperatorPrecedence.MUL)
-        elif expr.op == "*":
-            a = maybe_add_parentheses(self.visit(expr.a), OperatorPrecedence.MUL)
-            b = maybe_add_parentheses(self.visit(expr.b), OperatorPrecedence.MUL)
-        elif expr.op == "/":
-            a = maybe_add_parentheses(self.visit(expr.a), OperatorPrecedence.MUL)
-            b = maybe_add_parentheses(self.visit(expr.b), OperatorPrecedence.POW)
-        else:
-            raise NotImplementedError(f"Unexpected operator '{expr.op}'.")
-
-        return ExprOperator(
-            a=a,
-            op=expr.op,
-            b=b,
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprPow(self, expr: ExprPow):
-        # For the two expressions (a ** b) ** c and a ** (b ** c), parentheses will always be added.
-        return ExprPow(
-            a=maybe_add_parentheses(self.visit(expr.a), OperatorPrecedence.HIGHEST),
-            b=maybe_add_parentheses(self.visit(expr.b), OperatorPrecedence.HIGHEST),
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprNeg(self, expr: ExprNeg):
-        return ExprNeg(
-            val=maybe_add_parentheses(self.visit(expr.val), OperatorPrecedence.ADDROF),
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprSubscript(self, expr: ExprSubscript):
-        # If expr is not an atom, add parentheses.
-        return ExprSubscript(
-            expr=maybe_add_parentheses(self.visit(expr.expr), OperatorPrecedence.HIGHEST),
-            offset=self.visit(expr.offset),
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprDot(self, expr: ExprDot):
-        # If expr is not an atom, add parentheses.
-        return ExprDot(
-            expr=maybe_add_parentheses(self.visit(expr.expr), OperatorPrecedence.HIGHEST),
-            # Avoid visiting 'member' with an overridden visit_ExprIdentifier, as it is not a
-            # proper identifier.
-            member=ExpressionTransformer.visit_ExprIdentifier(self, expr.member),
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprAddressOf(self, expr: ExprAddressOf):
-        return ExprAddressOf(
-            expr=maybe_add_parentheses(self.visit(expr.expr), OperatorPrecedence.ADDROF),
-            location=self.location_modifier(expr.location),
-        )
-
-    def visit_ExprNewOperator(self, expr: ExprNewOperator):
-        return ExprNewOperator(
-            expr=maybe_add_parentheses(self.visit(expr.expr), OperatorPrecedence.ADDROF),
-            is_typed=expr.is_typed,
-            location=self.location_modifier(expr.location),
-        )
-
-
-def parenthesize_expression(expr: Expression):
-    parentheses_wrapper = ParenthesesExpressionWrapper()
-    return parentheses_wrapper.visit(expr)
diff --git a/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper_test.py b/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper_test.py
deleted file mode 100644
index fb2993b..0000000
--- a/src/starkware/cairo/lang/compiler/ast/parentheses_expr_wrapper_test.py
+++ /dev/null
@@ -1,89 +0,0 @@
-from typing import Optional
-
-from starkware.cairo.lang.compiler.ast.ast_objects_test_utils import remove_parentheses
-from starkware.cairo.lang.compiler.ast.parentheses_expr_wrapper import ParenthesesExpressionWrapper
-from starkware.cairo.lang.compiler.parser import parse_expr
-
-
-def test_add_and_format_parentheses():
-    """
-    Tests that format() / parentheses_wrapper add parentheses where required.
-    """
-    parentheses_wrapper = ParenthesesExpressionWrapper()
-
-    def test_expression(
-        expr_str: str,
-        expected_formatted_str: Optional[str] = None,
-        keep_original_parentheses: bool = False,
-    ):
-        """
-        Removes all ExprParentheses from the parsed expression tree, then formats it using both
-        the format method and the particles generated by the parentheses wrapper. If
-        keep_original_parentheses is True, does not remove parentheses from the parsed expression.
-        Compares the results to the expected formatted string, by default equal to expr_str.
-        Also compares the AST obtained from removing and adding parentheses to the AST parsed from
-        the expected formatted string.
-        """
-        parsed_expr = parse_expr(expr_str)
-        if not keep_original_parentheses:
-            parsed_expr = remove_parentheses(parsed_expr)
-        if expected_formatted_str is None:
-            expected_formatted_str = expr_str
-
-        formatted_expr_str = parsed_expr.format()
-        assert formatted_expr_str == expected_formatted_str
-
-        parenthesized_expr = parentheses_wrapper.visit(parsed_expr)
-        assert parenthesized_expr == parse_expr(expected_formatted_str)
-        particles_expr_str = "".join(str(p) for p in parenthesized_expr.get_particles())
-        assert particles_expr_str == expected_formatted_str
-
-    test_expression("(a + b) * (c - d) * e * f")
-    test_expression("x - (a + b) - (c - d) - e * f")
-    test_expression("a * b / (c * d)")
-    test_expression("a + b + c - d + e * f")
-    test_expression("-(a + b + c)")
-    test_expression("&(a + b)")
-    test_expression("(a * b) ** (c * d)")
-    test_expression("((a ** b) ** c) ** d")
-    test_expression("a ** (&b)")
-    test_expression("new (a + b)")
-    test_expression("(new a) * (new b)")
-    test_expression("-&(-(new (-a)))")
-
-    # Test that parentheses are added in cases where not strictly necessary for parsing.
-    test_expression("a + -b + c", "a + (-b) + c")
-    test_expression("a ** b ** c ** d", "a ** (b ** (c ** d))")
-
-    # Test that parentheses are added to non-atomized Dot, Subscript, and NewOperator expressions.
-    test_expression("(x * y).z")
-    test_expression("(-x).y")
-    test_expression("(&x).y")
-    test_expression("(new x).y")
-    test_expression("(x * y)[z]")
-    test_expression("(-x)[y]")
-    test_expression("(&x)[y]")
-    test_expression("(new x)[y]")
-
-    # Test that removed parentheses are not added when unnecessary, and spaces are added.
-    test_expression("&(x.y)", "&x.y")
-    test_expression("-(x.y)", "-x.y")
-    test_expression("new (x.y)", "new x.y")
-    test_expression("(x.y)*z", "x.y * z")
-    test_expression("x-(y.z)", "x - y.z")
-    test_expression("([x].y).z", "[x].y.z")
-    test_expression("&(x[y])", "&x[y]")
-    test_expression("-(x[y])", "-x[y]")
-    test_expression("new (x[y])", "new x[y]")
-    test_expression("(x[y])*z", "x[y] * z")
-    test_expression("x-(y[z])", "x - y[z]")
-    test_expression("(([x][y])[z])", "[x][y][z]")
-    test_expression("x[(y+z)]", "x[y + z]")
-    test_expression("[((x+y) + z)]", "[x + y + z]")
-    test_expression("x + (&y)", "x + &y")
-    test_expression("x * y / (z ** w)", "x * y / z ** w")
-
-    # Test that redundant parentheses are not changed when present.
-    test_expression("(a * (b + c))", keep_original_parentheses=True)
-    test_expression("((a * ((b + c))))", keep_original_parentheses=True)
-    test_expression("(x + y)[z]", keep_original_parentheses=True)
diff --git a/src/starkware/cairo/lang/compiler/ast/particle.py b/src/starkware/cairo/lang/compiler/ast/particle.py
deleted file mode 100644
index 202e0e1..0000000
--- a/src/starkware/cairo/lang/compiler/ast/particle.py
+++ /dev/null
@@ -1,481 +0,0 @@
-"""
-Contains classes related to Particles.
-"""
-
-import dataclasses
-from abc import ABC, abstractmethod
-from typing import List, Sequence, Union
-
-from starkware.cairo.lang.compiler.ast.formatting_utils import one_item_per_line_ctx_var
-
-
-@dataclasses.dataclass
-class ParticleFormattingConfig:
-    # The maximal line length.
-    allowed_line_length: int
-    # The indentation, starting from the second line.
-    line_indent: int
-    # The prefix of the first line.
-    first_line_prefix: str = ""
-    # At most one item per line.
-    # Note: if the one_item_per_line ContextVar is True, this field is ignored (it has a slightly
-    # different formatting).
-    one_per_line: bool = False
-    # Force one item per line, even if the entire list fits into a single new line.
-    # If the list fits into the current line, it will still be concatenated to it.
-    # Note: if the one_item_per_line ContextVar is False, this field is ignored.
-    force_one_per_line: bool = False
-    # If True, line_indent is doubled.
-    # Note: if the one_item_per_line ContextVar is True, this field is ignored.
-    double_indentation: bool = False
-
-
-class ParticleLineBuilder:
-    """
-    Builds particle lines, wrapping line lengths as needed.
-    """
-
-    def __init__(self, config: ParticleFormattingConfig):
-        self.lines: List[str] = []
-        self.line = config.first_line_prefix
-        self.line_is_new = True
-        self.line_indent_stack = [0]
-        self.current_line_indent = 0
-
-        self.config = config
-
-    def push_indentation(self):
-        """
-        Saves the current line indentation into self.line_indent stack.
-        New indented lines will be indented relatively to the current line indentation.
-        """
-        self.line_indent_stack.append(self.current_line_indent)
-
-    def pop_indentation(self):
-        """
-        Pops the latest line indentation from self.line_indent_stack.
-        New indented lines will be indented relatively to the previous line indentation in the
-        stack.
-        """
-        assert len(self.line_indent_stack) > 1
-        self.line_indent_stack.pop()
-
-    def newline(self, indent: bool = True):
-        """
-        Opens a new line.
-        """
-        if self.line_is_new:
-            return
-        self.lines.append(self.line)
-        self.line_is_new = True
-        self.current_line_indent = self.line_indent_stack[-1] + (
-            self.config.line_indent if indent else 0
-        )
-        self.line = " " * self.current_line_indent
-
-    def add_to_line(self, string):
-        """
-        Adds to current line, opening a new one if needed.
-        """
-        if string == "":
-            return
-        if not self.can_fit_in_line(string) and not self.line_is_new:
-            self.newline()
-        self.line += string
-        self.line_is_new = False
-
-    def can_fit_in_line(self, string: str) -> bool:
-        """
-        Returns True if the given string can fit in the current line.
-        """
-        return len(self.line) + len(string.rstrip()) <= self.config.allowed_line_length
-
-    def finalize(self):
-        """
-        Finalizes the particle lines and returns the result.
-        """
-        if self.line:
-            self.lines.append(self.line)
-        return "\n".join(line.rstrip() for line in self.lines)
-
-
-class Particle(ABC):
-    """
-    An interface for particles.
-    """
-
-    @abstractmethod
-    def __str__(self):
-        pass
-
-    @abstractmethod
-    def is_splitable(self) -> bool:
-        """
-        Returns True if and only if the particle can be split into multiple lines.
-        """
-
-    @abstractmethod
-    def is_empty(self) -> bool:
-        """
-        Returns True if and only if the particle contains only empty strings.
-        """
-
-    @abstractmethod
-    def add_prefix(self, prefix: str):
-        """
-        Adds a prefix to the beginning of the particle.
-        The prefix is glued to the particle (not splittable).
-        """
-
-    @abstractmethod
-    def add_suffix(self, suffix: str):
-        """
-        Appends a suffix to the end of the particle.
-        The suffix is glued to the particle (not splittable).
-        """
-
-    @abstractmethod
-    def pop_prefix(self) -> str:
-        """
-        Removes and returns the particle's prefix.
-        """
-
-    @abstractmethod
-    def pop_suffix(self) -> str:
-        """
-        Removes and returns the particle's suffix.
-        """
-
-    @abstractmethod
-    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
-        """
-        Adds the particle to a builder, according to the formatting configuration of the builder.
-        suffix is concatanated to the end of the particle.
-        """
-
-
-@dataclasses.dataclass()
-class SingleParticle(Particle):
-    """
-    A particle of a single expression, that cannot be split into multiple lines.
-    """
-
-    text: str
-
-    def __str__(self):
-        return self.text
-
-    def is_splitable(self) -> bool:
-        return False
-
-    def is_empty(self) -> bool:
-        return self.text == ""
-
-    def add_prefix(self, prefix: str):
-        self.text = prefix + self.text
-
-    def add_suffix(self, suffix: str):
-        self.text += suffix
-
-    def pop_prefix(self) -> str:
-        prefix = self.text
-        self.text = ""
-        return prefix
-
-    def pop_suffix(self) -> str:
-        suffix = self.text
-        self.text = ""
-        return suffix
-
-    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
-        builder.add_to_line(f"{self.text}{suffix}")
-
-
-@dataclasses.dataclass()
-class ParticleList(Particle):
-    """
-    A list of particles, that should be concatenated one after the other.
-    """
-
-    def __init__(
-        self,
-        elements: Sequence[Union[Particle, str]],
-    ):
-        self.elements = []
-        for elm in elements:
-            self.elements.append(SingleParticle(text=elm) if isinstance(elm, str) else elm)
-
-    def __str__(self):
-        return "".join([str(elm) for elm in self.elements])
-
-    def is_splitable(self) -> bool:
-        return len(self.elements) > 0
-
-    def is_empty(self) -> bool:
-        return all(particle.is_empty() for particle in self.elements)
-
-    def add_prefix(self, prefix: str):
-        if prefix == "":
-            return
-        if len(self.elements) == 0:
-            self.elements.append(SingleParticle(text=""))
-        self.elements[0].add_prefix(prefix)
-
-    def add_suffix(self, suffix: str):
-        if suffix == "":
-            return
-        if len(self.elements) == 0:
-            self.elements.append(SingleParticle(text=""))
-        self.elements[-1].add_suffix(suffix)
-
-    def pop_prefix(self) -> str:
-        if len(self.elements) == 0:
-            return ""
-        prefix = self.elements[0].pop_prefix()
-        if self.elements[0].is_empty():
-            del self.elements[0]
-        return prefix
-
-    def pop_suffix(self) -> str:
-        if len(self.elements) == 0:
-            return ""
-        suffix = self.elements[-1].pop_suffix()
-        if self.elements[-1].is_empty():
-            del self.elements[-1]
-        return suffix
-
-    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
-        for i, particle in enumerate(self.elements):
-            particle.add_to_builder(
-                builder=builder, suffix=suffix if i == len(self.elements) - 1 else ""
-            )
-
-    def __add__(self, other):
-        if not isinstance(other, ParticleList):
-            raise TypeError(
-                f"ParticleList addition only supports ParticleList, "
-                f"got unexpected type {type(other).__name__}."
-            )
-        return ParticleList(elements=self.elements + other.elements)
-
-    def __iter__(self):
-        return iter(self.elements)
-
-    def append(self, item: Union[Particle, str]):
-        self.elements.append(SingleParticle(text=item) if isinstance(item, str) else item)
-
-
-@dataclasses.dataclass()
-class SeparatedParticleList(Particle):
-    """
-    A list of particles, separated by separator (e.g. comma separated argument list).
-
-    If 'trailing_separator' is True, a separator is added to the last element of the list
-    or as a stand-alone character if the list is empty.
-    """
-
-    def __init__(
-        self,
-        elements: Union[Sequence[Union[Particle, str]], ParticleList],
-        separator: str = ", ",
-        start: str = "",
-        end: str = "",
-        trailing_separator: bool = False,
-    ):
-        self.elements = []
-        for elm in elements:
-            self.elements.append(SingleParticle(text=elm) if isinstance(elm, str) else elm)
-        self.separator = separator
-        self.start = start
-        self.end = end
-        self.trailing_separator = trailing_separator
-
-    def __str__(self):
-        return self.start + self.elements_to_string() + self.end
-
-    def is_splitable(self) -> bool:
-        return len(self.elements) > 0
-
-    def is_empty(self) -> bool:
-        return (
-            all(particle.is_empty() for particle in self.elements)
-            and self.start == ""
-            and self.end == ""
-            and self.separator == ""
-        )
-
-    def add_prefix(self, prefix: str):
-        self.start = prefix + self.start
-
-    def add_suffix(self, suffix: str):
-        self.end += suffix
-
-    def pop_prefix(self) -> str:
-        prefix = self.start
-        self.start = ""
-        return prefix
-
-    def pop_suffix(self) -> str:
-        suffix = self.end
-        self.end = ""
-        return suffix
-
-    def elements_to_string(self) -> str:
-        """
-        Returns a concatenation of the strings in self.elements, separated with self.separator.
-        """
-        elements_string = self.separator.join(str(elm) for elm in self.elements)
-        if self.trailing_separator:
-            elements_string += self.separator.rstrip()
-        return elements_string
-
-    def add_to_builder(self, builder: ParticleLineBuilder, suffix: str = ""):
-        """
-        Adds a particle list to the current line builder.
-        If the list cannot be fully concatenated to the current line opens a new line, and puts the
-        elements as described in self.add_elements_*().
-        """
-
-        # If the entire list fits in the current line, or the list is empty, add everything to the
-        # current line.
-        particle_list_str = f"{self}{suffix}"
-        if builder.can_fit_in_line(particle_list_str) or len(self.elements) == 0:
-            builder.add_to_line(particle_list_str)
-            return
-
-        # If self.start opens a new line, try to fit the entire list in a new line.
-        if not builder.can_fit_in_line(self.start):
-            builder.newline()
-            if builder.can_fit_in_line(particle_list_str):
-                builder.add_to_line(particle_list_str)
-                return
-
-        if one_item_per_line_ctx_var.get():
-            self.add_elements_one_per_line(builder=builder, suffix=suffix)
-        else:
-            self.add_elements_indent_new_lines(
-                builder=builder, suffix=suffix, one_per_line=builder.config.one_per_line
-            )
-
-    def add_elements_one_per_line(self, builder: ParticleLineBuilder, suffix: str):
-        """
-        Adds each element in a separate line, indented by 'INDENTATION' characters.
-
-        For example, using this function to format a list of arguments may result in the following
-        formatting:
-            func f(
-                x,
-                y,
-                z,
-            ) -> (
-                a,
-                b,
-                c,
-            ) {
-        """
-        builder.add_to_line(self.start)
-        builder.push_indentation()
-
-        # If all the list elements fit in a new line, add them.
-        # Else, add each element of the list in a separate line.
-        builder.newline()
-        elements_string = self.elements_to_string()
-        if not builder.config.force_one_per_line and builder.can_fit_in_line(elements_string):
-            builder.add_to_line(elements_string)
-        else:
-            for particle in self.elements:
-                builder.newline()
-                particle.add_to_builder(builder=builder, suffix=self.separator)
-
-        builder.newline(indent=False)
-        builder.add_to_line(f"{self.end}{suffix}")
-        builder.pop_indentation()
-
-    def add_elements_indent_new_lines(
-        self, builder: ParticleLineBuilder, suffix: str, one_per_line: bool
-    ):
-        """
-        Adds each element to the current line if possible, otherwise opens a new line.
-        If one_per_line is True put each element in a separate line, without trailing separator
-        (unlike add_elements_one_per_line).
-
-        For example, using this function to format a list of arguments may result in the following
-        formatting:
-            func f(
-                x, y,
-                z) -> (
-                a, b,
-                c) {
-
-        With a longer line length we will get the lists on the same line:
-            func f(x, y, z) -> (a, b, c) {
-        """
-        builder.newline()
-        builder.add_to_line(self.start)
-        if len(self.start) > 0:
-            builder.push_indentation()
-
-        # If the entire list fits in the current line, add it.
-        elements_string = f"{self.elements_to_string()}{self.end}{suffix}"
-        if len(elements_string) + len(builder.line) < builder.config.allowed_line_length:
-            builder.add_to_line(elements_string)
-            return
-
-        for i, particle in enumerate(self.elements):
-            if one_per_line:
-                builder.newline()
-            if i == len(self.elements) - 1:
-                particle_suffix = (
-                    (self.separator.rstrip() if self.trailing_separator else "") + self.end + suffix
-                )
-            else:
-                particle_suffix = self.separator
-
-            start_new_line = particle.is_splitable() and not builder.can_fit_in_line(
-                f"{particle}{particle_suffix}"
-            )
-            if start_new_line:
-                builder.newline()
-                builder.push_indentation()
-            particle.add_to_builder(builder=builder, suffix=particle_suffix)
-            if start_new_line:
-                builder.pop_indentation()
-
-        if len(self.start) > 0:
-            builder.pop_indentation()
-
-
-def particles_in_lines(particles: Particle, config: ParticleFormattingConfig) -> str:
-    """
-    Receives a Particle and generates lines according to the following rules:
-
-    When one_item_per_line ContextVar is False:
-        - The first line is not indented. All other lines start with 'line_indent' spaces.
-        - A line containing more than one particle can be no longer than 'allowed_line_length'.
-        - A sublist that cannot be fully concatenated to the current line opens a new line (see
-        add_list_old_format).
-
-    When one_item_per_line ContextVar is True:
-        - The first line is not indented. Other lines start with 'line_indent' spaces. Lines
-        that construct sublists are indented as described in add_list_new_format.
-        - A line containing more than one particle can be no longer than 'allowed_line_length'.
-        - A sublist that cannot be fully concatenated to the current line opens a new line (see
-        add_list_new_format).
-
-    Usage example:
-        particles_in_lines(
-            ParticleList(elements=[
-                'func f(',
-                SeparatedParticleList(elements=['x', 'y', 'z'], end=') -> ('),
-                SeparatedParticleList(elements=['a', 'b', 'c'], end=') {')]),
-            12, 4)
-    """
-
-    if config.double_indentation and not one_item_per_line_ctx_var.get():
-        config = dataclasses.replace(
-            config, line_indent=2 * config.line_indent, double_indentation=False
-        )
-
-    builder = ParticleLineBuilder(config=config)
-    particles.add_to_builder(builder)
-    return builder.finalize()
diff --git a/src/starkware/cairo/lang/compiler/ast/rvalue.py b/src/starkware/cairo/lang/compiler/ast/rvalue.py
index eb19029..12199bd 100644
--- a/src/starkware/cairo/lang/compiler/ast/rvalue.py
+++ b/src/starkware/cairo/lang/compiler/ast/rvalue.py
@@ -1,17 +1,20 @@
 import dataclasses
 from abc import abstractmethod
-from typing import Optional, Sequence
+from typing import List, Optional, Sequence
 
 from starkware.cairo.lang.compiler.ast.expr import ArgList, Expression, ExprIdentifier
-from starkware.cairo.lang.compiler.ast.formatting_utils import INDENTATION, LocationField
-from starkware.cairo.lang.compiler.ast.instructions import CallInstruction
-from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.particle import (
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    INDENTATION,
+    LocationField,
+    Particle,
     ParticleFormattingConfig,
     ParticleList,
+    SeparatedParticleList,
     SingleParticle,
     particles_in_lines,
 )
+from starkware.cairo.lang.compiler.ast.instructions import CallInstruction
+from starkware.cairo.lang.compiler.ast.node import AstNode
 from starkware.cairo.lang.compiler.error_handling import Location
 
 
@@ -32,9 +35,9 @@ class Rvalue(AstNode):
         """
 
     @abstractmethod
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         """
-        Returns a ParticleList that can be used to convert the Rvalue to a multiline string.
+        Returns a list of particles that can be used to convert the Rvalue to a multiline string.
         """
 
     @abstractmethod
@@ -56,8 +59,8 @@ class RvalueExpr(Rvalue):
     def location(self):
         return self.expr.location
 
-    def get_particles(self) -> ParticleList:
-        return self.expr.get_particles()
+    def get_particles(self) -> List[Particle]:
+        return [SingleParticle(text=self.expr.format())]
 
     def format(self):
         return self.expr.format()
@@ -88,8 +91,8 @@ class RvalueCallInst(RvalueCall):
     def location(self):
         return self.call_inst.location
 
-    def get_particles(self) -> ParticleList:
-        return ParticleList(elements=[SingleParticle(text=self.call_inst.format())])
+    def get_particles(self) -> List[Particle]:
+        return [SingleParticle(text=self.call_inst.format())]
 
     def format(self):
         return self.call_inst.format()
@@ -115,19 +118,25 @@ class RvalueFuncCall(RvalueCall):
         if self.implicit_arguments is not None:
             self.implicit_arguments.assert_no_comments()
 
-    def get_particles(self) -> ParticleList:
+    def get_particles(self) -> List[Particle]:
         self.assert_no_comments()
 
         particles = self.func_ident.get_particles()
 
         if self.implicit_arguments is not None:
-            start = particles.pop_suffix() + "{"
-            particles.append(self.implicit_arguments.to_particle(start=start, end="}("))
-            particles.append(self.arguments.to_particle(end=")"))
+            particles[-1].add_suffix("{")
+            particles.append(
+                SeparatedParticleList(
+                    elements=[x.format() for x in self.implicit_arguments.args],
+                    end="}(",
+                )
+            )
         else:
-            start = particles.pop_suffix() + "("
-            particles.append(self.arguments.to_particle(start=start, end=")"))
+            particles[-1].add_suffix("(")
 
+        particles.append(
+            SeparatedParticleList(elements=[x.format() for x in self.arguments.args], end=")")
+        )
         return particles
 
     def format(self, allowed_line_length):
@@ -135,7 +144,7 @@ class RvalueFuncCall(RvalueCall):
 
     def format_ex(self, allowed_line_length, semicolon: bool):
         self.assert_no_comments()
-        particles = self.get_particles()
+        particles = ParticleList(elements=self.get_particles())
         if semicolon:
             particles.add_suffix(";")
         return particles_in_lines(
diff --git a/src/starkware/cairo/lang/compiler/ast/types.py b/src/starkware/cairo/lang/compiler/ast/types.py
index 50169c9..cf5afde 100644
--- a/src/starkware/cairo/lang/compiler/ast/types.py
+++ b/src/starkware/cairo/lang/compiler/ast/types.py
@@ -3,9 +3,12 @@ from typing import Optional, Sequence
 
 from starkware.cairo.lang.compiler.ast.cairo_types import CairoType, TypeFelt
 from starkware.cairo.lang.compiler.ast.expr import ExprIdentifier
-from starkware.cairo.lang.compiler.ast.formatting_utils import LocationField
+from starkware.cairo.lang.compiler.ast.formatting_utils import (
+    LocationField,
+    Particle,
+    SingleParticle,
+)
 from starkware.cairo.lang.compiler.ast.node import AstNode
-from starkware.cairo.lang.compiler.ast.particle import Particle, SingleParticle
 from starkware.cairo.lang.compiler.error_handling import Location
 
 
diff --git a/src/starkware/cairo/lang/compiler/ast_objects_test.py b/src/starkware/cairo/lang/compiler/ast_objects_test.py
index 206696c..7f6480f 100644
--- a/src/starkware/cairo/lang/compiler/ast_objects_test.py
+++ b/src/starkware/cairo/lang/compiler/ast_objects_test.py
@@ -1,5 +1,6 @@
 import pytest
 
+from starkware.cairo.lang.compiler.ast.ast_objects_test_utils import remove_parentheses
 from starkware.cairo.lang.compiler.ast.expr import ExprConst, ExprNeg, ExprOperator
 from starkware.cairo.lang.compiler.ast.formatting_utils import (
     FormattingError,
@@ -8,6 +9,61 @@ from starkware.cairo.lang.compiler.ast.formatting_utils import (
 from starkware.cairo.lang.compiler.parser import parse_code_element, parse_expr, parse_file
 
 
+def test_format_parentheses():
+    """
+    Tests that format() adds parentheses where required.
+    """
+
+    # Call remove_parentheses(parse_expr()) to create an expression tree in the given structure
+    # without ExprParentheses.
+    assert (
+        remove_parentheses(parse_expr("(a + b) * (c - d) * (e * f)")).format()
+        == "(a + b) * (c - d) * e * f"
+    )
+    assert (
+        remove_parentheses(parse_expr("x - (a + b) - (c - d) - (e * f)")).format()
+        == "x - (a + b) - (c - d) - e * f"
+    )
+    assert (
+        remove_parentheses(parse_expr("(a + b) + (c - d) + (e * f)")).format()
+        == "a + b + c - d + e * f"
+    )
+    assert remove_parentheses(parse_expr("-(a + b + c)")).format() == "-(a + b + c)"
+    assert remove_parentheses(parse_expr("a + -b + c")).format() == "a + (-b) + c"
+    assert remove_parentheses(parse_expr("&(a + b)")).format() == "&(a + b)"
+    assert remove_parentheses(parse_expr("a ** b ** c ** d")).format() == "a ** (b ** (c ** d))"
+
+    # Test that parentheses are added to non-atomized Dot and Subscript expressions.
+    assert remove_parentheses(parse_expr("(x * y).z")).format() == "(x * y).z"
+    assert remove_parentheses(parse_expr("(-x).y")).format() == "(-x).y"
+    assert remove_parentheses(parse_expr("(&x).y")).format() == "(&x).y"
+    assert remove_parentheses(parse_expr("(x * y)[z]")).format() == "(x * y)[z]"
+    assert remove_parentheses(parse_expr("(-x)[y]")).format() == "(-x)[y]"
+    assert remove_parentheses(parse_expr("(&x)[y]")).format() == "(&x)[y]"
+
+    assert remove_parentheses(parse_expr("&(x.y)")).format() == "&x.y"
+    assert remove_parentheses(parse_expr("-(x.y)")).format() == "-x.y"
+    assert remove_parentheses(parse_expr("(x.y)*z")).format() == "x.y * z"
+    assert remove_parentheses(parse_expr("x-(y.z)")).format() == "x - y.z"
+
+    assert remove_parentheses(parse_expr("([x].y).z")).format() == "[x].y.z"
+    assert remove_parentheses(parse_expr("&(x[y])")).format() == "&x[y]"
+    assert remove_parentheses(parse_expr("-(x[y])")).format() == "-x[y]"
+    assert remove_parentheses(parse_expr("(x[y])*z")).format() == "x[y] * z"
+    assert remove_parentheses(parse_expr("x-(y[z])")).format() == "x - y[z]"
+    assert remove_parentheses(parse_expr("(([x][y])[z])")).format() == "[x][y][z]"
+    assert remove_parentheses(parse_expr("x[(y+z)]")).format() == "x[y + z]"
+
+    assert remove_parentheses(parse_expr("[((x+y) + z)]")).format() == "[x + y + z]"
+
+    assert remove_parentheses(parse_expr("new (2+3)")).format() == "new (2 + 3)"
+
+    # Test that parentheses are not added if they were already present.
+    assert parse_expr("(a * (b + c))").format() == "(a * (b + c))"
+    assert parse_expr("((a * ((b + c))))").format() == "((a * ((b + c))))"
+    assert parse_expr("(x + y)[z]").format() == "(x + y)[z]"
+
+
 def test_format_parentheses_notes():
     before = """\
 (  //    Comment.
@@ -77,7 +133,7 @@ ap+=[ fp ]  ;
 %lang starknet
 [ap + -1] = [fp]  *  3;
  const x=y  +  f(a=g(
-                      z) ,
+                      z) ,// test
                       b=0);
     struct  A{
 
@@ -131,7 +187,9 @@ with_attr error_message  (  "Attribute value " "with"
 ap += [fp];
 %lang starknet
 [ap + (-1)] = [fp] * 3;
-const x = y + f(a=g(z), b=0);
+const x = y + f(a=g(
+        z),  // test
+    b=0);
 struct A {
     x: T.S,
 }
@@ -147,7 +205,7 @@ local z: T* = x;
 assert x * z + x = y + y;
 static_assert ap + (3 + 7) + ap == fp;
 let () = foo();
-return (1, [fp], [ap + 3]);
+return (1, [fp], [ap + 3],);
 fibonacci(a=3, b=[fp + 1]);
 [ap - 1] = [fp];  // This is a comment.
 
@@ -415,7 +473,7 @@ def test_return_splitting():
 return (a, b, c, foo, bar,
         variable_name_which_is_way_too_long_but_has_to_be_supported, g);
 """
-    after_not_one_per_line = """\
+    after = """\
 return (
     a,
     b,
@@ -424,24 +482,9 @@ return (
     bar,
     variable_name_which_is_way_too_long_but_has_to_be_supported,
     g);
-"""
-
-    after_one_per_line = """\
-return (
-    a,
-    b,
-    c,
-    foo,
-    bar,
-    variable_name_which_is_way_too_long_but_has_to_be_supported,
-    g,
-);
 """
     with set_one_item_per_line(False):
-        assert parse_file(before).format(allowed_line_length=20) == after_not_one_per_line
-
-    with set_one_item_per_line(True):
-        assert parse_file(before).format(allowed_line_length=20) == after_one_per_line
+        assert parse_file(before).format(allowed_line_length=20) == after
 
 
 def test_func_arg_ret_splitting():
diff --git a/src/starkware/cairo/lang/compiler/cairo.ebnf b/src/starkware/cairo/lang/compiler/cairo.ebnf
index 9f251a7..ce3d1d2 100644
--- a/src/starkware/cairo/lang/compiler/cairo.ebnf
+++ b/src/starkware/cairo/lang/compiler/cairo.ebnf
@@ -52,18 +52,18 @@ decorator_list: (decorator _NEWLINE*)*
     | atom _DBL_STAR notes pow -> expr_pow
 identifier: IDENTIFIER ("." IDENTIFIER)*
 identifier_def: IDENTIFIER
-?atom: INT                                                   -> atom_number
-     | HEXINT                                                -> atom_hex_number
-     | SHORT_STRING                                          -> atom_short_string
-     | "nondet" HINT                                         -> atom_hint
-     | reg                                                   -> atom_reg
-     | function_call                                         -> atom_func_call
+?atom: INT                                    -> atom_number
+     | HEXINT                                 -> atom_hex_number
+     | SHORT_STRING                           -> atom_short_string
+     | "nondet" HINT                          -> atom_hint
+     | reg                                    -> atom_reg
+     | function_call                          -> atom_func_call
      | identifier
-     | "[" notes expr notes "]"                              -> atom_deref
-     | atom "[" notes expr notes "]"                         -> atom_subscript
-     | atom "." identifier_def                               -> atom_dot
-     | "cast" "(" notes expr "," notes type ","? notes ")"   -> atom_cast
-     | "(" arg_list ")"                                      -> atom_tuple_or_parentheses
+     | "[" notes expr "]"                     -> atom_deref
+     | atom "[" notes expr "]"                -> atom_subscript
+     | atom "." identifier_def                -> atom_dot
+     | "cast" "(" notes expr "," type ")"     -> atom_cast
+     | "(" arg_list ")"                       -> atom_tuple_or_parentheses
 !reg: "ap" -> reg_ap
     | "fp" -> reg_fp
 
diff --git a/src/starkware/cairo/lang/compiler/expression_transformer.py b/src/starkware/cairo/lang/compiler/expression_transformer.py
index 23baf05..e3c7459 100644
--- a/src/starkware/cairo/lang/compiler/expression_transformer.py
+++ b/src/starkware/cairo/lang/compiler/expression_transformer.py
@@ -77,7 +77,6 @@ class ExpressionTransformer:
             a=self.visit(expr.a),
             op=expr.op,
             b=self.visit(expr.b),
-            notes=expr.notes,
             location=self.location_modifier(expr.location),
         )
 
@@ -85,7 +84,6 @@ class ExpressionTransformer:
         return ExprPow(
             a=self.visit(expr.a),
             b=self.visit(expr.b),
-            notes=expr.notes,
             location=self.location_modifier(expr.location),
         )
 
@@ -94,23 +92,16 @@ class ExpressionTransformer:
 
     def visit_ExprParentheses(self, expr: ExprParentheses):
         return ExprParentheses(
-            val=self.visit(expr.val),
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
+            val=self.visit(expr.val), location=self.location_modifier(expr.location)
         )
 
     def visit_ExprDeref(self, expr: ExprDeref):
-        return ExprDeref(
-            addr=self.visit(expr.addr),
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
-        )
+        return ExprDeref(addr=self.visit(expr.addr), location=self.location_modifier(expr.location))
 
     def visit_ExprSubscript(self, expr: ExprSubscript):
         return ExprSubscript(
             expr=self.visit(expr.expr),
             offset=self.visit(expr.offset),
-            notes=expr.notes,
             location=self.location_modifier(expr.location),
         )
 
@@ -124,30 +115,28 @@ class ExpressionTransformer:
         )
 
     def visit_ExprAddressOf(self, expr: ExprAddressOf):
-        return ExprAddressOf(
-            expr=self.visit(expr.expr),
-            location=self.location_modifier(expr.location),
-        )
+        inner_expr = self.visit(expr.expr)
+        return ExprAddressOf(expr=inner_expr, location=self.location_modifier(expr.location))
 
     def visit_ExprCast(self, expr: ExprCast):
+        inner_expr = self.visit(expr.expr)
         return ExprCast(
-            expr=self.visit(expr.expr),
+            expr=inner_expr,
             dest_type=expr.dest_type,
             cast_type=expr.cast_type,
-            notes=expr.notes,
             location=self.location_modifier(expr.location),
         )
 
-    def visit_ExprAssignment(self, expr_assignment: ExprAssignment):
-        return ExprAssignment(
-            identifier=expr_assignment.identifier,
-            expr=self.visit(expr_assignment.expr),
-            location=self.location_modifier(expr_assignment.location),
-        )
-
     def visit_ArgList(self, arg_list: ArgList):
         return ArgList(
-            args=[self.visit_ExprAssignment(item) for item in arg_list.args],
+            args=[
+                ExprAssignment(
+                    identifier=item.identifier,
+                    expr=self.visit(item.expr),
+                    location=self.location_modifier(item.location),
+                )
+                for item in arg_list.args
+            ],
             notes=arg_list.notes,
             has_trailing_comma=arg_list.has_trailing_comma,
             location=self.location_modifier(arg_list.location),
diff --git a/src/starkware/cairo/lang/compiler/parser_test.py b/src/starkware/cairo/lang/compiler/parser_test.py
index 2bb09c8..e3a2ab0 100644
--- a/src/starkware/cairo/lang/compiler/parser_test.py
+++ b/src/starkware/cairo/lang/compiler/parser_test.py
@@ -740,9 +740,8 @@ def test_code_element_return():
     code = """\
 return (
     res=Point(
-        x=points[0].x + points[1].x,
-        y=points[0].y + points[1].y,
-    ),
+    x=points[0].x + points[1].x,
+    y=points[0].y + points[1].y),
 );"""
 
     res = parse_code_element(code)
@@ -757,44 +756,21 @@ def test_func_call():
     assert res.format(allowed_line_length=100) == "fibonacci{a=b, c=d}(1, a=2);"
     assert res.format(allowed_line_length=20) == "fibonacci{a=b, c=d}(\n    1, a=2\n);"
     assert res.format(allowed_line_length=15) == "fibonacci{\n    a=b, c=d\n}(1, a=2);"
-    assert (
-        res.format(allowed_line_length=5)
-        == """\
-fibonacci{
-    a=b,
-    c=d,
-}(
-    1,
-    a=2,
-);"""
-    )
 
 
 def test_tail_call():
     res = parse_code_element("return    fibonacci(  1, \na= 2  );")
     assert isinstance(res, CodeElementTailCall)
     assert res.format(allowed_line_length=100) == "return fibonacci(1, a=2);"
-    assert (
-        res.format(allowed_line_length=10)
-        == """\
-return fibonacci(
-    1, a=2
-);"""
-    )
 
     res = parse_code_element("return    (fibonacci(  1, \na= 2  ));")
     assert isinstance(res, CodeElementReturn)
     assert isinstance(res.expr, ExprParentheses)
-    assert res.format(allowed_line_length=100) == "return (fibonacci(1, a=2));"
     assert (
-        res.format(allowed_line_length=10)
+        res.format(allowed_line_length=100)
         == """\
-return (
-    fibonacci(
-        1,
-        a=2,
-    )
-);"""
+return (fibonacci(1,
+    a=2));"""
     )
 
 
diff --git a/src/starkware/cairo/lang/compiler/parser_transformer.py b/src/starkware/cairo/lang/compiler/parser_transformer.py
index 667946d..175483d 100644
--- a/src/starkware/cairo/lang/compiler/parser_transformer.py
+++ b/src/starkware/cairo/lang/compiler/parser_transformer.py
@@ -144,7 +144,7 @@ class ParserTransformer(Transformer):
         raise TypeError(f"Unable to parse tree node of type {data}")
 
     def comma_separated_with_notes(self, value) -> CommaSeparatedWithNotes:
-        saw_comma = None
+        saw_comma = True
         all_notes: List[Notes] = []
         current_notes: List[Notes] = []
         args: list = []
@@ -153,11 +153,11 @@ class ParserTransformer(Transformer):
                 # Join the notes before and after the comma.
                 current_notes.append(v)
             elif isinstance(v, Token) and v.type == "COMMA":
-                if saw_comma is not False:
+                if saw_comma:
                     raise ParserError("Unexpected comma.", location=self.token2loc(v))
                 saw_comma = True
             else:
-                if saw_comma is False:
+                if not saw_comma:
                     raise ParserError(
                         "Expected a comma before this expression.", location=v.location
                     )
@@ -169,8 +169,6 @@ class ParserTransformer(Transformer):
                 current_notes = []
 
         all_notes.append(Notes.merge(current_notes))
-        if saw_comma is None:
-            saw_comma = False
 
         return CommaSeparatedWithNotes(
             args=args,
@@ -370,12 +368,12 @@ class ParserTransformer(Transformer):
 
     @v_args(meta=True)
     def atom_deref(self, meta, value):
-        return ExprDeref(addr=value[1], notes=value[0] + value[2], location=self.meta2loc(meta))
+        return ExprDeref(addr=value[1], notes=value[0], location=self.meta2loc(meta))
 
     @v_args(meta=True)
     def atom_subscript(self, meta, value):
         return ExprSubscript(
-            expr=value[0], offset=value[2], notes=value[1] + value[3], location=self.meta2loc(meta)
+            expr=value[0], offset=value[2], notes=value[1], location=self.meta2loc(meta)
         )
 
     @v_args(meta=True)
@@ -385,10 +383,7 @@ class ParserTransformer(Transformer):
     @v_args(meta=True)
     def atom_cast(self, meta, value):
         return ExprCast(
-            expr=value[1],
-            dest_type=value[3],
-            notes=value[0] + value[2] + value[4],
-            location=self.meta2loc(meta),
+            expr=value[1], notes=value[0], dest_type=value[2], location=self.meta2loc(meta)
         )
 
     @v_args(meta=True)
diff --git a/src/starkware/cairo/lang/compiler/substitute_identifiers.py b/src/starkware/cairo/lang/compiler/substitute_identifiers.py
index 322e67d..5cfe95a 100644
--- a/src/starkware/cairo/lang/compiler/substitute_identifiers.py
+++ b/src/starkware/cairo/lang/compiler/substitute_identifiers.py
@@ -62,10 +62,7 @@ class SubstituteIdentifiers(ExpressionTransformer):
         # The reason is that the exponent shouldn't be taken modulo PRIME, so we don't allow
         # using identifiers in the exponent.
         return ExprPow(
-            a=self.visit(expr.a),
-            b=expr.b,
-            notes=expr.notes,
-            location=self.location_modifier(expr.location),
+            a=self.visit(expr.a), b=expr.b, location=self.location_modifier(expr.location)
         )
 
     def visit_RvalueFuncCall(self, rvalue: RvalueFuncCall):
diff --git a/src/starkware/cairo/lang/compiler/type_system_visitor_test.py b/src/starkware/cairo/lang/compiler/type_system_visitor_test.py
index 9801de4..38305da 100644
--- a/src/starkware/cairo/lang/compiler/type_system_visitor_test.py
+++ b/src/starkware/cairo/lang/compiler/type_system_visitor_test.py
@@ -3,9 +3,9 @@ from typing import Optional
 
 import pytest
 
-from starkware.cairo.lang.compiler.ast.ast_objects_test_utils import remove_parentheses
 from starkware.cairo.lang.compiler.ast.cairo_types import TypeFelt, TypePointer, TypeStruct
 from starkware.cairo.lang.compiler.ast.expr import ExprFutureLabel, ExprNewOperator
+from starkware.cairo.lang.compiler.ast_objects_test import remove_parentheses
 from starkware.cairo.lang.compiler.expression_transformer import ExpressionTransformer
 from starkware.cairo.lang.compiler.identifier_definition import MemberDefinition, StructDefinition
 from starkware.cairo.lang.compiler.identifier_manager import IdentifierManager
diff --git a/src/starkware/cairo/lang/ide/vscode-cairo/package.json b/src/starkware/cairo/lang/ide/vscode-cairo/package.json
index a955cab..0b0679b 100644
--- a/src/starkware/cairo/lang/ide/vscode-cairo/package.json
+++ b/src/starkware/cairo/lang/ide/vscode-cairo/package.json
@@ -2,7 +2,7 @@
     "name": "cairo",
     "displayName": "Cairo",
     "description": "Support Cairo syntax",
-    "version": "0.10.3",
+    "version": "0.10.2",
     "engines": {
         "vscode": "^1.30.0"
     },
diff --git a/src/starkware/cairo/lang/migrators/migrator.py b/src/starkware/cairo/lang/migrators/migrator.py
index 6383509..07c967a 100644
--- a/src/starkware/cairo/lang/migrators/migrator.py
+++ b/src/starkware/cairo/lang/migrators/migrator.py
@@ -21,10 +21,7 @@ from starkware.cairo.lang.compiler.ast.code_elements import (
 from starkware.cairo.lang.compiler.ast.expr import (
     ArgList,
     ExprAssignment,
-    ExprCast,
-    ExprDeref,
     ExprParentheses,
-    ExprSubscript,
     ExprTuple,
 )
 from starkware.cairo.lang.compiler.ast.expr_func_call import ExprFuncCall
@@ -62,22 +59,6 @@ class MigratorParserTransformer(ParserTransformer):
     def __init__(self, input_file: InputFile, parser_context: Optional[ParserContext]):
         super().__init__(input_file, parser_context)
 
-    @lark.v_args(meta=True)
-    def atom_deref(self, meta, value):
-        return ExprDeref(addr=value[1], notes=value[0], location=self.meta2loc(meta))
-
-    @lark.v_args(meta=True)
-    def atom_subscript(self, meta, value):
-        return ExprSubscript(
-            expr=value[0], offset=value[2], notes=value[1], location=self.meta2loc(meta)
-        )
-
-    @lark.v_args(meta=True)
-    def atom_cast(self, meta, value):
-        return ExprCast(
-            expr=value[1], dest_type=value[2], notes=value[0], location=self.meta2loc(meta)
-        )
-
     def code_element_function(self, value):
         decorators, identifier, implicit_arguments, arguments = value[:4]
         if len(value) == 6:
diff --git a/src/starkware/cairo/lang/package_test/run_test.sh b/src/starkware/cairo/lang/package_test/run_test.sh
index 26ab621..649e005 100755
--- a/src/starkware/cairo/lang/package_test/run_test.sh
+++ b/src/starkware/cairo/lang/package_test/run_test.sh
@@ -39,6 +39,3 @@ starknet-compile ${root_dir}/src/starkware/starknet/apps/amm_sample/amm_sample.c
 
 # Test StarkNet CLI.
 starknet --help > /dev/null
-
-# Test starknet-class-hash.
-starknet-class-hash --help > /dev/null
diff --git a/src/starkware/cairo/lang/setup.py b/src/starkware/cairo/lang/setup.py
index ada281b..e86d1ac 100644
--- a/src/starkware/cairo/lang/setup.py
+++ b/src/starkware/cairo/lang/setup.py
@@ -43,7 +43,6 @@ setuptools.setup(
         "starkware/cairo/lang/scripts/cairo-reconstruct-traceback",
         "starkware/cairo/lang/scripts/cairo-run",
         "starkware/cairo/lang/scripts/cairo-sharp",
-        "starkware/starknet/scripts/starknet-class-hash",
         "starkware/starknet/scripts/starknet-compile",
         "starkware/starknet/scripts/starknet",
     ],
diff --git a/src/starkware/cairo/lang/vm/validated_memory_dict.py b/src/starkware/cairo/lang/vm/validated_memory_dict.py
index 531d453..718550e 100644
--- a/src/starkware/cairo/lang/vm/validated_memory_dict.py
+++ b/src/starkware/cairo/lang/vm/validated_memory_dict.py
@@ -10,13 +10,10 @@ class ValidatedMemoryDict:
     """
     A proxy to MemoryDict which validates memory values in specific segments upon writing to it.
     Validation is done according to the validation rules.
-
-    In addition, all values that are written through it are taken modulo the program's prime.
     """
 
-    def __init__(self, memory: MemoryDict, prime: int):
-        self.__memory = memory
-        self.prime = prime
+    def __init__(self, memory):
+        self.__memory: MemoryDict = memory
         # validation_rules contains a mapping from a segment index to a list of functions
         # (and a tuple of additional arguments) that may try to validate the value of memory cells
         # in the segment (sometimes based on other memory cells).
@@ -28,7 +25,6 @@ class ValidatedMemoryDict:
         return self.__memory[addr]
 
     def __setitem__(self, addr: MaybeRelocatable, value: MaybeRelocatable):
-        value %= self.prime
         self.__memory[addr] = value
         self._validate_memory_cell(addr, value)
 
diff --git a/src/starkware/cairo/lang/vm/validated_memory_dict_test.py b/src/starkware/cairo/lang/vm/validated_memory_dict_test.py
index 7e03682..de761d2 100644
--- a/src/starkware/cairo/lang/vm/validated_memory_dict_test.py
+++ b/src/starkware/cairo/lang/vm/validated_memory_dict_test.py
@@ -9,8 +9,7 @@ from starkware.cairo.lang.vm.validated_memory_dict import ValidatedMemoryDict, V
 
 def test_validated_memory_dict():
     memory = MemoryDict()
-    prime = 23
-    memory_validator = ValidatedMemoryDict(memory=memory, prime=prime)
+    memory_validator = ValidatedMemoryDict(memory=memory)
 
     def rule_identical_pairs(mem, addr):
         """
@@ -62,7 +61,3 @@ def test_validated_memory_dict():
     # Test validation of existing invalid memory.
     with pytest.raises(AssertionError, match="Expected value in address 4:0 to be 0, got 1."):
         memory_validator.validate_existing_memory()
-
-    # Test insertion of a value bigger than prime.
-    memory_validator[7] = prime + 2
-    assert memory_validator[7] == 2
diff --git a/src/starkware/cairo/lang/vm/virtual_machine_base.py b/src/starkware/cairo/lang/vm/virtual_machine_base.py
index 53fc0ec..c6903a4 100644
--- a/src/starkware/cairo/lang/vm/virtual_machine_base.py
+++ b/src/starkware/cairo/lang/vm/virtual_machine_base.py
@@ -167,7 +167,7 @@ class VirtualMachineBase(ABC):
         self.debug_file_contents: Dict[str, str] = {}
         self.error_message_attributes: List[VmAttributeScope] = []
         self.program = program
-        self.validated_memory = ValidatedMemoryDict(memory=run_context.memory, prime=self.prime)
+        self.validated_memory = ValidatedMemoryDict(memory=run_context.memory)
 
         # If program is a StrippedProgram, there are no hints or debug information to load.
         if isinstance(program, Program):
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/autogenerated.cairo b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/autogenerated.cairo
index b3ffa3f..307deaa 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/autogenerated.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/autogenerated.cairo
@@ -313,31 +313,17 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar cpu__decode__opcode_rc__bit_2 = column0_row2 - (column0_row3 + column0_row3);
     tempvar cpu__decode__opcode_rc__bit_4 = column0_row4 - (column0_row5 + column0_row5);
     tempvar cpu__decode__opcode_rc__bit_3 = column0_row3 - (column0_row4 + column0_row4);
-    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (
-        cpu__decode__opcode_rc__bit_2 +
-        cpu__decode__opcode_rc__bit_4 +
-        cpu__decode__opcode_rc__bit_3
-    );
+    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3);
     tempvar cpu__decode__opcode_rc__bit_5 = column0_row5 - (column0_row6 + column0_row6);
     tempvar cpu__decode__opcode_rc__bit_6 = column0_row6 - (column0_row7 + column0_row7);
     tempvar cpu__decode__opcode_rc__bit_9 = column0_row9 - (column0_row10 + column0_row10);
-    tempvar cpu__decode__flag_res_op1_0 = 1 - (
-        cpu__decode__opcode_rc__bit_5 +
-        cpu__decode__opcode_rc__bit_6 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_7 = column0_row7 - (column0_row8 + column0_row8);
     tempvar cpu__decode__opcode_rc__bit_8 = column0_row8 - (column0_row9 + column0_row9);
-    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_7 +
-        cpu__decode__opcode_rc__bit_8 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_12 = column0_row12 - (column0_row13 + column0_row13);
     tempvar cpu__decode__opcode_rc__bit_13 = column0_row13 - (column0_row14 + column0_row14);
-    tempvar cpu__decode__fp_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13
-    );
+    tempvar cpu__decode__fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13);
     tempvar cpu__decode__opcode_rc__bit_1 = column0_row1 - (column0_row2 + column0_row2);
     tempvar npc_reg_0 = column3_row0 + cpu__decode__opcode_rc__bit_2 + 1;
     tempvar cpu__decode__opcode_rc__bit_10 = column0_row10 - (column0_row11 + column0_row11);
@@ -353,42 +339,21 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size + column5_row60;
     tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size + column5_row76;
     tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size + column5_row92;
-    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size +
-        column5_row108;
-    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size +
-        column5_row124;
+    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size + column5_row108;
+    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size + column5_row124;
     tempvar ecdsa__signature0__doubling_key__x_squared = column6_row6 * column6_row6;
-    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column6_row21 - (
-        column6_row85 + column6_row85
-    );
-    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_generator__bit_0;
-    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column6_row1 - (
-        column6_row33 + column6_row33
-    );
-    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_key__bit_0;
-    tempvar bitwise__sum_var_0_0 = column1_row0 + column1_row2 * 2 + column1_row4 * 4 +
-        column1_row6 * 8 + column1_row8 * 18446744073709551616 + column1_row10 *
-        36893488147419103232 + column1_row12 * 73786976294838206464 + column1_row14 *
-        147573952589676412928;
-    tempvar bitwise__sum_var_8_0 = column1_row16 * 340282366920938463463374607431768211456 +
-        column1_row18 * 680564733841876926926749214863536422912 + column1_row20 *
-        1361129467683753853853498429727072845824 + column1_row22 *
-        2722258935367507707706996859454145691648 + column1_row24 *
-        6277101735386680763835789423207666416102355444464034512896 + column1_row26 *
-        12554203470773361527671578846415332832204710888928069025792 + column1_row28 *
-        25108406941546723055343157692830665664409421777856138051584 + column1_row30 *
-        50216813883093446110686315385661331328818843555712276103168;
+    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column6_row21 - (column6_row85 + column6_row85);
+    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_generator__bit_0;
+    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column6_row1 - (column6_row33 + column6_row33);
+    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_key__bit_0;
+    tempvar bitwise__sum_var_0_0 = column1_row0 + column1_row2 * 2 + column1_row4 * 4 + column1_row6 * 8 + column1_row8 * 18446744073709551616 + column1_row10 * 36893488147419103232 + column1_row12 * 73786976294838206464 + column1_row14 * 147573952589676412928;
+    tempvar bitwise__sum_var_8_0 = column1_row16 * 340282366920938463463374607431768211456 + column1_row18 * 680564733841876926926749214863536422912 + column1_row20 * 1361129467683753853853498429727072845824 + column1_row22 * 2722258935367507707706996859454145691648 + column1_row24 * 6277101735386680763835789423207666416102355444464034512896 + column1_row26 * 12554203470773361527671578846415332832204710888928069025792 + column1_row28 * 25108406941546723055343157692830665664409421777856138051584 + column1_row30 * 50216813883093446110686315385661331328818843555712276103168;
 
     // Sum constraints.
     tempvar total_sum = 0;
 
     // Constraint: cpu/decode/opcode_rc/bit.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 -
-        cpu__decode__opcode_rc__bit_0
-    ) * domain4 / domain0;
+    tempvar value = (cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0) * domain4 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[0] * value;
 
     // Constraint: cpu/decode/opcode_rc/zero.
@@ -396,82 +361,35 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[1] * value;
 
     // Constraint: cpu/decode/opcode_rc_input.
-    tempvar value = (
-        column3_row1 -
-        (
-            (
-                (column0_row0 * global_values.offset_size + column5_row4) *
-                global_values.offset_size +
-                column5_row8
-            ) * global_values.offset_size +
-            column5_row0
-        )
-    ) / domain5;
+    tempvar value = (column3_row1 - (((column0_row0 * global_values.offset_size + column5_row4) * global_values.offset_size + column5_row8) * global_values.offset_size + column5_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[2] * value;
 
     // Constraint: cpu/decode/flag_op1_base_op0_bit.
-    tempvar value = (
-        cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 -
-        cpu__decode__flag_op1_base_op0_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[3] * value;
 
     // Constraint: cpu/decode/flag_res_op1_bit.
-    tempvar value = (
-        cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[4] * value;
 
     // Constraint: cpu/decode/flag_pc_update_regular_bit.
-    tempvar value = (
-        cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 -
-        cpu__decode__flag_pc_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[5] * value;
 
     // Constraint: cpu/decode/fp_update_regular_bit.
-    tempvar value = (
-        cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 -
-        cpu__decode__fp_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[6] * value;
 
     // Constraint: cpu/operands/mem_dst_addr.
-    tempvar value = (
-        column3_row8 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_0 * column6_row8 +
-            (1 - cpu__decode__opcode_rc__bit_0) * column6_row0 +
-            column5_row0
-        )
-    ) / domain5;
+    tempvar value = (column3_row8 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_0 * column6_row8 + (1 - cpu__decode__opcode_rc__bit_0) * column6_row0 + column5_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[7] * value;
 
     // Constraint: cpu/operands/mem0_addr.
-    tempvar value = (
-        column3_row4 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_1 * column6_row8 +
-            (1 - cpu__decode__opcode_rc__bit_1) * column6_row0 +
-            column5_row8
-        )
-    ) / domain5;
+    tempvar value = (column3_row4 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_1 * column6_row8 + (1 - cpu__decode__opcode_rc__bit_1) * column6_row0 + column5_row8)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[8] * value;
 
     // Constraint: cpu/operands/mem1_addr.
-    tempvar value = (
-        column3_row12 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_2 * column3_row0 +
-            cpu__decode__opcode_rc__bit_4 * column6_row0 +
-            cpu__decode__opcode_rc__bit_3 * column6_row8 +
-            cpu__decode__flag_op1_base_op0_0 * column3_row5 +
-            column5_row4
-        )
-    ) / domain5;
+    tempvar value = (column3_row12 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_2 * column3_row0 + cpu__decode__opcode_rc__bit_4 * column6_row0 + cpu__decode__opcode_rc__bit_3 * column6_row8 + cpu__decode__flag_op1_base_op0_0 * column3_row5 + column5_row4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[9] * value;
 
     // Constraint: cpu/operands/ops_mul.
@@ -479,19 +397,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[10] * value;
 
     // Constraint: cpu/operands/res.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column6_row12 -
-        (
-            cpu__decode__opcode_rc__bit_5 * (column3_row5 + column3_row13) +
-            cpu__decode__opcode_rc__bit_6 * column6_row4 +
-            cpu__decode__flag_res_op1_0 * column3_row13
-        )
-    ) / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column6_row12 - (cpu__decode__opcode_rc__bit_5 * (column3_row5 + column3_row13) + cpu__decode__opcode_rc__bit_6 * column6_row4 + cpu__decode__flag_res_op1_0 * column3_row13)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[11] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp0.
-    tempvar value = (column6_row2 - cpu__decode__opcode_rc__bit_9 * column3_row9) * domain22 /
-        domain5;
+    tempvar value = (column6_row2 - cpu__decode__opcode_rc__bit_9 * column3_row9) * domain22 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[12] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp1.
@@ -499,44 +409,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[13] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_negative.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column3_row16 +
-        column6_row2 * (column3_row16 - (column3_row0 + column3_row13)) -
-        (
-            cpu__decode__flag_pc_update_regular_0 * npc_reg_0 +
-            cpu__decode__opcode_rc__bit_7 * column6_row12 +
-            cpu__decode__opcode_rc__bit_8 * (column3_row0 + column6_row12)
-        )
-    ) * domain22 / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column3_row16 + column6_row2 * (column3_row16 - (column3_row0 + column3_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column6_row12 + cpu__decode__opcode_rc__bit_8 * (column3_row0 + column6_row12))) * domain22 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[14] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_positive.
-    tempvar value = (
-        (column6_row10 - cpu__decode__opcode_rc__bit_9) * (column3_row16 - npc_reg_0)
-    ) * domain22 / domain5;
+    tempvar value = ((column6_row10 - cpu__decode__opcode_rc__bit_9) * (column3_row16 - npc_reg_0)) * domain22 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[15] * value;
 
     // Constraint: cpu/update_registers/update_ap/ap_update.
-    tempvar value = (
-        column6_row16 -
-        (
-            column6_row0 +
-            cpu__decode__opcode_rc__bit_10 * column6_row12 +
-            cpu__decode__opcode_rc__bit_11 +
-            cpu__decode__opcode_rc__bit_12 * 2
-        )
-    ) * domain22 / domain5;
+    tempvar value = (column6_row16 - (column6_row0 + cpu__decode__opcode_rc__bit_10 * column6_row12 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2)) * domain22 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[16] * value;
 
     // Constraint: cpu/update_registers/update_fp/fp_update.
-    tempvar value = (
-        column6_row24 -
-        (
-            cpu__decode__fp_update_regular_0 * column6_row8 +
-            cpu__decode__opcode_rc__bit_13 * column3_row9 +
-            cpu__decode__opcode_rc__bit_12 * (column6_row0 + 2)
-        )
-    ) * domain22 / domain5;
+    tempvar value = (column6_row24 - (cpu__decode__fp_update_regular_0 * column6_row8 + cpu__decode__opcode_rc__bit_13 * column3_row9 + cpu__decode__opcode_rc__bit_12 * (column6_row0 + 2))) * domain22 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[17] * value;
 
     // Constraint: cpu/opcodes/call/push_fp.
@@ -544,59 +429,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[18] * value;
 
     // Constraint: cpu/opcodes/call/push_pc.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            column3_row5 - (column3_row0 + cpu__decode__opcode_rc__bit_2 + 1)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column3_row5 - (column3_row0 + cpu__decode__opcode_rc__bit_2 + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[19] * value;
 
     // Constraint: cpu/opcodes/call/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column5_row0 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column5_row0 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[20] * value;
 
     // Constraint: cpu/opcodes/call/off1.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column5_row8 - (global_values.half_offset_size + 1))
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column5_row8 - (global_values.half_offset_size + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[21] * value;
 
     // Constraint: cpu/opcodes/call/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            cpu__decode__opcode_rc__bit_12 +
-            cpu__decode__opcode_rc__bit_12 +
-            1 +
-            1 -
-            (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[22] * value;
 
     // Constraint: cpu/opcodes/ret/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column5_row0 + 2 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column5_row0 + 2 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[23] * value;
 
     // Constraint: cpu/opcodes/ret/off2.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column5_row4 + 1 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column5_row4 + 1 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[24] * value;
 
     // Constraint: cpu/opcodes/ret/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (
-            cpu__decode__opcode_rc__bit_7 +
-            cpu__decode__opcode_rc__bit_0 +
-            cpu__decode__opcode_rc__bit_3 +
-            cpu__decode__flag_res_op1_0 -
-            4
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[25] * value;
 
     // Constraint: cpu/opcodes/assert_eq/assert_eq.
@@ -628,53 +485,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[32] * value;
 
     // Constraint: memory/multi_column_perm/perm/init0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column4_row0 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row1
-            )
-        ) * column9_inter1_row0 +
-        column3_row0 +
-        global_values.memory__multi_column_perm__hash_interaction_elm0 * column3_row1 -
-        global_values.memory__multi_column_perm__perm__interaction_elm
-    ) / domain23;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column4_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row1)) * column9_inter1_row0 + column3_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column3_row1 - global_values.memory__multi_column_perm__perm__interaction_elm) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[33] * value;
 
     // Constraint: memory/multi_column_perm/perm/step0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column4_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row3
-            )
-        ) * column9_inter1_row2 -
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column3_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column3_row3
-            )
-        ) * column9_inter1_row0
-    ) * domain24 / domain1;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column4_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row3)) * column9_inter1_row2 - (global_values.memory__multi_column_perm__perm__interaction_elm - (column3_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column3_row3)) * column9_inter1_row0) * domain24 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[34] * value;
 
     // Constraint: memory/multi_column_perm/perm/last.
-    tempvar value = (
-        column9_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod
-    ) / domain24;
+    tempvar value = (column9_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod) / domain24;
     tempvar total_sum = total_sum + constraint_coefficients[35] * value;
 
     // Constraint: memory/diff_is_bit.
-    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) *
-        domain24 / domain1;
+    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) * domain24 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[36] * value;
 
     // Constraint: memory/is_func.
-    tempvar value = ((memory__address_diff_0 - 1) * (column4_row1 - column4_row3)) * domain24 /
-        domain1;
+    tempvar value = ((memory__address_diff_0 - 1) * (column4_row1 - column4_row3)) * domain24 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[37] * value;
 
     // Constraint: memory/initial_addr.
@@ -690,18 +517,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[40] * value;
 
     // Constraint: rc16/perm/init0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column5_row2) * column9_inter1_row1 +
-        column5_row0 -
-        global_values.rc16__perm__interaction_elm
-    ) / domain23;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column5_row2) * column9_inter1_row1 + column5_row0 - global_values.rc16__perm__interaction_elm) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[41] * value;
 
     // Constraint: rc16/perm/step0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column5_row6) * column9_inter1_row5 -
-        (global_values.rc16__perm__interaction_elm - column5_row4) * column9_inter1_row1
-    ) * domain25 / domain2;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column5_row6) * column9_inter1_row5 - (global_values.rc16__perm__interaction_elm - column5_row4) * column9_inter1_row1) * domain25 / domain2;
     tempvar total_sum = total_sum + constraint_coefficients[42] * value;
 
     // Constraint: rc16/perm/last.
@@ -721,27 +541,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[46] * value;
 
     // Constraint: diluted_check/permutation/init0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column2_row0) *
-        column8_inter1_row0 +
-        column1_row0 -
-        global_values.diluted_check__permutation__interaction_elm
-    ) / domain23;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column2_row0) * column8_inter1_row0 + column1_row0 - global_values.diluted_check__permutation__interaction_elm) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[47] * value;
 
     // Constraint: diluted_check/permutation/step0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column2_row1) *
-        column8_inter1_row1 -
-        (global_values.diluted_check__permutation__interaction_elm - column1_row1) *
-        column8_inter1_row0
-    ) * domain26 / domain0;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column2_row1) * column8_inter1_row1 - (global_values.diluted_check__permutation__interaction_elm - column1_row1) * column8_inter1_row0) * domain26 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[48] * value;
 
     // Constraint: diluted_check/permutation/last.
-    tempvar value = (
-        column8_inter1_row0 - global_values.diluted_check__permutation__public_memory_prod
-    ) / domain26;
+    tempvar value = (column8_inter1_row0 - global_values.diluted_check__permutation__public_memory_prod) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[49] * value;
 
     // Constraint: diluted_check/init.
@@ -753,17 +561,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[51] * value;
 
     // Constraint: diluted_check/step.
-    tempvar value = (
-        column7_inter1_row1 -
-        (
-            column7_inter1_row0 * (
-                1 + global_values.diluted_check__interaction_z * (column2_row1 - column2_row0)
-            ) +
-            global_values.diluted_check__interaction_alpha * (column2_row1 - column2_row0) * (
-                column2_row1 - column2_row0
-            )
-        )
-    ) * domain26 / domain0;
+    tempvar value = (column7_inter1_row1 - (column7_inter1_row0 * (1 + global_values.diluted_check__interaction_z * (column2_row1 - column2_row0)) + global_values.diluted_check__interaction_alpha * (column2_row1 - column2_row0) * (column2_row1 - column2_row0))) * domain26 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[52] * value;
 
     // Constraint: diluted_check/last.
@@ -775,18 +573,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[54] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column6_row45 * (
-            column5_row11 -
-            3138550867693340381917894711603833208051177722232017256448 * column5_row1539
-        )
-    ) / domain11;
+    tempvar value = (column6_row45 * (column5_row11 - 3138550867693340381917894711603833208051177722232017256448 * column5_row1539)) / domain11;
     tempvar total_sum = total_sum + constraint_coefficients[55] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column6_row45 - column5_row2047 * (column5_row1539 - (column5_row1547 + column5_row1547))
-    ) / domain11;
+    tempvar value = (column6_row45 - column5_row2047 * (column5_row1539 - (column5_row1547 + column5_row1547))) / domain11;
     tempvar total_sum = total_sum + constraint_coefficients[56] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -794,26 +585,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[57] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column5_row2047 -
-        (column5_row2011 - (column5_row2019 + column5_row2019)) * (
-            column5_row1571 - (column5_row1579 + column5_row1579)
-        )
-    ) / domain11;
+    tempvar value = (column5_row2047 - (column5_row2011 - (column5_row2019 + column5_row2019)) * (column5_row1571 - (column5_row1579 + column5_row1579))) / domain11;
     tempvar total_sum = total_sum + constraint_coefficients[58] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column5_row2011 - (column5_row2019 + column5_row2019)) * (
-            column5_row1579 - 18014398509481984 * column5_row2011
-        )
-    ) / domain11;
+    tempvar value = ((column5_row2011 - (column5_row2019 + column5_row2019)) * (column5_row1579 - 18014398509481984 * column5_row2011)) / domain11;
     tempvar total_sum = total_sum + constraint_coefficients[59] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)
-    ) * domain12 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[60] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_extraction_end.
@@ -825,36 +605,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[62] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 - global_values.pedersen__points__y) -
-        column5_row7 * (column5_row1 - global_values.pedersen__points__x)
-    ) * domain12 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 - global_values.pedersen__points__y) - column5_row7 * (column5_row1 - global_values.pedersen__points__x)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[63] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column5_row7 * column5_row7 -
-        pedersen__hash0__ec_subset_sum__bit_0 * (
-            column5_row1 + global_values.pedersen__points__x + column5_row9
-        )
-    ) * domain12 / domain3;
+    tempvar value = (column5_row7 * column5_row7 - pedersen__hash0__ec_subset_sum__bit_0 * (column5_row1 + global_values.pedersen__points__x + column5_row9)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[64] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 + column5_row13) -
-        column5_row7 * (column5_row1 - column5_row9)
-    ) * domain12 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 + column5_row13) - column5_row7 * (column5_row1 - column5_row9)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[65] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row9 - column5_row1)) *
-        domain12 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row9 - column5_row1)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[66] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row13 - column5_row5)) *
-        domain12 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row13 - column5_row5)) * domain12 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[67] * value;
 
     // Constraint: pedersen/hash0/copy_point/x.
@@ -914,33 +681,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[81] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/slope.
-    tempvar value = (
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        global_values.ecdsa__sig_config.alpha -
-        (column6_row22 + column6_row22) * column6_row17
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + global_values.ecdsa__sig_config.alpha - (column6_row22 + column6_row22) * column6_row17) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[82] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/x.
-    tempvar value = (
-        column6_row17 * column6_row17 - (column6_row6 + column6_row6 + column6_row38)
-    ) * domain16 / domain6;
+    tempvar value = (column6_row17 * column6_row17 - (column6_row6 + column6_row6 + column6_row38)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[83] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/y.
-    tempvar value = (
-        column6_row22 + column6_row54 - column6_row17 * (column6_row6 - column6_row38)
-    ) * domain16 / domain6;
+    tempvar value = (column6_row22 + column6_row54 - column6_row17 * (column6_row6 - column6_row38)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[84] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            ecdsa__signature0__exponentiate_generator__bit_0 - 1
-        )
-    ) * domain19 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[85] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/bit_extraction_end.
@@ -952,54 +705,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[87] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column6_row37 - global_values.ecdsa__generator_points__y
-        ) -
-        column6_row53 * (column6_row5 - global_values.ecdsa__generator_points__x)
-    ) * domain19 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row37 - global_values.ecdsa__generator_points__y) - column6_row53 * (column6_row5 - global_values.ecdsa__generator_points__x)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[88] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x.
-    tempvar value = (
-        column6_row53 * column6_row53 -
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column6_row5 + global_values.ecdsa__generator_points__x + column6_row69
-        )
-    ) * domain19 / domain7;
+    tempvar value = (column6_row53 * column6_row53 - ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row5 + global_values.ecdsa__generator_points__x + column6_row69)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[89] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row37 + column6_row101) -
-        column6_row53 * (column6_row5 - column6_row69)
-    ) * domain19 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row37 + column6_row101) - column6_row53 * (column6_row5 - column6_row69)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[90] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv.
-    tempvar value = (
-        column6_row13 * (column6_row5 - global_values.ecdsa__generator_points__x) - 1
-    ) * domain19 / domain7;
+    tempvar value = (column6_row13 * (column6_row5 - global_values.ecdsa__generator_points__x) - 1) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[91] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row69 - column6_row5)
-    ) * domain19 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row69 - column6_row5)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[92] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row101 - column6_row37)
-    ) * domain19 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row101 - column6_row37)) * domain19 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[93] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (
-            ecdsa__signature0__exponentiate_key__bit_0 - 1
-        )
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[94] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/bit_extraction_end.
@@ -1011,24 +741,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[96] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 - column6_row22) -
-        column6_row9 * (column6_row14 - column6_row6)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 - column6_row22) - column6_row9 * (column6_row14 - column6_row6)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[97] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x.
-    tempvar value = (
-        column6_row9 * column6_row9 -
-        ecdsa__signature0__exponentiate_key__bit_0 * (column6_row14 + column6_row6 + column6_row46)
-    ) * domain16 / domain6;
+    tempvar value = (column6_row9 * column6_row9 - ecdsa__signature0__exponentiate_key__bit_0 * (column6_row14 + column6_row6 + column6_row46)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[98] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 + column6_row62) -
-        column6_row9 * (column6_row14 - column6_row46)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 + column6_row62) - column6_row9 * (column6_row14 - column6_row46)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[99] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x_diff_inv.
@@ -1036,15 +757,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[100] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row46 - column6_row14)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row46 - column6_row14)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[101] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row62 - column6_row30)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row62 - column6_row30)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[102] * value;
 
     // Constraint: ecdsa/signature0/init_gen/x.
@@ -1064,22 +781,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[106] * value;
 
     // Constraint: ecdsa/signature0/add_results/slope.
-    tempvar value = (
-        column6_row16357 -
-        (column6_row8190 + column6_row16373 * (column6_row16325 - column6_row8174))
-    ) / domain21;
+    tempvar value = (column6_row16357 - (column6_row8190 + column6_row16373 * (column6_row16325 - column6_row8174))) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[107] * value;
 
     // Constraint: ecdsa/signature0/add_results/x.
-    tempvar value = (
-        column6_row16373 * column6_row16373 - (column6_row16325 + column6_row8174 + column6_row8198)
-    ) / domain21;
+    tempvar value = (column6_row16373 * column6_row16373 - (column6_row16325 + column6_row8174 + column6_row8198)) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[108] * value;
 
     // Constraint: ecdsa/signature0/add_results/y.
-    tempvar value = (
-        column6_row16357 + column6_row8214 - column6_row16373 * (column6_row16325 - column6_row8198)
-    ) / domain21;
+    tempvar value = (column6_row16357 + column6_row8214 - column6_row16373 * (column6_row16325 - column6_row8198)) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[109] * value;
 
     // Constraint: ecdsa/signature0/add_results/x_diff_inv.
@@ -1087,24 +797,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[110] * value;
 
     // Constraint: ecdsa/signature0/extract_r/slope.
-    tempvar value = (
-        column6_row16382 +
-        global_values.ecdsa__sig_config.shift_point.y -
-        column6_row8169 * (column6_row16366 - global_values.ecdsa__sig_config.shift_point.x)
-    ) / domain21;
+    tempvar value = (column6_row16382 + global_values.ecdsa__sig_config.shift_point.y - column6_row8169 * (column6_row16366 - global_values.ecdsa__sig_config.shift_point.x)) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[111] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x.
-    tempvar value = (
-        column6_row8169 * column6_row8169 -
-        (column6_row16366 + global_values.ecdsa__sig_config.shift_point.x + column6_row1)
-    ) / domain21;
+    tempvar value = (column6_row8169 * column6_row8169 - (column6_row16366 + global_values.ecdsa__sig_config.shift_point.x + column6_row1)) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[112] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x_diff_inv.
-    tempvar value = (
-        column6_row16361 * (column6_row16366 - global_values.ecdsa__sig_config.shift_point.x) - 1
-    ) / domain21;
+    tempvar value = (column6_row16361 * (column6_row16366 - global_values.ecdsa__sig_config.shift_point.x) - 1) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[113] * value;
 
     // Constraint: ecdsa/signature0/z_nonzero.
@@ -1120,14 +821,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[116] * value;
 
     // Constraint: ecdsa/signature0/q_on_curve/on_curve.
-    tempvar value = (
-        column6_row22 * column6_row22 -
-        (
-            column6_row6 * column6_row16377 +
-            global_values.ecdsa__sig_config.alpha * column6_row6 +
-            global_values.ecdsa__sig_config.beta
-        )
-    ) / domain21;
+    tempvar value = (column6_row22 * column6_row22 - (column6_row6 * column6_row16377 + global_values.ecdsa__sig_config.alpha * column6_row6 + global_values.ecdsa__sig_config.beta)) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[117] * value;
 
     // Constraint: ecdsa/init_addr.
@@ -1175,9 +869,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[128] * value;
 
     // Constraint: bitwise/addition_is_xor_with_and.
-    tempvar value = (
-        column1_row0 + column1_row32 - (column1_row96 + column1_row64 + column1_row64)
-    ) / domain10;
+    tempvar value = (column1_row0 + column1_row32 - (column1_row96 + column1_row64 + column1_row64)) / domain10;
     tempvar total_sum = total_sum + constraint_coefficients[129] * value;
 
     // Constraint: bitwise/unique_unpacking192.
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/composition.cairo b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/composition.cairo
index be43bde..1c45356 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/composition.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/composition.cairo
@@ -76,14 +76,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
     // Periodic columns.
     let (n_steps) = pow(2, public_input.log_n_steps);
     tempvar n_pedersen_hash_copies = n_steps / (
-        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS
-    );
+        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS);
     assert_nn(n_pedersen_hash_copies);
     let (pedersen_point) = pow(point, n_pedersen_hash_copies);
     let (pedersen__points__x) = eval_pedersen_x(pedersen_point);
     let (pedersen__points__y) = eval_pedersen_y(pedersen_point);
 
-    tempvar n_ecdsa_signature_copies = n_steps / (ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
+    tempvar n_ecdsa_signature_copies = n_steps / (
+        ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
     assert_nn(n_ecdsa_signature_copies);
     let (ecdsa_point) = pow(point, n_ecdsa_signature_copies);
     let (ecdsa__generator_points__x) = eval_ecdsa_x(ecdsa_point);
@@ -108,8 +108,7 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         ecdsa__sig_config=EcdsaSigConfig(
             alpha=StarkCurve.ALPHA,
             beta=StarkCurve.BETA,
-            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y),
-        ),
+            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y)),
         pedersen__points__x=pedersen__points__x,
         pedersen__points__y=pedersen__points__y,
         ecdsa__generator_points__x=ecdsa__generator_points__x,
@@ -118,16 +117,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         memory__multi_column_perm__hash_interaction_elm0=memory_alpha,
         rc16__perm__interaction_elm=interaction_elements.rc16__perm__interaction_elm,
         diluted_check__permutation__interaction_elm=(
-            interaction_elements.diluted_check__permutation__interaction_elm
-        ),
+            interaction_elements.diluted_check__permutation__interaction_elm),
         diluted_check__interaction_z=diluted_z,
         diluted_check__interaction_alpha=diluted_alpha,
         memory__multi_column_perm__perm__public_memory_prod=public_memory_prod_ratio,
         rc16__perm__public_memory_prod=1,
         diluted_check__first_elm=0,
         diluted_check__permutation__public_memory_prod=1,
-        diluted_check__final_cum_val=diluted_prod,
-    );
+        diluted_check__final_cum_val=diluted_prod);
 
     return eval_composition_polynomial(
         mask_values=mask_values,
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/public_verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/public_verify.cairo
index 5774008..41b2dfa 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/public_verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/public_verify.cairo
@@ -83,38 +83,33 @@ func public_input_validate{range_check_ptr}(
     // Segments.
     tempvar n_output_uses = (
         public_input.segments[segments.OUTPUT].stop_ptr -
-        public_input.segments[segments.OUTPUT].begin_addr
-    );
+        public_input.segments[segments.OUTPUT].begin_addr);
     assert_nn(n_output_uses);
 
     assert public_input.n_segments = segments.N_SEGMENTS;
     tempvar n_pedersen_copies = n_steps / PEDERSEN_BUILTIN_RATIO;
     tempvar n_pedersen_uses = (
         public_input.segments[segments.PEDERSEN].stop_ptr -
-        public_input.segments[segments.PEDERSEN].begin_addr
-    ) / 3;
+        public_input.segments[segments.PEDERSEN].begin_addr) / 3;
     // Note that the following call implies that n_steps is divisible by PEDERSEN_BUILTIN_RATIO.
     assert_nn_le(n_pedersen_uses, n_pedersen_copies);
 
     tempvar n_range_check_copies = n_steps / RC_BUILTIN_RATIO;
     tempvar n_range_check_uses = (
         public_input.segments[segments.RANGE_CHECK].stop_ptr -
-        public_input.segments[segments.RANGE_CHECK].begin_addr
-    );
+        public_input.segments[segments.RANGE_CHECK].begin_addr);
     assert_nn_le(n_range_check_uses, n_range_check_copies);
 
     tempvar n_ecdsa_copies = n_steps / ECDSA_BUILTIN_RATIO;
     tempvar n_ecdsa_uses = (
         public_input.segments[segments.ECDSA].stop_ptr -
-        public_input.segments[segments.ECDSA].begin_addr
-    ) / 2;
+        public_input.segments[segments.ECDSA].begin_addr) / 2;
     assert_nn_le(n_ecdsa_uses, n_ecdsa_copies);
 
     tempvar n_bitwise_copies = n_steps / BITWISE__RATIO;
     tempvar n_bitwise_uses = (
         public_input.segments[segments.BITWISE].stop_ptr -
-        public_input.segments[segments.BITWISE].begin_addr
-    ) / 5;
+        public_input.segments[segments.BITWISE].begin_addr) / 5;
     assert_nn_le(n_bitwise_uses, n_bitwise_copies);
     return ();
 }
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/verify.cairo
index 7e6d0e3..8a40fc2 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/bitwise/verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/bitwise/verify.cairo
@@ -41,8 +41,7 @@ func build_air() -> (air: AirWithLayout*) {
     );
     let (arg_eval_oods_polynomial) = get_label_location(eval_oods_polynomial);
 
-    tempvar air = new AirWithLayout(
-        air=AirInstance(
+    tempvar air = new AirWithLayout(air=AirInstance(
             public_input_hash=arg_public_input_hash,
             public_input_validate=arg_public_input_validate,
             traces_config_validate=arg_traces_config_validate,
@@ -53,14 +52,14 @@ func build_air() -> (air: AirWithLayout*) {
             n_constraints=N_CONSTRAINTS,
             constraint_degree=CONSTRAINT_DEGREE,
             mask_size=MASK_SIZE,
-        ),
+            ),
         layout=Layout(
             eval_oods_polynomial=arg_eval_oods_polynomial,
             n_original_columns=N_ORIGINAL_COLUMNS,
             n_interaction_columns=N_INTERACTION_COLUMNS,
             n_interaction_elements=InteractionElements.SIZE,
-        ),
-    );
+            ),
+        );
     return (air=air);
 }
 
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/dex/autogenerated.cairo b/src/starkware/cairo/stark_verifier/air/layouts/dex/autogenerated.cairo
index bd6c473..f28387f 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/dex/autogenerated.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/dex/autogenerated.cairo
@@ -296,31 +296,17 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar cpu__decode__opcode_rc__bit_2 = column0_row2 - (column0_row3 + column0_row3);
     tempvar cpu__decode__opcode_rc__bit_4 = column0_row4 - (column0_row5 + column0_row5);
     tempvar cpu__decode__opcode_rc__bit_3 = column0_row3 - (column0_row4 + column0_row4);
-    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (
-        cpu__decode__opcode_rc__bit_2 +
-        cpu__decode__opcode_rc__bit_4 +
-        cpu__decode__opcode_rc__bit_3
-    );
+    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3);
     tempvar cpu__decode__opcode_rc__bit_5 = column0_row5 - (column0_row6 + column0_row6);
     tempvar cpu__decode__opcode_rc__bit_6 = column0_row6 - (column0_row7 + column0_row7);
     tempvar cpu__decode__opcode_rc__bit_9 = column0_row9 - (column0_row10 + column0_row10);
-    tempvar cpu__decode__flag_res_op1_0 = 1 - (
-        cpu__decode__opcode_rc__bit_5 +
-        cpu__decode__opcode_rc__bit_6 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_7 = column0_row7 - (column0_row8 + column0_row8);
     tempvar cpu__decode__opcode_rc__bit_8 = column0_row8 - (column0_row9 + column0_row9);
-    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_7 +
-        cpu__decode__opcode_rc__bit_8 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_12 = column0_row12 - (column0_row13 + column0_row13);
     tempvar cpu__decode__opcode_rc__bit_13 = column0_row13 - (column0_row14 + column0_row14);
-    tempvar cpu__decode__fp_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13
-    );
+    tempvar cpu__decode__fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13);
     tempvar cpu__decode__opcode_rc__bit_1 = column0_row1 - (column0_row2 + column0_row2);
     tempvar npc_reg_0 = column17_row0 + cpu__decode__opcode_rc__bit_2 + 1;
     tempvar cpu__decode__opcode_rc__bit_10 = column0_row10 - (column0_row11 + column0_row11);
@@ -337,40 +323,24 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar pedersen__hash3__ec_subset_sum__bit_0 = column12_row0 - (column12_row1 + column12_row1);
     tempvar pedersen__hash3__ec_subset_sum__bit_neg_0 = 1 - pedersen__hash3__ec_subset_sum__bit_0;
     tempvar rc_builtin__value0_0 = column19_row12;
-    tempvar rc_builtin__value1_0 = rc_builtin__value0_0 * global_values.offset_size +
-        column19_row28;
-    tempvar rc_builtin__value2_0 = rc_builtin__value1_0 * global_values.offset_size +
-        column19_row44;
-    tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size +
-        column19_row60;
-    tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size +
-        column19_row76;
-    tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size +
-        column19_row92;
-    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size +
-        column19_row108;
-    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size +
-        column19_row124;
+    tempvar rc_builtin__value1_0 = rc_builtin__value0_0 * global_values.offset_size + column19_row28;
+    tempvar rc_builtin__value2_0 = rc_builtin__value1_0 * global_values.offset_size + column19_row44;
+    tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size + column19_row60;
+    tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size + column19_row76;
+    tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size + column19_row92;
+    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size + column19_row108;
+    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size + column19_row124;
     tempvar ecdsa__signature0__doubling_key__x_squared = column19_row7 * column19_row7;
-    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column20_row14 - (
-        column20_row46 + column20_row46
-    );
-    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_generator__bit_0;
-    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column20_row4 - (
-        column20_row20 + column20_row20
-    );
-    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_key__bit_0;
+    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column20_row14 - (column20_row46 + column20_row46);
+    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_generator__bit_0;
+    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column20_row4 - (column20_row20 + column20_row20);
+    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_key__bit_0;
 
     // Sum constraints.
     tempvar total_sum = 0;
 
     // Constraint: cpu/decode/opcode_rc/bit.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 -
-        cpu__decode__opcode_rc__bit_0
-    ) * domain4 / domain0;
+    tempvar value = (cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0) * domain4 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[0] * value;
 
     // Constraint: cpu/decode/opcode_rc/zero.
@@ -378,82 +348,35 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[1] * value;
 
     // Constraint: cpu/decode/opcode_rc_input.
-    tempvar value = (
-        column17_row1 -
-        (
-            (
-                (column0_row0 * global_values.offset_size + column19_row4) *
-                global_values.offset_size +
-                column19_row8
-            ) * global_values.offset_size +
-            column19_row0
-        )
-    ) / domain5;
+    tempvar value = (column17_row1 - (((column0_row0 * global_values.offset_size + column19_row4) * global_values.offset_size + column19_row8) * global_values.offset_size + column19_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[2] * value;
 
     // Constraint: cpu/decode/flag_op1_base_op0_bit.
-    tempvar value = (
-        cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 -
-        cpu__decode__flag_op1_base_op0_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[3] * value;
 
     // Constraint: cpu/decode/flag_res_op1_bit.
-    tempvar value = (
-        cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[4] * value;
 
     // Constraint: cpu/decode/flag_pc_update_regular_bit.
-    tempvar value = (
-        cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 -
-        cpu__decode__flag_pc_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[5] * value;
 
     // Constraint: cpu/decode/fp_update_regular_bit.
-    tempvar value = (
-        cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 -
-        cpu__decode__fp_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[6] * value;
 
     // Constraint: cpu/operands/mem_dst_addr.
-    tempvar value = (
-        column17_row8 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_0 * column19_row9 +
-            (1 - cpu__decode__opcode_rc__bit_0) * column19_row1 +
-            column19_row0
-        )
-    ) / domain5;
+    tempvar value = (column17_row8 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_0 * column19_row9 + (1 - cpu__decode__opcode_rc__bit_0) * column19_row1 + column19_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[7] * value;
 
     // Constraint: cpu/operands/mem0_addr.
-    tempvar value = (
-        column17_row4 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_1 * column19_row9 +
-            (1 - cpu__decode__opcode_rc__bit_1) * column19_row1 +
-            column19_row8
-        )
-    ) / domain5;
+    tempvar value = (column17_row4 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_1 * column19_row9 + (1 - cpu__decode__opcode_rc__bit_1) * column19_row1 + column19_row8)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[8] * value;
 
     // Constraint: cpu/operands/mem1_addr.
-    tempvar value = (
-        column17_row12 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_2 * column17_row0 +
-            cpu__decode__opcode_rc__bit_4 * column19_row1 +
-            cpu__decode__opcode_rc__bit_3 * column19_row9 +
-            cpu__decode__flag_op1_base_op0_0 * column17_row5 +
-            column19_row4
-        )
-    ) / domain5;
+    tempvar value = (column17_row12 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_2 * column17_row0 + cpu__decode__opcode_rc__bit_4 * column19_row1 + cpu__decode__opcode_rc__bit_3 * column19_row9 + cpu__decode__flag_op1_base_op0_0 * column17_row5 + column19_row4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[9] * value;
 
     // Constraint: cpu/operands/ops_mul.
@@ -461,19 +384,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[10] * value;
 
     // Constraint: cpu/operands/res.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column19_row13 -
-        (
-            cpu__decode__opcode_rc__bit_5 * (column17_row5 + column17_row13) +
-            cpu__decode__opcode_rc__bit_6 * column19_row5 +
-            cpu__decode__flag_res_op1_0 * column17_row13
-        )
-    ) / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column19_row13 - (cpu__decode__opcode_rc__bit_5 * (column17_row5 + column17_row13) + cpu__decode__opcode_rc__bit_6 * column19_row5 + cpu__decode__flag_res_op1_0 * column17_row13)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[11] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp0.
-    tempvar value = (column19_row3 - cpu__decode__opcode_rc__bit_9 * column17_row9) * domain19 /
-        domain5;
+    tempvar value = (column19_row3 - cpu__decode__opcode_rc__bit_9 * column17_row9) * domain19 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[12] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp1.
@@ -481,44 +396,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[13] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_negative.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column17_row16 +
-        column19_row3 * (column17_row16 - (column17_row0 + column17_row13)) -
-        (
-            cpu__decode__flag_pc_update_regular_0 * npc_reg_0 +
-            cpu__decode__opcode_rc__bit_7 * column19_row13 +
-            cpu__decode__opcode_rc__bit_8 * (column17_row0 + column19_row13)
-        )
-    ) * domain19 / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column17_row16 + column19_row3 * (column17_row16 - (column17_row0 + column17_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column19_row13 + cpu__decode__opcode_rc__bit_8 * (column17_row0 + column19_row13))) * domain19 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[14] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_positive.
-    tempvar value = (
-        (column19_row11 - cpu__decode__opcode_rc__bit_9) * (column17_row16 - npc_reg_0)
-    ) * domain19 / domain5;
+    tempvar value = ((column19_row11 - cpu__decode__opcode_rc__bit_9) * (column17_row16 - npc_reg_0)) * domain19 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[15] * value;
 
     // Constraint: cpu/update_registers/update_ap/ap_update.
-    tempvar value = (
-        column19_row17 -
-        (
-            column19_row1 +
-            cpu__decode__opcode_rc__bit_10 * column19_row13 +
-            cpu__decode__opcode_rc__bit_11 +
-            cpu__decode__opcode_rc__bit_12 * 2
-        )
-    ) * domain19 / domain5;
+    tempvar value = (column19_row17 - (column19_row1 + cpu__decode__opcode_rc__bit_10 * column19_row13 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2)) * domain19 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[16] * value;
 
     // Constraint: cpu/update_registers/update_fp/fp_update.
-    tempvar value = (
-        column19_row25 -
-        (
-            cpu__decode__fp_update_regular_0 * column19_row9 +
-            cpu__decode__opcode_rc__bit_13 * column17_row9 +
-            cpu__decode__opcode_rc__bit_12 * (column19_row1 + 2)
-        )
-    ) * domain19 / domain5;
+    tempvar value = (column19_row25 - (cpu__decode__fp_update_regular_0 * column19_row9 + cpu__decode__opcode_rc__bit_13 * column17_row9 + cpu__decode__opcode_rc__bit_12 * (column19_row1 + 2))) * domain19 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[17] * value;
 
     // Constraint: cpu/opcodes/call/push_fp.
@@ -526,59 +416,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[18] * value;
 
     // Constraint: cpu/opcodes/call/push_pc.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            column17_row5 - (column17_row0 + cpu__decode__opcode_rc__bit_2 + 1)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column17_row5 - (column17_row0 + cpu__decode__opcode_rc__bit_2 + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[19] * value;
 
     // Constraint: cpu/opcodes/call/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column19_row0 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column19_row0 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[20] * value;
 
     // Constraint: cpu/opcodes/call/off1.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column19_row8 - (global_values.half_offset_size + 1))
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column19_row8 - (global_values.half_offset_size + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[21] * value;
 
     // Constraint: cpu/opcodes/call/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            cpu__decode__opcode_rc__bit_12 +
-            cpu__decode__opcode_rc__bit_12 +
-            1 +
-            1 -
-            (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[22] * value;
 
     // Constraint: cpu/opcodes/ret/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column19_row0 + 2 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column19_row0 + 2 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[23] * value;
 
     // Constraint: cpu/opcodes/ret/off2.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column19_row4 + 1 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column19_row4 + 1 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[24] * value;
 
     // Constraint: cpu/opcodes/ret/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (
-            cpu__decode__opcode_rc__bit_7 +
-            cpu__decode__opcode_rc__bit_0 +
-            cpu__decode__opcode_rc__bit_3 +
-            cpu__decode__flag_res_op1_0 -
-            4
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[25] * value;
 
     // Constraint: cpu/opcodes/assert_eq/assert_eq.
@@ -610,53 +472,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[32] * value;
 
     // Constraint: memory/multi_column_perm/perm/init0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column18_row0 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column18_row1
-            )
-        ) * column21_inter1_row0 +
-        column17_row0 +
-        global_values.memory__multi_column_perm__hash_interaction_elm0 * column17_row1 -
-        global_values.memory__multi_column_perm__perm__interaction_elm
-    ) / domain20;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column18_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column18_row1)) * column21_inter1_row0 + column17_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column17_row1 - global_values.memory__multi_column_perm__perm__interaction_elm) / domain20;
     tempvar total_sum = total_sum + constraint_coefficients[33] * value;
 
     // Constraint: memory/multi_column_perm/perm/step0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column18_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column18_row3
-            )
-        ) * column21_inter1_row2 -
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column17_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column17_row3
-            )
-        ) * column21_inter1_row0
-    ) * domain21 / domain1;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column18_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column18_row3)) * column21_inter1_row2 - (global_values.memory__multi_column_perm__perm__interaction_elm - (column17_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column17_row3)) * column21_inter1_row0) * domain21 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[34] * value;
 
     // Constraint: memory/multi_column_perm/perm/last.
-    tempvar value = (
-        column21_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod
-    ) / domain21;
+    tempvar value = (column21_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod) / domain21;
     tempvar total_sum = total_sum + constraint_coefficients[35] * value;
 
     // Constraint: memory/diff_is_bit.
-    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) *
-        domain21 / domain1;
+    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) * domain21 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[36] * value;
 
     // Constraint: memory/is_func.
-    tempvar value = ((memory__address_diff_0 - 1) * (column18_row1 - column18_row3)) * domain21 /
-        domain1;
+    tempvar value = ((memory__address_diff_0 - 1) * (column18_row1 - column18_row3)) * domain21 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[37] * value;
 
     // Constraint: memory/initial_addr.
@@ -672,23 +504,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[40] * value;
 
     // Constraint: rc16/perm/init0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column19_row2) * column21_inter1_row1 +
-        column19_row0 -
-        global_values.rc16__perm__interaction_elm
-    ) / domain20;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column19_row2) * column21_inter1_row1 + column19_row0 - global_values.rc16__perm__interaction_elm) / domain20;
     tempvar total_sum = total_sum + constraint_coefficients[41] * value;
 
     // Constraint: rc16/perm/step0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column19_row6) * column21_inter1_row5 -
-        (global_values.rc16__perm__interaction_elm - column19_row4) * column21_inter1_row1
-    ) * domain22 / domain2;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column19_row6) * column21_inter1_row5 - (global_values.rc16__perm__interaction_elm - column19_row4) * column21_inter1_row1) * domain22 / domain2;
     tempvar total_sum = total_sum + constraint_coefficients[42] * value;
 
     // Constraint: rc16/perm/last.
-    tempvar value = (column21_inter1_row1 - global_values.rc16__perm__public_memory_prod) /
-        domain22;
+    tempvar value = (column21_inter1_row1 - global_values.rc16__perm__public_memory_prod) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[43] * value;
 
     // Constraint: rc16/diff_is_bit.
@@ -708,18 +532,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[47] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column14_row255 * (
-            column3_row1 -
-            3138550867693340381917894711603833208051177722232017256448 * column3_row192
-        )
-    ) / domain8;
+    tempvar value = (column14_row255 * (column3_row1 - 3138550867693340381917894711603833208051177722232017256448 * column3_row192)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[48] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column14_row255 - column13_row255 * (column3_row192 - (column3_row193 + column3_row193))
-    ) / domain8;
+    tempvar value = (column14_row255 - column13_row255 * (column3_row192 - (column3_row193 + column3_row193))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[49] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -727,26 +544,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[50] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column13_row255 -
-        (column3_row251 - (column3_row252 + column3_row252)) * (
-            column3_row196 - (column3_row197 + column3_row197)
-        )
-    ) / domain8;
+    tempvar value = (column13_row255 - (column3_row251 - (column3_row252 + column3_row252)) * (column3_row196 - (column3_row197 + column3_row197))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[51] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column3_row251 - (column3_row252 + column3_row252)) * (
-            column3_row197 - 18014398509481984 * column3_row251
-        )
-    ) / domain8;
+    tempvar value = ((column3_row251 - (column3_row252 + column3_row252)) * (column3_row197 - 18014398509481984 * column3_row251)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[52] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[53] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_extraction_end.
@@ -758,36 +564,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[55] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - global_values.pedersen__points__y) -
-        column13_row0 * (column1_row0 - global_values.pedersen__points__x)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - global_values.pedersen__points__y) - column13_row0 * (column1_row0 - global_values.pedersen__points__x)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[56] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column13_row0 * column13_row0 -
-        pedersen__hash0__ec_subset_sum__bit_0 * (
-            column1_row0 + global_values.pedersen__points__x + column1_row1
-        )
-    ) * domain9 / domain0;
+    tempvar value = (column13_row0 * column13_row0 - pedersen__hash0__ec_subset_sum__bit_0 * (column1_row0 + global_values.pedersen__points__x + column1_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[57] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) -
-        column13_row0 * (column1_row0 - column1_row1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) - column13_row0 * (column1_row0 - column1_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[58] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[59] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[60] * value;
 
     // Constraint: pedersen/hash0/copy_point/x.
@@ -811,18 +604,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[65] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column16_row255 * (
-            column6_row1 -
-            3138550867693340381917894711603833208051177722232017256448 * column6_row192
-        )
-    ) / domain8;
+    tempvar value = (column16_row255 * (column6_row1 - 3138550867693340381917894711603833208051177722232017256448 * column6_row192)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[66] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column16_row255 - column15_row255 * (column6_row192 - (column6_row193 + column6_row193))
-    ) / domain8;
+    tempvar value = (column16_row255 - column15_row255 * (column6_row192 - (column6_row193 + column6_row193))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[67] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -830,26 +616,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[68] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column15_row255 -
-        (column6_row251 - (column6_row252 + column6_row252)) * (
-            column6_row196 - (column6_row197 + column6_row197)
-        )
-    ) / domain8;
+    tempvar value = (column15_row255 - (column6_row251 - (column6_row252 + column6_row252)) * (column6_row196 - (column6_row197 + column6_row197))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[69] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column6_row251 - (column6_row252 + column6_row252)) * (
-            column6_row197 - 18014398509481984 * column6_row251
-        )
-    ) / domain8;
+    tempvar value = ((column6_row251 - (column6_row252 + column6_row252)) * (column6_row197 - 18014398509481984 * column6_row251)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[70] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash1__ec_subset_sum__bit_0 * (pedersen__hash1__ec_subset_sum__bit_0 - 1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash1__ec_subset_sum__bit_0 * (pedersen__hash1__ec_subset_sum__bit_0 - 1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[71] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/bit_extraction_end.
@@ -861,36 +636,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[73] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash1__ec_subset_sum__bit_0 * (column5_row0 - global_values.pedersen__points__y) -
-        column14_row0 * (column4_row0 - global_values.pedersen__points__x)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash1__ec_subset_sum__bit_0 * (column5_row0 - global_values.pedersen__points__y) - column14_row0 * (column4_row0 - global_values.pedersen__points__x)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[74] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column14_row0 * column14_row0 -
-        pedersen__hash1__ec_subset_sum__bit_0 * (
-            column4_row0 + global_values.pedersen__points__x + column4_row1
-        )
-    ) * domain9 / domain0;
+    tempvar value = (column14_row0 * column14_row0 - pedersen__hash1__ec_subset_sum__bit_0 * (column4_row0 + global_values.pedersen__points__x + column4_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[75] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash1__ec_subset_sum__bit_0 * (column5_row0 + column5_row1) -
-        column14_row0 * (column4_row0 - column4_row1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash1__ec_subset_sum__bit_0 * (column5_row0 + column5_row1) - column14_row0 * (column4_row0 - column4_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[76] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash1__ec_subset_sum__bit_neg_0 * (column4_row1 - column4_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash1__ec_subset_sum__bit_neg_0 * (column4_row1 - column4_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[77] * value;
 
     // Constraint: pedersen/hash1/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash1__ec_subset_sum__bit_neg_0 * (column5_row1 - column5_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash1__ec_subset_sum__bit_neg_0 * (column5_row1 - column5_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[78] * value;
 
     // Constraint: pedersen/hash1/copy_point/x.
@@ -914,18 +676,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[83] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column20_row145 * (
-            column9_row1 -
-            3138550867693340381917894711603833208051177722232017256448 * column9_row192
-        )
-    ) / domain8;
+    tempvar value = (column20_row145 * (column9_row1 - 3138550867693340381917894711603833208051177722232017256448 * column9_row192)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[84] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column20_row145 - column20_row17 * (column9_row192 - (column9_row193 + column9_row193))
-    ) / domain8;
+    tempvar value = (column20_row145 - column20_row17 * (column9_row192 - (column9_row193 + column9_row193))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[85] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -933,26 +688,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[86] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column20_row17 -
-        (column9_row251 - (column9_row252 + column9_row252)) * (
-            column9_row196 - (column9_row197 + column9_row197)
-        )
-    ) / domain8;
+    tempvar value = (column20_row17 - (column9_row251 - (column9_row252 + column9_row252)) * (column9_row196 - (column9_row197 + column9_row197))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[87] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column9_row251 - (column9_row252 + column9_row252)) * (
-            column9_row197 - 18014398509481984 * column9_row251
-        )
-    ) / domain8;
+    tempvar value = ((column9_row251 - (column9_row252 + column9_row252)) * (column9_row197 - 18014398509481984 * column9_row251)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[88] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash2__ec_subset_sum__bit_0 * (pedersen__hash2__ec_subset_sum__bit_0 - 1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash2__ec_subset_sum__bit_0 * (pedersen__hash2__ec_subset_sum__bit_0 - 1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[89] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/bit_extraction_end.
@@ -964,36 +708,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[91] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash2__ec_subset_sum__bit_0 * (column8_row0 - global_values.pedersen__points__y) -
-        column15_row0 * (column7_row0 - global_values.pedersen__points__x)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash2__ec_subset_sum__bit_0 * (column8_row0 - global_values.pedersen__points__y) - column15_row0 * (column7_row0 - global_values.pedersen__points__x)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[92] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column15_row0 * column15_row0 -
-        pedersen__hash2__ec_subset_sum__bit_0 * (
-            column7_row0 + global_values.pedersen__points__x + column7_row1
-        )
-    ) * domain9 / domain0;
+    tempvar value = (column15_row0 * column15_row0 - pedersen__hash2__ec_subset_sum__bit_0 * (column7_row0 + global_values.pedersen__points__x + column7_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[93] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash2__ec_subset_sum__bit_0 * (column8_row0 + column8_row1) -
-        column15_row0 * (column7_row0 - column7_row1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash2__ec_subset_sum__bit_0 * (column8_row0 + column8_row1) - column15_row0 * (column7_row0 - column7_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[94] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash2__ec_subset_sum__bit_neg_0 * (column7_row1 - column7_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash2__ec_subset_sum__bit_neg_0 * (column7_row1 - column7_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[95] * value;
 
     // Constraint: pedersen/hash2/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash2__ec_subset_sum__bit_neg_0 * (column8_row1 - column8_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash2__ec_subset_sum__bit_neg_0 * (column8_row1 - column8_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[96] * value;
 
     // Constraint: pedersen/hash2/copy_point/x.
@@ -1017,18 +748,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[101] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column20_row209 * (
-            column12_row1 -
-            3138550867693340381917894711603833208051177722232017256448 * column12_row192
-        )
-    ) / domain8;
+    tempvar value = (column20_row209 * (column12_row1 - 3138550867693340381917894711603833208051177722232017256448 * column12_row192)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[102] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column20_row209 - column20_row81 * (column12_row192 - (column12_row193 + column12_row193))
-    ) / domain8;
+    tempvar value = (column20_row209 - column20_row81 * (column12_row192 - (column12_row193 + column12_row193))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[103] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -1036,26 +760,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[104] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column20_row81 -
-        (column12_row251 - (column12_row252 + column12_row252)) * (
-            column12_row196 - (column12_row197 + column12_row197)
-        )
-    ) / domain8;
+    tempvar value = (column20_row81 - (column12_row251 - (column12_row252 + column12_row252)) * (column12_row196 - (column12_row197 + column12_row197))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[105] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column12_row251 - (column12_row252 + column12_row252)) * (
-            column12_row197 - 18014398509481984 * column12_row251
-        )
-    ) / domain8;
+    tempvar value = ((column12_row251 - (column12_row252 + column12_row252)) * (column12_row197 - 18014398509481984 * column12_row251)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[106] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash3__ec_subset_sum__bit_0 * (pedersen__hash3__ec_subset_sum__bit_0 - 1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash3__ec_subset_sum__bit_0 * (pedersen__hash3__ec_subset_sum__bit_0 - 1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[107] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/bit_extraction_end.
@@ -1067,38 +780,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[109] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash3__ec_subset_sum__bit_0 * (
-            column11_row0 - global_values.pedersen__points__y
-        ) -
-        column16_row0 * (column10_row0 - global_values.pedersen__points__x)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash3__ec_subset_sum__bit_0 * (column11_row0 - global_values.pedersen__points__y) - column16_row0 * (column10_row0 - global_values.pedersen__points__x)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[110] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column16_row0 * column16_row0 -
-        pedersen__hash3__ec_subset_sum__bit_0 * (
-            column10_row0 + global_values.pedersen__points__x + column10_row1
-        )
-    ) * domain9 / domain0;
+    tempvar value = (column16_row0 * column16_row0 - pedersen__hash3__ec_subset_sum__bit_0 * (column10_row0 + global_values.pedersen__points__x + column10_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[111] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash3__ec_subset_sum__bit_0 * (column11_row0 + column11_row1) -
-        column16_row0 * (column10_row0 - column10_row1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash3__ec_subset_sum__bit_0 * (column11_row0 + column11_row1) - column16_row0 * (column10_row0 - column10_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[112] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash3__ec_subset_sum__bit_neg_0 * (column10_row1 - column10_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash3__ec_subset_sum__bit_neg_0 * (column10_row1 - column10_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[113] * value;
 
     // Constraint: pedersen/hash3/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash3__ec_subset_sum__bit_neg_0 * (column11_row1 - column11_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash3__ec_subset_sum__bit_neg_0 * (column11_row1 - column11_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[114] * value;
 
     // Constraint: pedersen/hash3/copy_point/x.
@@ -1194,33 +892,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[137] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/slope.
-    tempvar value = (
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        global_values.ecdsa__sig_config.alpha -
-        (column19_row15 + column19_row15) * column20_row12
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + global_values.ecdsa__sig_config.alpha - (column19_row15 + column19_row15) * column20_row12) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[138] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/x.
-    tempvar value = (
-        column20_row12 * column20_row12 - (column19_row7 + column19_row7 + column19_row23)
-    ) * domain13 / domain5;
+    tempvar value = (column20_row12 * column20_row12 - (column19_row7 + column19_row7 + column19_row23)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[139] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/y.
-    tempvar value = (
-        column19_row15 + column19_row31 - column20_row12 * (column19_row7 - column19_row23)
-    ) * domain13 / domain5;
+    tempvar value = (column19_row15 + column19_row31 - column20_row12 * (column19_row7 - column19_row23)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[140] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            ecdsa__signature0__exponentiate_generator__bit_0 - 1
-        )
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[141] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/bit_extraction_end.
@@ -1232,54 +916,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[143] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column20_row22 - global_values.ecdsa__generator_points__y
-        ) -
-        column20_row30 * (column20_row6 - global_values.ecdsa__generator_points__x)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column20_row22 - global_values.ecdsa__generator_points__y) - column20_row30 * (column20_row6 - global_values.ecdsa__generator_points__x)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[144] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x.
-    tempvar value = (
-        column20_row30 * column20_row30 -
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column20_row6 + global_values.ecdsa__generator_points__x + column20_row38
-        )
-    ) * domain16 / domain6;
+    tempvar value = (column20_row30 * column20_row30 - ecdsa__signature0__exponentiate_generator__bit_0 * (column20_row6 + global_values.ecdsa__generator_points__x + column20_row38)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[145] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (column20_row22 + column20_row54) -
-        column20_row30 * (column20_row6 - column20_row38)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column20_row22 + column20_row54) - column20_row30 * (column20_row6 - column20_row38)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[146] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv.
-    tempvar value = (
-        column20_row1 * (column20_row6 - global_values.ecdsa__generator_points__x) - 1
-    ) * domain16 / domain6;
+    tempvar value = (column20_row1 * (column20_row6 - global_values.ecdsa__generator_points__x) - 1) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[147] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column20_row38 - column20_row6)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column20_row38 - column20_row6)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[148] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column20_row54 - column20_row22)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column20_row54 - column20_row22)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[149] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (
-            ecdsa__signature0__exponentiate_key__bit_0 - 1
-        )
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[150] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/bit_extraction_end.
@@ -1291,26 +952,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[152] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column20_row8 - column19_row15) -
-        column20_row2 * (column20_row0 - column19_row7)
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column20_row8 - column19_row15) - column20_row2 * (column20_row0 - column19_row7)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[153] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x.
-    tempvar value = (
-        column20_row2 * column20_row2 -
-        ecdsa__signature0__exponentiate_key__bit_0 * (
-            column20_row0 + column19_row7 + column20_row16
-        )
-    ) * domain13 / domain5;
+    tempvar value = (column20_row2 * column20_row2 - ecdsa__signature0__exponentiate_key__bit_0 * (column20_row0 + column19_row7 + column20_row16)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[154] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column20_row8 + column20_row24) -
-        column20_row2 * (column20_row0 - column20_row16)
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column20_row8 + column20_row24) - column20_row2 * (column20_row0 - column20_row16)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[155] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x_diff_inv.
@@ -1318,15 +968,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[156] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column20_row16 - column20_row0)
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column20_row16 - column20_row0)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[157] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column20_row24 - column20_row8)
-    ) * domain13 / domain5;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column20_row24 - column20_row8)) * domain13 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[158] * value;
 
     // Constraint: ecdsa/signature0/init_gen/x.
@@ -1346,25 +992,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[162] * value;
 
     // Constraint: ecdsa/signature0/add_results/slope.
-    tempvar value = (
-        column20_row8182 -
-        (column20_row4088 + column20_row8190 * (column20_row8166 - column20_row4080))
-    ) / domain18;
+    tempvar value = (column20_row8182 - (column20_row4088 + column20_row8190 * (column20_row8166 - column20_row4080))) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[163] * value;
 
     // Constraint: ecdsa/signature0/add_results/x.
-    tempvar value = (
-        column20_row8190 * column20_row8190 -
-        (column20_row8166 + column20_row4080 + column19_row4103)
-    ) / domain18;
+    tempvar value = (column20_row8190 * column20_row8190 - (column20_row8166 + column20_row4080 + column19_row4103)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[164] * value;
 
     // Constraint: ecdsa/signature0/add_results/y.
-    tempvar value = (
-        column20_row8182 +
-        column19_row4111 -
-        column20_row8190 * (column20_row8166 - column19_row4103)
-    ) / domain18;
+    tempvar value = (column20_row8182 + column19_row4111 - column20_row8190 * (column20_row8166 - column19_row4103)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[165] * value;
 
     // Constraint: ecdsa/signature0/add_results/x_diff_inv.
@@ -1372,24 +1008,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[166] * value;
 
     // Constraint: ecdsa/signature0/extract_r/slope.
-    tempvar value = (
-        column20_row8184 +
-        global_values.ecdsa__sig_config.shift_point.y -
-        column20_row4082 * (column20_row8176 - global_values.ecdsa__sig_config.shift_point.x)
-    ) / domain18;
+    tempvar value = (column20_row8184 + global_values.ecdsa__sig_config.shift_point.y - column20_row4082 * (column20_row8176 - global_values.ecdsa__sig_config.shift_point.x)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[167] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x.
-    tempvar value = (
-        column20_row4082 * column20_row4082 -
-        (column20_row8176 + global_values.ecdsa__sig_config.shift_point.x + column20_row4)
-    ) / domain18;
+    tempvar value = (column20_row4082 * column20_row4082 - (column20_row8176 + global_values.ecdsa__sig_config.shift_point.x + column20_row4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[168] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x_diff_inv.
-    tempvar value = (
-        column20_row8178 * (column20_row8176 - global_values.ecdsa__sig_config.shift_point.x) - 1
-    ) / domain18;
+    tempvar value = (column20_row8178 * (column20_row8176 - global_values.ecdsa__sig_config.shift_point.x) - 1) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[169] * value;
 
     // Constraint: ecdsa/signature0/z_nonzero.
@@ -1405,14 +1032,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[172] * value;
 
     // Constraint: ecdsa/signature0/q_on_curve/on_curve.
-    tempvar value = (
-        column19_row15 * column19_row15 -
-        (
-            column19_row7 * column20_row8186 +
-            global_values.ecdsa__sig_config.alpha * column19_row7 +
-            global_values.ecdsa__sig_config.beta
-        )
-    ) / domain18;
+    tempvar value = (column19_row15 * column19_row15 - (column19_row7 * column20_row8186 + global_values.ecdsa__sig_config.alpha * column19_row7 + global_values.ecdsa__sig_config.beta)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[173] * value;
 
     // Constraint: ecdsa/init_addr.
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/dex/composition.cairo b/src/starkware/cairo/stark_verifier/air/layouts/dex/composition.cairo
index 2f8aba1..30dae06 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/dex/composition.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/dex/composition.cairo
@@ -49,8 +49,7 @@ func traces_eval_composition_polynomial{range_check_ptr}(
     alloc_locals;
 
     tempvar interaction_elements: InteractionElements* = cast(
-        commitment.interaction_elements, InteractionElements*
-    );
+        commitment.interaction_elements, InteractionElements*);
     tempvar public_input = commitment.public_input;
     let (__fp__, _) = get_fp_and_pc();
 
@@ -69,14 +68,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
     // Periodic columns.
     let (n_steps) = pow(2, public_input.log_n_steps);
     tempvar n_pedersen_hash_copies = n_steps / (
-        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS
-    );
+        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS);
     assert_nn(n_pedersen_hash_copies);
     let (pedersen_point) = pow(point, n_pedersen_hash_copies);
     let (pedersen__points__x) = eval_pedersen_x(pedersen_point);
     let (pedersen__points__y) = eval_pedersen_y(pedersen_point);
 
-    tempvar n_ecdsa_signature_copies = n_steps / (ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
+    tempvar n_ecdsa_signature_copies = n_steps / (
+        ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
     assert_nn(n_ecdsa_signature_copies);
     let (ecdsa_point) = pow(point, n_ecdsa_signature_copies);
     let (ecdsa__generator_points__x) = eval_ecdsa_x(ecdsa_point);
@@ -100,8 +99,7 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         ecdsa__sig_config=EcdsaSigConfig(
             alpha=StarkCurve.ALPHA,
             beta=StarkCurve.BETA,
-            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y),
-        ),
+            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y)),
         pedersen__points__x=pedersen__points__x,
         pedersen__points__y=pedersen__points__y,
         ecdsa__generator_points__x=ecdsa__generator_points__x,
@@ -111,7 +109,7 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         rc16__perm__interaction_elm=interaction_elements.rc16__perm__interaction_elm,
         memory__multi_column_perm__perm__public_memory_prod=public_memory_prod_ratio,
         rc16__perm__public_memory_prod=1,
-    );
+        );
 
     return eval_composition_polynomial(
         mask_values=mask_values,
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/dex/public_verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/dex/public_verify.cairo
index 711648b..ba1d60d 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/dex/public_verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/dex/public_verify.cairo
@@ -80,31 +80,27 @@ func public_input_validate{range_check_ptr}(
     // Segments.
     tempvar n_output_uses = (
         public_input.segments[segments.OUTPUT].stop_ptr -
-        public_input.segments[segments.OUTPUT].begin_addr
-    );
+        public_input.segments[segments.OUTPUT].begin_addr);
     assert_nn(n_output_uses);
 
     assert public_input.n_segments = segments.N_SEGMENTS;
     tempvar n_pedersen_copies = n_steps / PEDERSEN_BUILTIN_RATIO;
     tempvar n_pedersen_uses = (
         public_input.segments[segments.PEDERSEN].stop_ptr -
-        public_input.segments[segments.PEDERSEN].begin_addr
-    ) / 3;
+        public_input.segments[segments.PEDERSEN].begin_addr) / 3;
     // Note that the following call implies that n_steps is divisible by PEDERSEN_BUILTIN_RATIO.
     assert_nn_le(n_pedersen_uses, n_pedersen_copies);
 
     tempvar n_range_check_copies = n_steps / RC_BUILTIN_RATIO;
     tempvar n_range_check_uses = (
         public_input.segments[segments.RANGE_CHECK].stop_ptr -
-        public_input.segments[segments.RANGE_CHECK].begin_addr
-    );
+        public_input.segments[segments.RANGE_CHECK].begin_addr);
     assert_nn_le(n_range_check_uses, n_range_check_copies);
 
     tempvar n_ecdsa_copies = n_steps / ECDSA_BUILTIN_RATIO;
     tempvar n_ecdsa_uses = (
         public_input.segments[segments.ECDSA].stop_ptr -
-        public_input.segments[segments.ECDSA].begin_addr
-    ) / 2;
+        public_input.segments[segments.ECDSA].begin_addr) / 2;
     assert_nn_le(n_ecdsa_uses, n_ecdsa_copies);
     return ();
 }
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/dex/verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/dex/verify.cairo
index b08f27c..5261532 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/dex/verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/dex/verify.cairo
@@ -41,8 +41,7 @@ func build_air() -> (air: AirWithLayout*) {
     );
     let (arg_eval_oods_polynomial) = get_label_location(eval_oods_polynomial);
 
-    tempvar air = new AirWithLayout(
-        air=AirInstance(
+    tempvar air = new AirWithLayout(air=AirInstance(
             public_input_hash=arg_public_input_hash,
             public_input_validate=arg_public_input_validate,
             traces_config_validate=arg_traces_config_validate,
@@ -53,14 +52,14 @@ func build_air() -> (air: AirWithLayout*) {
             n_constraints=N_CONSTRAINTS,
             constraint_degree=CONSTRAINT_DEGREE,
             mask_size=MASK_SIZE,
-        ),
+            ),
         layout=Layout(
             eval_oods_polynomial=arg_eval_oods_polynomial,
             n_original_columns=N_ORIGINAL_COLUMNS,
             n_interaction_columns=N_INTERACTION_COLUMNS,
             n_interaction_elements=InteractionElements.SIZE,
-        ),
-    );
+            ),
+        );
     return (air=air);
 }
 
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/autogenerated.cairo b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/autogenerated.cairo
index 7930b54..8aa22db 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/autogenerated.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/autogenerated.cairo
@@ -361,31 +361,17 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar cpu__decode__opcode_rc__bit_2 = column0_row2 - (column0_row3 + column0_row3);
     tempvar cpu__decode__opcode_rc__bit_4 = column0_row4 - (column0_row5 + column0_row5);
     tempvar cpu__decode__opcode_rc__bit_3 = column0_row3 - (column0_row4 + column0_row4);
-    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (
-        cpu__decode__opcode_rc__bit_2 +
-        cpu__decode__opcode_rc__bit_4 +
-        cpu__decode__opcode_rc__bit_3
-    );
+    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3);
     tempvar cpu__decode__opcode_rc__bit_5 = column0_row5 - (column0_row6 + column0_row6);
     tempvar cpu__decode__opcode_rc__bit_6 = column0_row6 - (column0_row7 + column0_row7);
     tempvar cpu__decode__opcode_rc__bit_9 = column0_row9 - (column0_row10 + column0_row10);
-    tempvar cpu__decode__flag_res_op1_0 = 1 - (
-        cpu__decode__opcode_rc__bit_5 +
-        cpu__decode__opcode_rc__bit_6 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_7 = column0_row7 - (column0_row8 + column0_row8);
     tempvar cpu__decode__opcode_rc__bit_8 = column0_row8 - (column0_row9 + column0_row9);
-    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_7 +
-        cpu__decode__opcode_rc__bit_8 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_12 = column0_row12 - (column0_row13 + column0_row13);
     tempvar cpu__decode__opcode_rc__bit_13 = column0_row13 - (column0_row14 + column0_row14);
-    tempvar cpu__decode__fp_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13
-    );
+    tempvar cpu__decode__fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13);
     tempvar cpu__decode__opcode_rc__bit_1 = column0_row1 - (column0_row2 + column0_row2);
     tempvar npc_reg_0 = column5_row0 + cpu__decode__opcode_rc__bit_2 + 1;
     tempvar cpu__decode__opcode_rc__bit_10 = column0_row10 - (column0_row11 + column0_row11);
@@ -398,39 +384,18 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar rc_builtin__value0_0 = column7_row12;
     tempvar rc_builtin__value1_0 = rc_builtin__value0_0 * global_values.offset_size + column7_row44;
     tempvar rc_builtin__value2_0 = rc_builtin__value1_0 * global_values.offset_size + column7_row76;
-    tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size +
-        column7_row108;
-    tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size +
-        column7_row140;
-    tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size +
-        column7_row172;
-    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size +
-        column7_row204;
-    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size +
-        column7_row236;
+    tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size + column7_row108;
+    tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size + column7_row140;
+    tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size + column7_row172;
+    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size + column7_row204;
+    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size + column7_row236;
     tempvar ecdsa__signature0__doubling_key__x_squared = column8_row4 * column8_row4;
-    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column8_row38 - (
-        column8_row166 + column8_row166
-    );
-    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_generator__bit_0;
-    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column8_row12 - (
-        column8_row76 + column8_row76
-    );
-    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 -
-        ecdsa__signature0__exponentiate_key__bit_0;
-    tempvar bitwise__sum_var_0_0 = column7_row1 + column7_row17 * 2 + column7_row33 * 4 +
-        column7_row49 * 8 + column7_row65 * 18446744073709551616 + column7_row81 *
-        36893488147419103232 + column7_row97 * 73786976294838206464 + column7_row113 *
-        147573952589676412928;
-    tempvar bitwise__sum_var_8_0 = column7_row129 * 340282366920938463463374607431768211456 +
-        column7_row145 * 680564733841876926926749214863536422912 + column7_row161 *
-        1361129467683753853853498429727072845824 + column7_row177 *
-        2722258935367507707706996859454145691648 + column7_row193 *
-        6277101735386680763835789423207666416102355444464034512896 + column7_row209 *
-        12554203470773361527671578846415332832204710888928069025792 + column7_row225 *
-        25108406941546723055343157692830665664409421777856138051584 + column7_row241 *
-        50216813883093446110686315385661331328818843555712276103168;
+    tempvar ecdsa__signature0__exponentiate_generator__bit_0 = column8_row38 - (column8_row166 + column8_row166);
+    tempvar ecdsa__signature0__exponentiate_generator__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_generator__bit_0;
+    tempvar ecdsa__signature0__exponentiate_key__bit_0 = column8_row12 - (column8_row76 + column8_row76);
+    tempvar ecdsa__signature0__exponentiate_key__bit_neg_0 = 1 - ecdsa__signature0__exponentiate_key__bit_0;
+    tempvar bitwise__sum_var_0_0 = column7_row1 + column7_row17 * 2 + column7_row33 * 4 + column7_row49 * 8 + column7_row65 * 18446744073709551616 + column7_row81 * 36893488147419103232 + column7_row97 * 73786976294838206464 + column7_row113 * 147573952589676412928;
+    tempvar bitwise__sum_var_8_0 = column7_row129 * 340282366920938463463374607431768211456 + column7_row145 * 680564733841876926926749214863536422912 + column7_row161 * 1361129467683753853853498429727072845824 + column7_row177 * 2722258935367507707706996859454145691648 + column7_row193 * 6277101735386680763835789423207666416102355444464034512896 + column7_row209 * 12554203470773361527671578846415332832204710888928069025792 + column7_row225 * 25108406941546723055343157692830665664409421777856138051584 + column7_row241 * 50216813883093446110686315385661331328818843555712276103168;
     tempvar ec_op__doubling_q__x_squared_0 = column8_row44 * column8_row44;
     tempvar ec_op__ec_subset_sum__bit_0 = column8_row18 - (column8_row82 + column8_row82);
     tempvar ec_op__ec_subset_sum__bit_neg_0 = 1 - ec_op__ec_subset_sum__bit_0;
@@ -439,10 +404,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = 0;
 
     // Constraint: cpu/decode/opcode_rc/bit.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 -
-        cpu__decode__opcode_rc__bit_0
-    ) * domain4 / domain0;
+    tempvar value = (cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0) * domain4 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[0] * value;
 
     // Constraint: cpu/decode/opcode_rc/zero.
@@ -450,82 +412,35 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[1] * value;
 
     // Constraint: cpu/decode/opcode_rc_input.
-    tempvar value = (
-        column5_row1 -
-        (
-            (
-                (column0_row0 * global_values.offset_size + column7_row4) *
-                global_values.offset_size +
-                column7_row8
-            ) * global_values.offset_size +
-            column7_row0
-        )
-    ) / domain5;
+    tempvar value = (column5_row1 - (((column0_row0 * global_values.offset_size + column7_row4) * global_values.offset_size + column7_row8) * global_values.offset_size + column7_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[2] * value;
 
     // Constraint: cpu/decode/flag_op1_base_op0_bit.
-    tempvar value = (
-        cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 -
-        cpu__decode__flag_op1_base_op0_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[3] * value;
 
     // Constraint: cpu/decode/flag_res_op1_bit.
-    tempvar value = (
-        cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[4] * value;
 
     // Constraint: cpu/decode/flag_pc_update_regular_bit.
-    tempvar value = (
-        cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 -
-        cpu__decode__flag_pc_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[5] * value;
 
     // Constraint: cpu/decode/fp_update_regular_bit.
-    tempvar value = (
-        cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 -
-        cpu__decode__fp_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[6] * value;
 
     // Constraint: cpu/operands/mem_dst_addr.
-    tempvar value = (
-        column5_row8 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_0 * column7_row11 +
-            (1 - cpu__decode__opcode_rc__bit_0) * column7_row3 +
-            column7_row0
-        )
-    ) / domain5;
+    tempvar value = (column5_row8 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_0 * column7_row11 + (1 - cpu__decode__opcode_rc__bit_0) * column7_row3 + column7_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[7] * value;
 
     // Constraint: cpu/operands/mem0_addr.
-    tempvar value = (
-        column5_row4 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_1 * column7_row11 +
-            (1 - cpu__decode__opcode_rc__bit_1) * column7_row3 +
-            column7_row8
-        )
-    ) / domain5;
+    tempvar value = (column5_row4 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_1 * column7_row11 + (1 - cpu__decode__opcode_rc__bit_1) * column7_row3 + column7_row8)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[8] * value;
 
     // Constraint: cpu/operands/mem1_addr.
-    tempvar value = (
-        column5_row12 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_2 * column5_row0 +
-            cpu__decode__opcode_rc__bit_4 * column7_row3 +
-            cpu__decode__opcode_rc__bit_3 * column7_row11 +
-            cpu__decode__flag_op1_base_op0_0 * column5_row5 +
-            column7_row4
-        )
-    ) / domain5;
+    tempvar value = (column5_row12 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_2 * column5_row0 + cpu__decode__opcode_rc__bit_4 * column7_row3 + cpu__decode__opcode_rc__bit_3 * column7_row11 + cpu__decode__flag_op1_base_op0_0 * column5_row5 + column7_row4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[9] * value;
 
     // Constraint: cpu/operands/ops_mul.
@@ -533,19 +448,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[10] * value;
 
     // Constraint: cpu/operands/res.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column7_row15 -
-        (
-            cpu__decode__opcode_rc__bit_5 * (column5_row5 + column5_row13) +
-            cpu__decode__opcode_rc__bit_6 * column7_row7 +
-            cpu__decode__flag_res_op1_0 * column5_row13
-        )
-    ) / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column7_row15 - (cpu__decode__opcode_rc__bit_5 * (column5_row5 + column5_row13) + cpu__decode__opcode_rc__bit_6 * column7_row7 + cpu__decode__flag_res_op1_0 * column5_row13)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[11] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp0.
-    tempvar value = (column8_row0 - cpu__decode__opcode_rc__bit_9 * column5_row9) * domain23 /
-        domain5;
+    tempvar value = (column8_row0 - cpu__decode__opcode_rc__bit_9 * column5_row9) * domain23 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[12] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp1.
@@ -553,43 +460,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[13] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_negative.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column5_row16 +
-        column8_row0 * (column5_row16 - (column5_row0 + column5_row13)) -
-        (
-            cpu__decode__flag_pc_update_regular_0 * npc_reg_0 +
-            cpu__decode__opcode_rc__bit_7 * column7_row15 +
-            cpu__decode__opcode_rc__bit_8 * (column5_row0 + column7_row15)
-        )
-    ) * domain23 / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column5_row16 + column8_row0 * (column5_row16 - (column5_row0 + column5_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column7_row15 + cpu__decode__opcode_rc__bit_8 * (column5_row0 + column7_row15))) * domain23 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[14] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_positive.
-    tempvar value = ((column8_row8 - cpu__decode__opcode_rc__bit_9) * (column5_row16 - npc_reg_0)) *
-        domain23 / domain5;
+    tempvar value = ((column8_row8 - cpu__decode__opcode_rc__bit_9) * (column5_row16 - npc_reg_0)) * domain23 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[15] * value;
 
     // Constraint: cpu/update_registers/update_ap/ap_update.
-    tempvar value = (
-        column7_row19 -
-        (
-            column7_row3 +
-            cpu__decode__opcode_rc__bit_10 * column7_row15 +
-            cpu__decode__opcode_rc__bit_11 +
-            cpu__decode__opcode_rc__bit_12 * 2
-        )
-    ) * domain23 / domain5;
+    tempvar value = (column7_row19 - (column7_row3 + cpu__decode__opcode_rc__bit_10 * column7_row15 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2)) * domain23 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[16] * value;
 
     // Constraint: cpu/update_registers/update_fp/fp_update.
-    tempvar value = (
-        column7_row27 -
-        (
-            cpu__decode__fp_update_regular_0 * column7_row11 +
-            cpu__decode__opcode_rc__bit_13 * column5_row9 +
-            cpu__decode__opcode_rc__bit_12 * (column7_row3 + 2)
-        )
-    ) * domain23 / domain5;
+    tempvar value = (column7_row27 - (cpu__decode__fp_update_regular_0 * column7_row11 + cpu__decode__opcode_rc__bit_13 * column5_row9 + cpu__decode__opcode_rc__bit_12 * (column7_row3 + 2))) * domain23 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[17] * value;
 
     // Constraint: cpu/opcodes/call/push_fp.
@@ -597,59 +480,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[18] * value;
 
     // Constraint: cpu/opcodes/call/push_pc.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            column5_row5 - (column5_row0 + cpu__decode__opcode_rc__bit_2 + 1)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column5_row5 - (column5_row0 + cpu__decode__opcode_rc__bit_2 + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[19] * value;
 
     // Constraint: cpu/opcodes/call/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column7_row0 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column7_row0 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[20] * value;
 
     // Constraint: cpu/opcodes/call/off1.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column7_row8 - (global_values.half_offset_size + 1))
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column7_row8 - (global_values.half_offset_size + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[21] * value;
 
     // Constraint: cpu/opcodes/call/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            cpu__decode__opcode_rc__bit_12 +
-            cpu__decode__opcode_rc__bit_12 +
-            1 +
-            1 -
-            (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[22] * value;
 
     // Constraint: cpu/opcodes/ret/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column7_row0 + 2 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column7_row0 + 2 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[23] * value;
 
     // Constraint: cpu/opcodes/ret/off2.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column7_row4 + 1 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column7_row4 + 1 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[24] * value;
 
     // Constraint: cpu/opcodes/ret/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (
-            cpu__decode__opcode_rc__bit_7 +
-            cpu__decode__opcode_rc__bit_0 +
-            cpu__decode__opcode_rc__bit_3 +
-            cpu__decode__flag_res_op1_0 -
-            4
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[25] * value;
 
     // Constraint: cpu/opcodes/assert_eq/assert_eq.
@@ -681,53 +536,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[32] * value;
 
     // Constraint: memory/multi_column_perm/perm/init0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column6_row0 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column6_row1
-            )
-        ) * column9_inter1_row0 +
-        column5_row0 +
-        global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row1 -
-        global_values.memory__multi_column_perm__perm__interaction_elm
-    ) / domain24;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column6_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column6_row1)) * column9_inter1_row0 + column5_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row1 - global_values.memory__multi_column_perm__perm__interaction_elm) / domain24;
     tempvar total_sum = total_sum + constraint_coefficients[33] * value;
 
     // Constraint: memory/multi_column_perm/perm/step0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column6_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column6_row3
-            )
-        ) * column9_inter1_row2 -
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column5_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row3
-            )
-        ) * column9_inter1_row0
-    ) * domain25 / domain1;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column6_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column6_row3)) * column9_inter1_row2 - (global_values.memory__multi_column_perm__perm__interaction_elm - (column5_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row3)) * column9_inter1_row0) * domain25 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[34] * value;
 
     // Constraint: memory/multi_column_perm/perm/last.
-    tempvar value = (
-        column9_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod
-    ) / domain25;
+    tempvar value = (column9_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod) / domain25;
     tempvar total_sum = total_sum + constraint_coefficients[35] * value;
 
     // Constraint: memory/diff_is_bit.
-    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) *
-        domain25 / domain1;
+    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) * domain25 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[36] * value;
 
     // Constraint: memory/is_func.
-    tempvar value = ((memory__address_diff_0 - 1) * (column6_row1 - column6_row3)) * domain25 /
-        domain1;
+    tempvar value = ((memory__address_diff_0 - 1) * (column6_row1 - column6_row3)) * domain25 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[37] * value;
 
     // Constraint: memory/initial_addr.
@@ -743,18 +568,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[40] * value;
 
     // Constraint: rc16/perm/init0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column7_row2) * column9_inter1_row1 +
-        column7_row0 -
-        global_values.rc16__perm__interaction_elm
-    ) / domain24;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column7_row2) * column9_inter1_row1 + column7_row0 - global_values.rc16__perm__interaction_elm) / domain24;
     tempvar total_sum = total_sum + constraint_coefficients[41] * value;
 
     // Constraint: rc16/perm/step0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column7_row6) * column9_inter1_row5 -
-        (global_values.rc16__perm__interaction_elm - column7_row4) * column9_inter1_row1
-    ) * domain26 / domain2;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column7_row6) * column9_inter1_row5 - (global_values.rc16__perm__interaction_elm - column7_row4) * column9_inter1_row1) * domain26 / domain2;
     tempvar total_sum = total_sum + constraint_coefficients[42] * value;
 
     // Constraint: rc16/perm/last.
@@ -774,27 +592,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[46] * value;
 
     // Constraint: diluted_check/permutation/init0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column7_row5) *
-        column9_inter1_row7 +
-        column7_row1 -
-        global_values.diluted_check__permutation__interaction_elm
-    ) / domain24;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column7_row5) * column9_inter1_row7 + column7_row1 - global_values.diluted_check__permutation__interaction_elm) / domain24;
     tempvar total_sum = total_sum + constraint_coefficients[47] * value;
 
     // Constraint: diluted_check/permutation/step0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column7_row13) *
-        column9_inter1_row15 -
-        (global_values.diluted_check__permutation__interaction_elm - column7_row9) *
-        column9_inter1_row7
-    ) * domain27 / domain3;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column7_row13) * column9_inter1_row15 - (global_values.diluted_check__permutation__interaction_elm - column7_row9) * column9_inter1_row7) * domain27 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[48] * value;
 
     // Constraint: diluted_check/permutation/last.
-    tempvar value = (
-        column9_inter1_row7 - global_values.diluted_check__permutation__public_memory_prod
-    ) / domain27;
+    tempvar value = (column9_inter1_row7 - global_values.diluted_check__permutation__public_memory_prod) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[49] * value;
 
     // Constraint: diluted_check/init.
@@ -806,17 +612,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[51] * value;
 
     // Constraint: diluted_check/step.
-    tempvar value = (
-        column9_inter1_row11 -
-        (
-            column9_inter1_row3 * (
-                1 + global_values.diluted_check__interaction_z * (column7_row13 - column7_row5)
-            ) +
-            global_values.diluted_check__interaction_alpha * (column7_row13 - column7_row5) * (
-                column7_row13 - column7_row5
-            )
-        )
-    ) * domain27 / domain3;
+    tempvar value = (column9_inter1_row11 - (column9_inter1_row3 * (1 + global_values.diluted_check__interaction_z * (column7_row13 - column7_row5)) + global_values.diluted_check__interaction_alpha * (column7_row13 - column7_row5) * (column7_row13 - column7_row5))) * domain27 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[52] * value;
 
     // Constraint: diluted_check/last.
@@ -828,18 +624,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[54] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column8_row86 * (
-            column3_row1 -
-            3138550867693340381917894711603833208051177722232017256448 * column3_row192
-        )
-    ) / domain8;
+    tempvar value = (column8_row86 * (column3_row1 - 3138550867693340381917894711603833208051177722232017256448 * column3_row192)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[55] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column8_row86 - column4_row255 * (column3_row192 - (column3_row193 + column3_row193))
-    ) / domain8;
+    tempvar value = (column8_row86 - column4_row255 * (column3_row192 - (column3_row193 + column3_row193))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[56] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -847,26 +636,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[57] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column4_row255 -
-        (column3_row251 - (column3_row252 + column3_row252)) * (
-            column3_row196 - (column3_row197 + column3_row197)
-        )
-    ) / domain8;
+    tempvar value = (column4_row255 - (column3_row251 - (column3_row252 + column3_row252)) * (column3_row196 - (column3_row197 + column3_row197))) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[58] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column3_row251 - (column3_row252 + column3_row252)) * (
-            column3_row197 - 18014398509481984 * column3_row251
-        )
-    ) / domain8;
+    tempvar value = ((column3_row251 - (column3_row252 + column3_row252)) * (column3_row197 - 18014398509481984 * column3_row251)) / domain8;
     tempvar total_sum = total_sum + constraint_coefficients[59] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[60] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_extraction_end.
@@ -878,36 +656,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[62] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - global_values.pedersen__points__y) -
-        column4_row0 * (column1_row0 - global_values.pedersen__points__x)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - global_values.pedersen__points__y) - column4_row0 * (column1_row0 - global_values.pedersen__points__x)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[63] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column4_row0 * column4_row0 -
-        pedersen__hash0__ec_subset_sum__bit_0 * (
-            column1_row0 + global_values.pedersen__points__x + column1_row1
-        )
-    ) * domain9 / domain0;
+    tempvar value = (column4_row0 * column4_row0 - pedersen__hash0__ec_subset_sum__bit_0 * (column1_row0 + global_values.pedersen__points__x + column1_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[64] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) -
-        column4_row0 * (column1_row0 - column1_row1)
-    ) * domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) - column4_row0 * (column1_row0 - column1_row1)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[65] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[66] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0)) *
-        domain9 / domain0;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0)) * domain9 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[67] * value;
 
     // Constraint: pedersen/hash0/copy_point/x.
@@ -967,33 +732,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[81] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/slope.
-    tempvar value = (
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        ecdsa__signature0__doubling_key__x_squared +
-        global_values.ecdsa__sig_config.alpha -
-        (column8_row36 + column8_row36) * column8_row50
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + global_values.ecdsa__sig_config.alpha - (column8_row36 + column8_row36) * column8_row50) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[82] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/x.
-    tempvar value = (
-        column8_row50 * column8_row50 - (column8_row4 + column8_row4 + column8_row68)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row50 * column8_row50 - (column8_row4 + column8_row4 + column8_row68)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[83] * value;
 
     // Constraint: ecdsa/signature0/doubling_key/y.
-    tempvar value = (
-        column8_row36 + column8_row100 - column8_row50 * (column8_row4 - column8_row68)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row36 + column8_row100 - column8_row50 * (column8_row4 - column8_row68)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[84] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            ecdsa__signature0__exponentiate_generator__bit_0 - 1
-        )
-    ) * domain20 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[85] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/bit_extraction_end.
@@ -1005,54 +756,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[87] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column8_row70 - global_values.ecdsa__generator_points__y
-        ) -
-        column8_row102 * (column8_row6 - global_values.ecdsa__generator_points__x)
-    ) * domain20 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row70 - global_values.ecdsa__generator_points__y) - column8_row102 * (column8_row6 - global_values.ecdsa__generator_points__x)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[88] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x.
-    tempvar value = (
-        column8_row102 * column8_row102 -
-        ecdsa__signature0__exponentiate_generator__bit_0 * (
-            column8_row6 + global_values.ecdsa__generator_points__x + column8_row134
-        )
-    ) * domain20 / domain7;
+    tempvar value = (column8_row102 * column8_row102 - ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row6 + global_values.ecdsa__generator_points__x + column8_row134)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[89] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row70 + column8_row198) -
-        column8_row102 * (column8_row6 - column8_row134)
-    ) * domain20 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row70 + column8_row198) - column8_row102 * (column8_row6 - column8_row134)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[90] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv.
-    tempvar value = (
-        column8_row22 * (column8_row6 - global_values.ecdsa__generator_points__x) - 1
-    ) * domain20 / domain7;
+    tempvar value = (column8_row22 * (column8_row6 - global_values.ecdsa__generator_points__x) - 1) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[91] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row134 - column8_row6)
-    ) * domain20 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row134 - column8_row6)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[92] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_generator/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row198 - column8_row70)
-    ) * domain20 / domain7;
+    tempvar value = (ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row198 - column8_row70)) * domain20 / domain7;
     tempvar total_sum = total_sum + constraint_coefficients[93] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/booleanity_test.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (
-            ecdsa__signature0__exponentiate_key__bit_0 - 1
-        )
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[94] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/bit_extraction_end.
@@ -1064,24 +792,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[96] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/slope.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 - column8_row36) -
-        column8_row10 * (column8_row20 - column8_row4)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 - column8_row36) - column8_row10 * (column8_row20 - column8_row4)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[97] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x.
-    tempvar value = (
-        column8_row10 * column8_row10 -
-        ecdsa__signature0__exponentiate_key__bit_0 * (column8_row20 + column8_row4 + column8_row84)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row10 * column8_row10 - ecdsa__signature0__exponentiate_key__bit_0 * (column8_row20 + column8_row4 + column8_row84)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[98] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 + column8_row116) -
-        column8_row10 * (column8_row20 - column8_row84)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 + column8_row116) - column8_row10 * (column8_row20 - column8_row84)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[99] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/add_points/x_diff_inv.
@@ -1089,15 +808,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[100] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/x.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row84 - column8_row20)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row84 - column8_row20)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[101] * value;
 
     // Constraint: ecdsa/signature0/exponentiate_key/copy_point/y.
-    tempvar value = (
-        ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row116 - column8_row52)
-    ) * domain16 / domain6;
+    tempvar value = (ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row116 - column8_row52)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[102] * value;
 
     // Constraint: ecdsa/signature0/init_gen/x.
@@ -1117,25 +832,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[106] * value;
 
     // Constraint: ecdsa/signature0/add_results/slope.
-    tempvar value = (
-        column8_row32710 -
-        (column8_row16372 + column8_row32742 * (column8_row32646 - column8_row16340))
-    ) / domain22;
+    tempvar value = (column8_row32710 - (column8_row16372 + column8_row32742 * (column8_row32646 - column8_row16340))) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[107] * value;
 
     // Constraint: ecdsa/signature0/add_results/x.
-    tempvar value = (
-        column8_row32742 * column8_row32742 -
-        (column8_row32646 + column8_row16340 + column8_row16388)
-    ) / domain22;
+    tempvar value = (column8_row32742 * column8_row32742 - (column8_row32646 + column8_row16340 + column8_row16388)) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[108] * value;
 
     // Constraint: ecdsa/signature0/add_results/y.
-    tempvar value = (
-        column8_row32710 +
-        column8_row16420 -
-        column8_row32742 * (column8_row32646 - column8_row16388)
-    ) / domain22;
+    tempvar value = (column8_row32710 + column8_row16420 - column8_row32742 * (column8_row32646 - column8_row16388)) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[109] * value;
 
     // Constraint: ecdsa/signature0/add_results/x_diff_inv.
@@ -1143,24 +848,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[110] * value;
 
     // Constraint: ecdsa/signature0/extract_r/slope.
-    tempvar value = (
-        column8_row32756 +
-        global_values.ecdsa__sig_config.shift_point.y -
-        column8_row16346 * (column8_row32724 - global_values.ecdsa__sig_config.shift_point.x)
-    ) / domain22;
+    tempvar value = (column8_row32756 + global_values.ecdsa__sig_config.shift_point.y - column8_row16346 * (column8_row32724 - global_values.ecdsa__sig_config.shift_point.x)) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[111] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x.
-    tempvar value = (
-        column8_row16346 * column8_row16346 -
-        (column8_row32724 + global_values.ecdsa__sig_config.shift_point.x + column8_row12)
-    ) / domain22;
+    tempvar value = (column8_row16346 * column8_row16346 - (column8_row32724 + global_values.ecdsa__sig_config.shift_point.x + column8_row12)) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[112] * value;
 
     // Constraint: ecdsa/signature0/extract_r/x_diff_inv.
-    tempvar value = (
-        column8_row32730 * (column8_row32724 - global_values.ecdsa__sig_config.shift_point.x) - 1
-    ) / domain22;
+    tempvar value = (column8_row32730 * (column8_row32724 - global_values.ecdsa__sig_config.shift_point.x) - 1) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[113] * value;
 
     // Constraint: ecdsa/signature0/z_nonzero.
@@ -1176,14 +872,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[116] * value;
 
     // Constraint: ecdsa/signature0/q_on_curve/on_curve.
-    tempvar value = (
-        column8_row36 * column8_row36 -
-        (
-            column8_row4 * column8_row32762 +
-            global_values.ecdsa__sig_config.alpha * column8_row4 +
-            global_values.ecdsa__sig_config.beta
-        )
-    ) / domain22;
+    tempvar value = (column8_row36 * column8_row36 - (column8_row4 * column8_row32762 + global_values.ecdsa__sig_config.alpha * column8_row4 + global_values.ecdsa__sig_config.beta)) / domain22;
     tempvar total_sum = total_sum + constraint_coefficients[117] * value;
 
     // Constraint: ecdsa/init_addr.
@@ -1231,9 +920,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[128] * value;
 
     // Constraint: bitwise/addition_is_xor_with_and.
-    tempvar value = (
-        column7_row1 + column7_row257 - (column7_row769 + column7_row513 + column7_row513)
-    ) / domain15;
+    tempvar value = (column7_row1 + column7_row257 - (column7_row769 + column7_row513 + column7_row513)) / domain15;
     tempvar total_sum = total_sum + constraint_coefficients[129] * value;
 
     // Constraint: bitwise/unique_unpacking192.
@@ -1285,25 +972,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[141] * value;
 
     // Constraint: ec_op/doubling_q/slope.
-    tempvar value = (
-        ec_op__doubling_q__x_squared_0 +
-        ec_op__doubling_q__x_squared_0 +
-        ec_op__doubling_q__x_squared_0 +
-        global_values.ec_op__curve_config.alpha -
-        (column8_row28 + column8_row28) * column8_row60
-    ) * domain16 / domain6;
+    tempvar value = (ec_op__doubling_q__x_squared_0 + ec_op__doubling_q__x_squared_0 + ec_op__doubling_q__x_squared_0 + global_values.ec_op__curve_config.alpha - (column8_row28 + column8_row28) * column8_row60) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[142] * value;
 
     // Constraint: ec_op/doubling_q/x.
-    tempvar value = (
-        column8_row60 * column8_row60 - (column8_row44 + column8_row44 + column8_row108)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row60 * column8_row60 - (column8_row44 + column8_row44 + column8_row108)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[143] * value;
 
     // Constraint: ec_op/doubling_q/y.
-    tempvar value = (
-        column8_row28 + column8_row92 - column8_row60 * (column8_row44 - column8_row108)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row28 + column8_row92 - column8_row60 * (column8_row44 - column8_row108)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[144] * value;
 
     // Constraint: ec_op/get_q_x.
@@ -1315,24 +992,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[146] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/last_one_is_zero.
-    tempvar value = (column8_row16362 * (column8_row18 - (column8_row82 + column8_row82))) /
-        domain18;
+    tempvar value = (column8_row16362 * (column8_row18 - (column8_row82 + column8_row82))) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[147] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column8_row16362 * (
-            column8_row82 -
-            3138550867693340381917894711603833208051177722232017256448 * column8_row12306
-        )
-    ) / domain18;
+    tempvar value = (column8_row16362 * (column8_row82 - 3138550867693340381917894711603833208051177722232017256448 * column8_row12306)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[148] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column8_row16362 -
-        column8_row16330 * (column8_row12306 - (column8_row12370 + column8_row12370))
-    ) / domain18;
+    tempvar value = (column8_row16362 - column8_row16330 * (column8_row12306 - (column8_row12370 + column8_row12370))) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[149] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -1340,25 +1008,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[150] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column8_row16330 -
-        (column8_row16082 - (column8_row16146 + column8_row16146)) * (
-            column8_row12562 - (column8_row12626 + column8_row12626)
-        )
-    ) / domain18;
+    tempvar value = (column8_row16330 - (column8_row16082 - (column8_row16146 + column8_row16146)) * (column8_row12562 - (column8_row12626 + column8_row12626))) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[151] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column8_row16082 - (column8_row16146 + column8_row16146)) * (
-            column8_row12626 - 18014398509481984 * column8_row16082
-        )
-    ) / domain18;
+    tempvar value = ((column8_row16082 - (column8_row16146 + column8_row16146)) * (column8_row12626 - 18014398509481984 * column8_row16082)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[152] * value;
 
     // Constraint: ec_op/ec_subset_sum/booleanity_test.
-    tempvar value = (ec_op__ec_subset_sum__bit_0 * (ec_op__ec_subset_sum__bit_0 - 1)) * domain16 /
-        domain6;
+    tempvar value = (ec_op__ec_subset_sum__bit_0 * (ec_op__ec_subset_sum__bit_0 - 1)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[153] * value;
 
     // Constraint: ec_op/ec_subset_sum/bit_extraction_end.
@@ -1370,24 +1028,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[155] * value;
 
     // Constraint: ec_op/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        ec_op__ec_subset_sum__bit_0 * (column8_row34 - column8_row28) -
-        column8_row26 * (column8_row2 - column8_row44)
-    ) * domain16 / domain6;
+    tempvar value = (ec_op__ec_subset_sum__bit_0 * (column8_row34 - column8_row28) - column8_row26 * (column8_row2 - column8_row44)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[156] * value;
 
     // Constraint: ec_op/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column8_row26 * column8_row26 -
-        ec_op__ec_subset_sum__bit_0 * (column8_row2 + column8_row44 + column8_row66)
-    ) * domain16 / domain6;
+    tempvar value = (column8_row26 * column8_row26 - ec_op__ec_subset_sum__bit_0 * (column8_row2 + column8_row44 + column8_row66)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[157] * value;
 
     // Constraint: ec_op/ec_subset_sum/add_points/y.
-    tempvar value = (
-        ec_op__ec_subset_sum__bit_0 * (column8_row34 + column8_row98) -
-        column8_row26 * (column8_row2 - column8_row66)
-    ) * domain16 / domain6;
+    tempvar value = (ec_op__ec_subset_sum__bit_0 * (column8_row34 + column8_row98) - column8_row26 * (column8_row2 - column8_row66)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[158] * value;
 
     // Constraint: ec_op/ec_subset_sum/add_points/x_diff_inv.
@@ -1395,13 +1044,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[159] * value;
 
     // Constraint: ec_op/ec_subset_sum/copy_point/x.
-    tempvar value = (ec_op__ec_subset_sum__bit_neg_0 * (column8_row66 - column8_row2)) * domain16 /
-        domain6;
+    tempvar value = (ec_op__ec_subset_sum__bit_neg_0 * (column8_row66 - column8_row2)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[160] * value;
 
     // Constraint: ec_op/ec_subset_sum/copy_point/y.
-    tempvar value = (ec_op__ec_subset_sum__bit_neg_0 * (column8_row98 - column8_row34)) * domain16 /
-        domain6;
+    tempvar value = (ec_op__ec_subset_sum__bit_neg_0 * (column8_row98 - column8_row34)) * domain16 / domain6;
     tempvar total_sum = total_sum + constraint_coefficients[161] * value;
 
     // Constraint: ec_op/get_m.
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/composition.cairo b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/composition.cairo
index 13a195d..164b6b0 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/composition.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/composition.cairo
@@ -77,14 +77,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
     // Periodic columns.
     let (n_steps) = pow(2, public_input.log_n_steps);
     tempvar n_pedersen_hash_copies = n_steps / (
-        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS
-    );
+        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS);
     assert_nn(n_pedersen_hash_copies);
     let (pedersen_point) = pow(point, n_pedersen_hash_copies);
     let (pedersen__points__x) = eval_pedersen_x(pedersen_point);
     let (pedersen__points__y) = eval_pedersen_y(pedersen_point);
 
-    tempvar n_ecdsa_signature_copies = n_steps / (ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
+    tempvar n_ecdsa_signature_copies = n_steps / (
+        ECDSA_BUILTIN_RATIO * ECDSA_BUILTIN_REPETITIONS);
     assert_nn(n_ecdsa_signature_copies);
     let (ecdsa_point) = pow(point, n_ecdsa_signature_copies);
     let (ecdsa__generator_points__x) = eval_ecdsa_x(ecdsa_point);
@@ -110,9 +110,10 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         ecdsa__sig_config=EcdsaSigConfig(
             alpha=StarkCurve.ALPHA,
             beta=StarkCurve.BETA,
-            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y),
-        ),
-        ec_op__curve_config=CurveConfig(alpha=StarkCurve.ALPHA, beta=StarkCurve.BETA),
+            shift_point=EcPoint(x=SHIFT_POINT_X, y=SHIFT_POINT_Y)),
+        ec_op__curve_config=CurveConfig(
+            alpha=StarkCurve.ALPHA,
+            beta=StarkCurve.BETA),
         pedersen__points__x=pedersen__points__x,
         pedersen__points__y=pedersen__points__y,
         ecdsa__generator_points__x=ecdsa__generator_points__x,
@@ -121,16 +122,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         memory__multi_column_perm__hash_interaction_elm0=memory_alpha,
         rc16__perm__interaction_elm=interaction_elements.rc16__perm__interaction_elm,
         diluted_check__permutation__interaction_elm=(
-            interaction_elements.diluted_check__permutation__interaction_elm
-        ),
+            interaction_elements.diluted_check__permutation__interaction_elm),
         diluted_check__interaction_z=diluted_z,
         diluted_check__interaction_alpha=diluted_alpha,
         memory__multi_column_perm__perm__public_memory_prod=public_memory_prod_ratio,
         rc16__perm__public_memory_prod=1,
         diluted_check__first_elm=0,
         diluted_check__permutation__public_memory_prod=1,
-        diluted_check__final_cum_val=diluted_prod,
-    );
+        diluted_check__final_cum_val=diluted_prod);
 
     return eval_composition_polynomial(
         mask_values=mask_values,
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/public_verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/public_verify.cairo
index 7631174..399b228 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/public_verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/public_verify.cairo
@@ -86,45 +86,39 @@ func public_input_validate{range_check_ptr}(
     // Segments.
     tempvar n_output_uses = (
         public_input.segments[segments.OUTPUT].stop_ptr -
-        public_input.segments[segments.OUTPUT].begin_addr
-    );
+        public_input.segments[segments.OUTPUT].begin_addr);
     assert_nn(n_output_uses);
 
     assert public_input.n_segments = segments.N_SEGMENTS;
     tempvar n_pedersen_copies = n_steps / PEDERSEN_BUILTIN_RATIO;
     tempvar n_pedersen_uses = (
         public_input.segments[segments.PEDERSEN].stop_ptr -
-        public_input.segments[segments.PEDERSEN].begin_addr
-    ) / 3;
+        public_input.segments[segments.PEDERSEN].begin_addr) / 3;
     // Note that the following call implies that n_steps is divisible by PEDERSEN_BUILTIN_RATIO.
     assert_nn_le(n_pedersen_uses, n_pedersen_copies);
 
     tempvar n_range_check_copies = n_steps / RC_BUILTIN_RATIO;
     tempvar n_range_check_uses = (
         public_input.segments[segments.RANGE_CHECK].stop_ptr -
-        public_input.segments[segments.RANGE_CHECK].begin_addr
-    );
+        public_input.segments[segments.RANGE_CHECK].begin_addr);
     assert_nn_le(n_range_check_uses, n_range_check_copies);
 
     tempvar n_ecdsa_copies = n_steps / ECDSA_BUILTIN_RATIO;
     tempvar n_ecdsa_uses = (
         public_input.segments[segments.ECDSA].stop_ptr -
-        public_input.segments[segments.ECDSA].begin_addr
-    ) / 2;
+        public_input.segments[segments.ECDSA].begin_addr) / 2;
     assert_nn_le(n_ecdsa_uses, n_ecdsa_copies);
 
     tempvar n_bitwise_copies = n_steps / BITWISE__RATIO;
     tempvar n_bitwise_uses = (
         public_input.segments[segments.BITWISE].stop_ptr -
-        public_input.segments[segments.BITWISE].begin_addr
-    ) / 5;
+        public_input.segments[segments.BITWISE].begin_addr) / 5;
     assert_nn_le(n_bitwise_uses, n_bitwise_copies);
 
     tempvar n_ec_op_copies = n_steps / EC_OP_BUILTIN_RATIO;
     tempvar n_ec_op_uses = (
         public_input.segments[segments.EC_OP].stop_ptr -
-        public_input.segments[segments.EC_OP].begin_addr
-    ) / 7;
+        public_input.segments[segments.EC_OP].begin_addr) / 7;
     assert_nn_le(n_ec_op_uses, n_ec_op_copies);
     return ();
 }
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/verify.cairo
index ee11be1..7b1ce2c 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/perpetual_with_bitwise/verify.cairo
@@ -45,8 +45,7 @@ func build_air() -> (air: AirWithLayout*) {
     );
     let (arg_eval_oods_polynomial) = get_label_location(eval_oods_polynomial);
 
-    tempvar air = new AirWithLayout(
-        air=AirInstance(
+    tempvar air = new AirWithLayout(air=AirInstance(
             public_input_hash=arg_public_input_hash,
             public_input_validate=arg_public_input_validate,
             traces_config_validate=arg_traces_config_validate,
@@ -57,14 +56,14 @@ func build_air() -> (air: AirWithLayout*) {
             n_constraints=N_CONSTRAINTS,
             constraint_degree=CONSTRAINT_DEGREE,
             mask_size=MASK_SIZE,
-        ),
+            ),
         layout=Layout(
             eval_oods_polynomial=arg_eval_oods_polynomial,
             n_original_columns=N_ORIGINAL_COLUMNS,
             n_interaction_columns=N_INTERACTION_COLUMNS,
             n_interaction_elements=InteractionElements.SIZE,
-        ),
-    );
+            ),
+        );
     return (air=air);
 }
 
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/recursive/autogenerated.cairo b/src/starkware/cairo/stark_verifier/air/layouts/recursive/autogenerated.cairo
index 061a5c4..366e623 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/recursive/autogenerated.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/recursive/autogenerated.cairo
@@ -7613,31 +7613,17 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar cpu__decode__opcode_rc__bit_2 = column0_row2 - (column0_row3 + column0_row3);
     tempvar cpu__decode__opcode_rc__bit_4 = column0_row4 - (column0_row5 + column0_row5);
     tempvar cpu__decode__opcode_rc__bit_3 = column0_row3 - (column0_row4 + column0_row4);
-    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (
-        cpu__decode__opcode_rc__bit_2 +
-        cpu__decode__opcode_rc__bit_4 +
-        cpu__decode__opcode_rc__bit_3
-    );
+    tempvar cpu__decode__flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3);
     tempvar cpu__decode__opcode_rc__bit_5 = column0_row5 - (column0_row6 + column0_row6);
     tempvar cpu__decode__opcode_rc__bit_6 = column0_row6 - (column0_row7 + column0_row7);
     tempvar cpu__decode__opcode_rc__bit_9 = column0_row9 - (column0_row10 + column0_row10);
-    tempvar cpu__decode__flag_res_op1_0 = 1 - (
-        cpu__decode__opcode_rc__bit_5 +
-        cpu__decode__opcode_rc__bit_6 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_7 = column0_row7 - (column0_row8 + column0_row8);
     tempvar cpu__decode__opcode_rc__bit_8 = column0_row8 - (column0_row9 + column0_row9);
-    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_7 +
-        cpu__decode__opcode_rc__bit_8 +
-        cpu__decode__opcode_rc__bit_9
-    );
+    tempvar cpu__decode__flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9);
     tempvar cpu__decode__opcode_rc__bit_12 = column0_row12 - (column0_row13 + column0_row13);
     tempvar cpu__decode__opcode_rc__bit_13 = column0_row13 - (column0_row14 + column0_row14);
-    tempvar cpu__decode__fp_update_regular_0 = 1 - (
-        cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13
-    );
+    tempvar cpu__decode__fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13);
     tempvar cpu__decode__opcode_rc__bit_1 = column0_row1 - (column0_row2 + column0_row2);
     tempvar npc_reg_0 = column4_row0 + cpu__decode__opcode_rc__bit_2 + 1;
     tempvar cpu__decode__opcode_rc__bit_10 = column0_row10 - (column0_row11 + column0_row11);
@@ -7653,82 +7639,36 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar rc_builtin__value3_0 = rc_builtin__value2_0 * global_values.offset_size + column6_row60;
     tempvar rc_builtin__value4_0 = rc_builtin__value3_0 * global_values.offset_size + column6_row76;
     tempvar rc_builtin__value5_0 = rc_builtin__value4_0 * global_values.offset_size + column6_row92;
-    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size +
-        column6_row108;
-    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size +
-        column6_row124;
-    tempvar bitwise__sum_var_0_0 = column1_row0 + column1_row4 * 2 + column1_row8 * 4 +
-        column1_row12 * 8 + column1_row16 * 18446744073709551616 + column1_row20 *
-        36893488147419103232 + column1_row24 * 73786976294838206464 + column1_row28 *
-        147573952589676412928;
-    tempvar bitwise__sum_var_8_0 = column1_row32 * 340282366920938463463374607431768211456 +
-        column1_row36 * 680564733841876926926749214863536422912 + column1_row40 *
-        1361129467683753853853498429727072845824 + column1_row44 *
-        2722258935367507707706996859454145691648 + column1_row48 *
-        6277101735386680763835789423207666416102355444464034512896 + column1_row52 *
-        12554203470773361527671578846415332832204710888928069025792 + column1_row56 *
-        25108406941546723055343157692830665664409421777856138051584 + column1_row60 *
-        50216813883093446110686315385661331328818843555712276103168;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances0_0 = column3_row16 -
-        column3_row66320 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances0_2 = column3_row32 -
-        column3_row66336 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances1_0 = column3_row66320 -
-        column3_row132624 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances1_2 = column3_row66336 -
-        column3_row132640 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances2_0 = column3_row132624 -
-        column3_row198928 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances2_2 = column3_row132640 -
-        column3_row198944 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances3_0 = column3_row198928 -
-        column3_row265232 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances3_2 = column3_row198944 -
-        column3_row265248 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances4_0 = column3_row265232 -
-        column3_row331536 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances4_2 = column3_row265248 -
-        column3_row331552 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances5_0 = column3_row331536 -
-        column3_row397840 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances5_2 = column3_row331552 -
-        column3_row397856 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances6_0 = column3_row397840 -
-        column3_row464144 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances6_2 = column3_row397856 -
-        column3_row464160 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances7_0 = column3_row464144 -
-        column3_row6416 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances7_2 = column3_row464160 -
-        column3_row6432 * 1606938044258990275541962092341162602522202993782792835301376;
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_0 = column3_row516112 - (
-        column3_row272 + column3_row272
-    );
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_2 = column3_row516128 - (
-        column3_row288 + column3_row288
-    );
-    tempvar keccak__keccak__parse_to_diluted__bit_other1_0 = keccak__keccak__parse_to_diluted__partial_diluted1_2 -
-        16 * keccak__keccak__parse_to_diluted__partial_diluted1_0;
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_30 = column3_row516352 - (
-        column3_row512 + column3_row512
-    );
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_31 = column3_row516360 - (
-        column3_row520 + column3_row520
-    );
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_0 = column3_row16 - (
-        column3_row8208 + column3_row8208
-    );
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_2 = column3_row32 - (
-        column3_row8224 + column3_row8224
-    );
-    tempvar keccak__keccak__parse_to_diluted__bit_other0_0 = keccak__keccak__parse_to_diluted__partial_diluted0_2 -
-        16 * keccak__keccak__parse_to_diluted__partial_diluted0_0;
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_30 = column3_row256 - (
-        column3_row8448 + column3_row8448
-    );
-    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_31 = column3_row264 - (
-        column3_row8456 + column3_row8456
-    );
+    tempvar rc_builtin__value6_0 = rc_builtin__value5_0 * global_values.offset_size + column6_row108;
+    tempvar rc_builtin__value7_0 = rc_builtin__value6_0 * global_values.offset_size + column6_row124;
+    tempvar bitwise__sum_var_0_0 = column1_row0 + column1_row4 * 2 + column1_row8 * 4 + column1_row12 * 8 + column1_row16 * 18446744073709551616 + column1_row20 * 36893488147419103232 + column1_row24 * 73786976294838206464 + column1_row28 * 147573952589676412928;
+    tempvar bitwise__sum_var_8_0 = column1_row32 * 340282366920938463463374607431768211456 + column1_row36 * 680564733841876926926749214863536422912 + column1_row40 * 1361129467683753853853498429727072845824 + column1_row44 * 2722258935367507707706996859454145691648 + column1_row48 * 6277101735386680763835789423207666416102355444464034512896 + column1_row52 * 12554203470773361527671578846415332832204710888928069025792 + column1_row56 * 25108406941546723055343157692830665664409421777856138051584 + column1_row60 * 50216813883093446110686315385661331328818843555712276103168;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances0_0 = column3_row16 - column3_row66320 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances0_2 = column3_row32 - column3_row66336 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances1_0 = column3_row66320 - column3_row132624 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances1_2 = column3_row66336 - column3_row132640 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances2_0 = column3_row132624 - column3_row198928 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances2_2 = column3_row132640 - column3_row198944 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances3_0 = column3_row198928 - column3_row265232 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances3_2 = column3_row198944 - column3_row265248 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances4_0 = column3_row265232 - column3_row331536 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances4_2 = column3_row265248 - column3_row331552 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances5_0 = column3_row331536 - column3_row397840 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances5_2 = column3_row331552 - column3_row397856 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances6_0 = column3_row397840 - column3_row464144 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances6_2 = column3_row397856 - column3_row464160 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances7_0 = column3_row464144 - column3_row6416 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__sum_words_over_instances7_2 = column3_row464160 - column3_row6432 * 1606938044258990275541962092341162602522202993782792835301376;
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_0 = column3_row516112 - (column3_row272 + column3_row272);
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_2 = column3_row516128 - (column3_row288 + column3_row288);
+    tempvar keccak__keccak__parse_to_diluted__bit_other1_0 = keccak__keccak__parse_to_diluted__partial_diluted1_2 - 16 * keccak__keccak__parse_to_diluted__partial_diluted1_0;
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_30 = column3_row516352 - (column3_row512 + column3_row512);
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted1_31 = column3_row516360 - (column3_row520 + column3_row520);
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_0 = column3_row16 - (column3_row8208 + column3_row8208);
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_2 = column3_row32 - (column3_row8224 + column3_row8224);
+    tempvar keccak__keccak__parse_to_diluted__bit_other0_0 = keccak__keccak__parse_to_diluted__partial_diluted0_2 - 16 * keccak__keccak__parse_to_diluted__partial_diluted0_0;
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_30 = column3_row256 - (column3_row8448 + column3_row8448);
+    tempvar keccak__keccak__parse_to_diluted__partial_diluted0_31 = column3_row264 - (column3_row8456 + column3_row8456);
     tempvar keccak__keccak__sum_parities0_0 = column1_row6593 + column3_row7760;
     tempvar keccak__keccak__sum_parities1_0 = column1_row6406 + column3_row1876;
     tempvar keccak__keccak__sum_parities1_64512 = column1_row522502 + column3_row517972;
@@ -7776,16 +7716,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar keccak__keccak__sum_parities4_51200 = column1_row416198 + column3_row413524;
     tempvar keccak__keccak__after_theta_rho_pi_xor_one_32 = 1229782938247303441 - column1_row259;
     tempvar keccak__keccak__after_theta_rho_pi_xor_one_1056 = 1229782938247303441 - column1_row8451;
-    tempvar keccak__keccak__after_theta_rho_pi_xor_one_3104 = 1229782938247303441 -
-        column1_row24835;
-    tempvar keccak__keccak__after_theta_rho_pi_xor_one_7200 = 1229782938247303441 -
-        column1_row57603;
-    tempvar keccak__keccak__after_theta_rho_pi_xor_one_15392 = 1229782938247303441 -
-        column1_row123139;
-    tempvar keccak__keccak__after_theta_rho_pi_xor_one_31776 = 1229782938247303441 -
-        column1_row254211;
-    tempvar keccak__keccak__after_theta_rho_pi_xor_one_64544 = 1229782938247303441 -
-        column1_row516355;
+    tempvar keccak__keccak__after_theta_rho_pi_xor_one_3104 = 1229782938247303441 - column1_row24835;
+    tempvar keccak__keccak__after_theta_rho_pi_xor_one_7200 = 1229782938247303441 - column1_row57603;
+    tempvar keccak__keccak__after_theta_rho_pi_xor_one_15392 = 1229782938247303441 - column1_row123139;
+    tempvar keccak__keccak__after_theta_rho_pi_xor_one_31776 = 1229782938247303441 - column1_row254211;
+    tempvar keccak__keccak__after_theta_rho_pi_xor_one_64544 = 1229782938247303441 - column1_row516355;
     tempvar keccak__keccak__after_theta_rho_pi_xor_one_0 = 1229782938247303441 - column1_row3;
     tempvar keccak__keccak__after_theta_rho_pi_xor_one_128 = 1229782938247303441 - column1_row1027;
 
@@ -7793,10 +7728,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = 0;
 
     // Constraint: cpu/decode/opcode_rc/bit.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 -
-        cpu__decode__opcode_rc__bit_0
-    ) * domain4 / domain0;
+    tempvar value = (cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0) * domain4 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[0] * value;
 
     // Constraint: cpu/decode/opcode_rc/zero.
@@ -7804,82 +7736,35 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[1] * value;
 
     // Constraint: cpu/decode/opcode_rc_input.
-    tempvar value = (
-        column4_row1 -
-        (
-            (
-                (column0_row0 * global_values.offset_size + column6_row4) *
-                global_values.offset_size +
-                column6_row8
-            ) * global_values.offset_size +
-            column6_row0
-        )
-    ) / domain5;
+    tempvar value = (column4_row1 - (((column0_row0 * global_values.offset_size + column6_row4) * global_values.offset_size + column6_row8) * global_values.offset_size + column6_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[2] * value;
 
     // Constraint: cpu/decode/flag_op1_base_op0_bit.
-    tempvar value = (
-        cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 -
-        cpu__decode__flag_op1_base_op0_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[3] * value;
 
     // Constraint: cpu/decode/flag_res_op1_bit.
-    tempvar value = (
-        cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[4] * value;
 
     // Constraint: cpu/decode/flag_pc_update_regular_bit.
-    tempvar value = (
-        cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 -
-        cpu__decode__flag_pc_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[5] * value;
 
     // Constraint: cpu/decode/fp_update_regular_bit.
-    tempvar value = (
-        cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 -
-        cpu__decode__fp_update_regular_0
-    ) / domain5;
+    tempvar value = (cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[6] * value;
 
     // Constraint: cpu/operands/mem_dst_addr.
-    tempvar value = (
-        column4_row8 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_0 * column7_row8 +
-            (1 - cpu__decode__opcode_rc__bit_0) * column7_row0 +
-            column6_row0
-        )
-    ) / domain5;
+    tempvar value = (column4_row8 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_0 * column7_row8 + (1 - cpu__decode__opcode_rc__bit_0) * column7_row0 + column6_row0)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[7] * value;
 
     // Constraint: cpu/operands/mem0_addr.
-    tempvar value = (
-        column4_row4 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_1 * column7_row8 +
-            (1 - cpu__decode__opcode_rc__bit_1) * column7_row0 +
-            column6_row8
-        )
-    ) / domain5;
+    tempvar value = (column4_row4 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_1 * column7_row8 + (1 - cpu__decode__opcode_rc__bit_1) * column7_row0 + column6_row8)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[8] * value;
 
     // Constraint: cpu/operands/mem1_addr.
-    tempvar value = (
-        column4_row12 +
-        global_values.half_offset_size -
-        (
-            cpu__decode__opcode_rc__bit_2 * column4_row0 +
-            cpu__decode__opcode_rc__bit_4 * column7_row0 +
-            cpu__decode__opcode_rc__bit_3 * column7_row8 +
-            cpu__decode__flag_op1_base_op0_0 * column4_row5 +
-            column6_row4
-        )
-    ) / domain5;
+    tempvar value = (column4_row12 + global_values.half_offset_size - (cpu__decode__opcode_rc__bit_2 * column4_row0 + cpu__decode__opcode_rc__bit_4 * column7_row0 + cpu__decode__opcode_rc__bit_3 * column7_row8 + cpu__decode__flag_op1_base_op0_0 * column4_row5 + column6_row4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[9] * value;
 
     // Constraint: cpu/operands/ops_mul.
@@ -7887,19 +7772,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[10] * value;
 
     // Constraint: cpu/operands/res.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column7_row12 -
-        (
-            cpu__decode__opcode_rc__bit_5 * (column4_row5 + column4_row13) +
-            cpu__decode__opcode_rc__bit_6 * column7_row4 +
-            cpu__decode__flag_res_op1_0 * column4_row13
-        )
-    ) / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column7_row12 - (cpu__decode__opcode_rc__bit_5 * (column4_row5 + column4_row13) + cpu__decode__opcode_rc__bit_6 * column7_row4 + cpu__decode__flag_res_op1_0 * column4_row13)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[11] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp0.
-    tempvar value = (column7_row2 - cpu__decode__opcode_rc__bit_9 * column4_row9) * domain131 /
-        domain5;
+    tempvar value = (column7_row2 - cpu__decode__opcode_rc__bit_9 * column4_row9) * domain131 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[12] * value;
 
     // Constraint: cpu/update_registers/update_pc/tmp1.
@@ -7907,44 +7784,19 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[13] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_negative.
-    tempvar value = (
-        (1 - cpu__decode__opcode_rc__bit_9) * column4_row16 +
-        column7_row2 * (column4_row16 - (column4_row0 + column4_row13)) -
-        (
-            cpu__decode__flag_pc_update_regular_0 * npc_reg_0 +
-            cpu__decode__opcode_rc__bit_7 * column7_row12 +
-            cpu__decode__opcode_rc__bit_8 * (column4_row0 + column7_row12)
-        )
-    ) * domain131 / domain5;
+    tempvar value = ((1 - cpu__decode__opcode_rc__bit_9) * column4_row16 + column7_row2 * (column4_row16 - (column4_row0 + column4_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column7_row12 + cpu__decode__opcode_rc__bit_8 * (column4_row0 + column7_row12))) * domain131 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[14] * value;
 
     // Constraint: cpu/update_registers/update_pc/pc_cond_positive.
-    tempvar value = (
-        (column7_row10 - cpu__decode__opcode_rc__bit_9) * (column4_row16 - npc_reg_0)
-    ) * domain131 / domain5;
+    tempvar value = ((column7_row10 - cpu__decode__opcode_rc__bit_9) * (column4_row16 - npc_reg_0)) * domain131 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[15] * value;
 
     // Constraint: cpu/update_registers/update_ap/ap_update.
-    tempvar value = (
-        column7_row16 -
-        (
-            column7_row0 +
-            cpu__decode__opcode_rc__bit_10 * column7_row12 +
-            cpu__decode__opcode_rc__bit_11 +
-            cpu__decode__opcode_rc__bit_12 * 2
-        )
-    ) * domain131 / domain5;
+    tempvar value = (column7_row16 - (column7_row0 + cpu__decode__opcode_rc__bit_10 * column7_row12 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2)) * domain131 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[16] * value;
 
     // Constraint: cpu/update_registers/update_fp/fp_update.
-    tempvar value = (
-        column7_row24 -
-        (
-            cpu__decode__fp_update_regular_0 * column7_row8 +
-            cpu__decode__opcode_rc__bit_13 * column4_row9 +
-            cpu__decode__opcode_rc__bit_12 * (column7_row0 + 2)
-        )
-    ) * domain131 / domain5;
+    tempvar value = (column7_row24 - (cpu__decode__fp_update_regular_0 * column7_row8 + cpu__decode__opcode_rc__bit_13 * column4_row9 + cpu__decode__opcode_rc__bit_12 * (column7_row0 + 2))) * domain131 / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[17] * value;
 
     // Constraint: cpu/opcodes/call/push_fp.
@@ -7952,59 +7804,31 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[18] * value;
 
     // Constraint: cpu/opcodes/call/push_pc.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            column4_row5 - (column4_row0 + cpu__decode__opcode_rc__bit_2 + 1)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column4_row5 - (column4_row0 + cpu__decode__opcode_rc__bit_2 + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[19] * value;
 
     // Constraint: cpu/opcodes/call/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column6_row0 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column6_row0 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[20] * value;
 
     // Constraint: cpu/opcodes/call/off1.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (column6_row8 - (global_values.half_offset_size + 1))
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (column6_row8 - (global_values.half_offset_size + 1))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[21] * value;
 
     // Constraint: cpu/opcodes/call/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_12 * (
-            cpu__decode__opcode_rc__bit_12 +
-            cpu__decode__opcode_rc__bit_12 +
-            1 +
-            1 -
-            (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4))) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[22] * value;
 
     // Constraint: cpu/opcodes/ret/off0.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column6_row0 + 2 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column6_row0 + 2 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[23] * value;
 
     // Constraint: cpu/opcodes/ret/off2.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (column6_row4 + 1 - global_values.half_offset_size)
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (column6_row4 + 1 - global_values.half_offset_size)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[24] * value;
 
     // Constraint: cpu/opcodes/ret/flags.
-    tempvar value = (
-        cpu__decode__opcode_rc__bit_13 * (
-            cpu__decode__opcode_rc__bit_7 +
-            cpu__decode__opcode_rc__bit_0 +
-            cpu__decode__opcode_rc__bit_3 +
-            cpu__decode__flag_res_op1_0 -
-            4
-        )
-    ) / domain5;
+    tempvar value = (cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4)) / domain5;
     tempvar total_sum = total_sum + constraint_coefficients[25] * value;
 
     // Constraint: cpu/opcodes/assert_eq/assert_eq.
@@ -8036,53 +7860,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[32] * value;
 
     // Constraint: memory/multi_column_perm/perm/init0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column5_row0 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row1
-            )
-        ) * column10_inter1_row0 +
-        column4_row0 +
-        global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row1 -
-        global_values.memory__multi_column_perm__perm__interaction_elm
-    ) / domain132;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column5_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row1)) * column10_inter1_row0 + column4_row0 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row1 - global_values.memory__multi_column_perm__perm__interaction_elm) / domain132;
     tempvar total_sum = total_sum + constraint_coefficients[33] * value;
 
     // Constraint: memory/multi_column_perm/perm/step0.
-    tempvar value = (
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column5_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row3
-            )
-        ) * column10_inter1_row2 -
-        (
-            global_values.memory__multi_column_perm__perm__interaction_elm -
-            (
-                column4_row2 +
-                global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row3
-            )
-        ) * column10_inter1_row0
-    ) * domain133 / domain1;
+    tempvar value = ((global_values.memory__multi_column_perm__perm__interaction_elm - (column5_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column5_row3)) * column10_inter1_row2 - (global_values.memory__multi_column_perm__perm__interaction_elm - (column4_row2 + global_values.memory__multi_column_perm__hash_interaction_elm0 * column4_row3)) * column10_inter1_row0) * domain133 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[34] * value;
 
     // Constraint: memory/multi_column_perm/perm/last.
-    tempvar value = (
-        column10_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod
-    ) / domain133;
+    tempvar value = (column10_inter1_row0 - global_values.memory__multi_column_perm__perm__public_memory_prod) / domain133;
     tempvar total_sum = total_sum + constraint_coefficients[35] * value;
 
     // Constraint: memory/diff_is_bit.
-    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) *
-        domain133 / domain1;
+    tempvar value = (memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0) * domain133 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[36] * value;
 
     // Constraint: memory/is_func.
-    tempvar value = ((memory__address_diff_0 - 1) * (column5_row1 - column5_row3)) * domain133 /
-        domain1;
+    tempvar value = ((memory__address_diff_0 - 1) * (column5_row1 - column5_row3)) * domain133 / domain1;
     tempvar total_sum = total_sum + constraint_coefficients[37] * value;
 
     // Constraint: memory/initial_addr.
@@ -8098,23 +7892,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[40] * value;
 
     // Constraint: rc16/perm/init0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column6_row2) * column10_inter1_row1 +
-        column6_row0 -
-        global_values.rc16__perm__interaction_elm
-    ) / domain132;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column6_row2) * column10_inter1_row1 + column6_row0 - global_values.rc16__perm__interaction_elm) / domain132;
     tempvar total_sum = total_sum + constraint_coefficients[41] * value;
 
     // Constraint: rc16/perm/step0.
-    tempvar value = (
-        (global_values.rc16__perm__interaction_elm - column6_row6) * column10_inter1_row5 -
-        (global_values.rc16__perm__interaction_elm - column6_row4) * column10_inter1_row1
-    ) * domain134 / domain2;
+    tempvar value = ((global_values.rc16__perm__interaction_elm - column6_row6) * column10_inter1_row5 - (global_values.rc16__perm__interaction_elm - column6_row4) * column10_inter1_row1) * domain134 / domain2;
     tempvar total_sum = total_sum + constraint_coefficients[42] * value;
 
     // Constraint: rc16/perm/last.
-    tempvar value = (column10_inter1_row1 - global_values.rc16__perm__public_memory_prod) /
-        domain134;
+    tempvar value = (column10_inter1_row1 - global_values.rc16__perm__public_memory_prod) / domain134;
     tempvar total_sum = total_sum + constraint_coefficients[43] * value;
 
     // Constraint: rc16/diff_is_bit.
@@ -8130,27 +7916,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[46] * value;
 
     // Constraint: diluted_check/permutation/init0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column2_row0) *
-        column9_inter1_row0 +
-        column1_row0 -
-        global_values.diluted_check__permutation__interaction_elm
-    ) / domain132;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column2_row0) * column9_inter1_row0 + column1_row0 - global_values.diluted_check__permutation__interaction_elm) / domain132;
     tempvar total_sum = total_sum + constraint_coefficients[47] * value;
 
     // Constraint: diluted_check/permutation/step0.
-    tempvar value = (
-        (global_values.diluted_check__permutation__interaction_elm - column2_row1) *
-        column9_inter1_row1 -
-        (global_values.diluted_check__permutation__interaction_elm - column1_row1) *
-        column9_inter1_row0
-    ) * domain135 / domain0;
+    tempvar value = ((global_values.diluted_check__permutation__interaction_elm - column2_row1) * column9_inter1_row1 - (global_values.diluted_check__permutation__interaction_elm - column1_row1) * column9_inter1_row0) * domain135 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[48] * value;
 
     // Constraint: diluted_check/permutation/last.
-    tempvar value = (
-        column9_inter1_row0 - global_values.diluted_check__permutation__public_memory_prod
-    ) / domain135;
+    tempvar value = (column9_inter1_row0 - global_values.diluted_check__permutation__public_memory_prod) / domain135;
     tempvar total_sum = total_sum + constraint_coefficients[49] * value;
 
     // Constraint: diluted_check/init.
@@ -8162,17 +7936,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[51] * value;
 
     // Constraint: diluted_check/step.
-    tempvar value = (
-        column8_inter1_row1 -
-        (
-            column8_inter1_row0 * (
-                1 + global_values.diluted_check__interaction_z * (column2_row1 - column2_row0)
-            ) +
-            global_values.diluted_check__interaction_alpha * (column2_row1 - column2_row0) * (
-                column2_row1 - column2_row0
-            )
-        )
-    ) * domain135 / domain0;
+    tempvar value = (column8_inter1_row1 - (column8_inter1_row0 * (1 + global_values.diluted_check__interaction_z * (column2_row1 - column2_row0)) + global_values.diluted_check__interaction_alpha * (column2_row1 - column2_row0) * (column2_row1 - column2_row0))) * domain135 / domain0;
     tempvar total_sum = total_sum + constraint_coefficients[52] * value;
 
     // Constraint: diluted_check/last.
@@ -8184,18 +7948,11 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[54] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
-    tempvar value = (
-        column3_row20 * (
-            column6_row11 -
-            3138550867693340381917894711603833208051177722232017256448 * column6_row1539
-        )
-    ) / domain12;
+    tempvar value = (column3_row20 * (column6_row11 - 3138550867693340381917894711603833208051177722232017256448 * column6_row1539)) / domain12;
     tempvar total_sum = total_sum + constraint_coefficients[55] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192.
-    tempvar value = (
-        column3_row20 - column6_row2047 * (column6_row1539 - (column6_row1547 + column6_row1547))
-    ) / domain12;
+    tempvar value = (column3_row20 - column6_row2047 * (column6_row1539 - (column6_row1547 + column6_row1547))) / domain12;
     tempvar total_sum = total_sum + constraint_coefficients[56] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
@@ -8203,26 +7960,15 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[57] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196.
-    tempvar value = (
-        column6_row2047 -
-        (column6_row2011 - (column6_row2019 + column6_row2019)) * (
-            column6_row1571 - (column6_row1579 + column6_row1579)
-        )
-    ) / domain12;
+    tempvar value = (column6_row2047 - (column6_row2011 - (column6_row2019 + column6_row2019)) * (column6_row1571 - (column6_row1579 + column6_row1579))) / domain12;
     tempvar total_sum = total_sum + constraint_coefficients[58] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
-    tempvar value = (
-        (column6_row2011 - (column6_row2019 + column6_row2019)) * (
-            column6_row1579 - 18014398509481984 * column6_row2011
-        )
-    ) / domain12;
+    tempvar value = ((column6_row2011 - (column6_row2019 + column6_row2019)) * (column6_row1579 - 18014398509481984 * column6_row2011)) / domain12;
     tempvar total_sum = total_sum + constraint_coefficients[59] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/booleanity_test.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)
-    ) * domain13 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[60] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/bit_extraction_end.
@@ -8234,36 +7980,23 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[62] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/slope.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column6_row5 - global_values.pedersen__points__y) -
-        column6_row7 * (column6_row1 - global_values.pedersen__points__x)
-    ) * domain13 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column6_row5 - global_values.pedersen__points__y) - column6_row7 * (column6_row1 - global_values.pedersen__points__x)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[63] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/x.
-    tempvar value = (
-        column6_row7 * column6_row7 -
-        pedersen__hash0__ec_subset_sum__bit_0 * (
-            column6_row1 + global_values.pedersen__points__x + column6_row9
-        )
-    ) * domain13 / domain3;
+    tempvar value = (column6_row7 * column6_row7 - pedersen__hash0__ec_subset_sum__bit_0 * (column6_row1 + global_values.pedersen__points__x + column6_row9)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[64] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/add_points/y.
-    tempvar value = (
-        pedersen__hash0__ec_subset_sum__bit_0 * (column6_row5 + column6_row13) -
-        column6_row7 * (column6_row1 - column6_row9)
-    ) * domain13 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_0 * (column6_row5 + column6_row13) - column6_row7 * (column6_row1 - column6_row9)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[65] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/x.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column6_row9 - column6_row1)) *
-        domain13 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column6_row9 - column6_row1)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[66] * value;
 
     // Constraint: pedersen/hash0/ec_subset_sum/copy_point/y.
-    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column6_row13 - column6_row5)) *
-        domain13 / domain3;
+    tempvar value = (pedersen__hash0__ec_subset_sum__bit_neg_0 * (column6_row13 - column6_row5)) * domain13 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[67] * value;
 
     // Constraint: pedersen/hash0/copy_point/x.
@@ -8347,9 +8080,7 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[87] * value;
 
     // Constraint: bitwise/addition_is_xor_with_and.
-    tempvar value = (
-        column1_row0 + column1_row64 - (column1_row192 + column1_row128 + column1_row128)
-    ) / domain11;
+    tempvar value = (column1_row0 + column1_row64 - (column1_row192 + column1_row128 + column1_row128)) / domain11;
     tempvar total_sum = total_sum + constraint_coefficients[88] * value;
 
     // Constraint: bitwise/unique_unpacking192.
@@ -8509,222 +8240,119 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[127] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation0.
-    tempvar value = (
-        column3_row16144 - keccak__keccak__parse_to_diluted__sum_words_over_instances0_0
-    ) / domain23;
+    tempvar value = (column3_row16144 - keccak__keccak__parse_to_diluted__sum_words_over_instances0_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[128] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations0.
-    tempvar value = (
-        column3_row16160 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances0_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances0_2
-    ) / domain27;
+    tempvar value = (column3_row16160 + keccak__keccak__parse_to_diluted__sum_words_over_instances0_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances0_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[129] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation1.
-    tempvar value = (
-        column3_row16145 - keccak__keccak__parse_to_diluted__sum_words_over_instances1_0
-    ) / domain23;
+    tempvar value = (column3_row16145 - keccak__keccak__parse_to_diluted__sum_words_over_instances1_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[130] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations1.
-    tempvar value = (
-        column3_row16161 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances1_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances1_2
-    ) / domain27;
+    tempvar value = (column3_row16161 + keccak__keccak__parse_to_diluted__sum_words_over_instances1_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances1_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[131] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation2.
-    tempvar value = (
-        column3_row16146 - keccak__keccak__parse_to_diluted__sum_words_over_instances2_0
-    ) / domain23;
+    tempvar value = (column3_row16146 - keccak__keccak__parse_to_diluted__sum_words_over_instances2_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[132] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations2.
-    tempvar value = (
-        column3_row16162 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances2_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances2_2
-    ) / domain27;
+    tempvar value = (column3_row16162 + keccak__keccak__parse_to_diluted__sum_words_over_instances2_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances2_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[133] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation3.
-    tempvar value = (
-        column3_row16147 - keccak__keccak__parse_to_diluted__sum_words_over_instances3_0
-    ) / domain23;
+    tempvar value = (column3_row16147 - keccak__keccak__parse_to_diluted__sum_words_over_instances3_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[134] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations3.
-    tempvar value = (
-        column3_row16163 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances3_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances3_2
-    ) / domain27;
+    tempvar value = (column3_row16163 + keccak__keccak__parse_to_diluted__sum_words_over_instances3_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances3_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[135] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation4.
-    tempvar value = (
-        column3_row16148 - keccak__keccak__parse_to_diluted__sum_words_over_instances4_0
-    ) / domain23;
+    tempvar value = (column3_row16148 - keccak__keccak__parse_to_diluted__sum_words_over_instances4_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[136] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations4.
-    tempvar value = (
-        column3_row16164 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances4_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances4_2
-    ) / domain27;
+    tempvar value = (column3_row16164 + keccak__keccak__parse_to_diluted__sum_words_over_instances4_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances4_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[137] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation5.
-    tempvar value = (
-        column3_row16149 - keccak__keccak__parse_to_diluted__sum_words_over_instances5_0
-    ) / domain23;
+    tempvar value = (column3_row16149 - keccak__keccak__parse_to_diluted__sum_words_over_instances5_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[138] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations5.
-    tempvar value = (
-        column3_row16165 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances5_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances5_2
-    ) / domain27;
+    tempvar value = (column3_row16165 + keccak__keccak__parse_to_diluted__sum_words_over_instances5_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances5_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[139] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation6.
-    tempvar value = (
-        column3_row16150 - keccak__keccak__parse_to_diluted__sum_words_over_instances6_0
-    ) / domain23;
+    tempvar value = (column3_row16150 - keccak__keccak__parse_to_diluted__sum_words_over_instances6_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[140] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations6.
-    tempvar value = (
-        column3_row16166 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances6_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances6_2
-    ) / domain27;
+    tempvar value = (column3_row16166 + keccak__keccak__parse_to_diluted__sum_words_over_instances6_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances6_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[141] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_first_invocation7.
-    tempvar value = (
-        column3_row16151 - keccak__keccak__parse_to_diluted__sum_words_over_instances7_0
-    ) / domain23;
+    tempvar value = (column3_row16151 - keccak__keccak__parse_to_diluted__sum_words_over_instances7_0) / domain23;
     tempvar total_sum = total_sum + constraint_coefficients[142] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/init_other_invocations7.
-    tempvar value = (
-        column3_row16167 +
-        keccak__keccak__parse_to_diluted__sum_words_over_instances7_0 * 16 -
-        keccak__keccak__parse_to_diluted__sum_words_over_instances7_2
-    ) / domain27;
+    tempvar value = (column3_row16167 + keccak__keccak__parse_to_diluted__sum_words_over_instances7_0 * 16 - keccak__keccak__parse_to_diluted__sum_words_over_instances7_2) / domain27;
     tempvar total_sum = total_sum + constraint_coefficients[143] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/extract_bit_first_invocation1.
-    tempvar value = (
-        keccak__keccak__parse_to_diluted__partial_diluted1_0 *
-        keccak__keccak__parse_to_diluted__partial_diluted1_0 -
-        keccak__keccak__parse_to_diluted__partial_diluted1_0
-    ) / domain31;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted1_0 * keccak__keccak__parse_to_diluted__partial_diluted1_0 - keccak__keccak__parse_to_diluted__partial_diluted1_0) / domain31;
     tempvar total_sum = total_sum + constraint_coefficients[144] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/extract_bit_other_invocations1.
-    tempvar value = (
-        keccak__keccak__parse_to_diluted__bit_other1_0 *
-        keccak__keccak__parse_to_diluted__bit_other1_0 -
-        keccak__keccak__parse_to_diluted__bit_other1_0
-    ) / domain32;
+    tempvar value = (keccak__keccak__parse_to_diluted__bit_other1_0 * keccak__keccak__parse_to_diluted__bit_other1_0 - keccak__keccak__parse_to_diluted__bit_other1_0) / domain32;
     tempvar total_sum = total_sum + constraint_coefficients[145] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/to_diluted0_p1.
-    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted1_30 - column1_row516102) /
-        domain33;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted1_30 - column1_row516102) / domain33;
     tempvar total_sum = total_sum + constraint_coefficients[146] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/to_diluted1_p1.
-    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted1_31 - column1_row516294) /
-        domain33;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted1_31 - column1_row516294) / domain33;
     tempvar total_sum = total_sum + constraint_coefficients[147] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/extract_bit_first_invocation0.
-    tempvar value = (
-        keccak__keccak__parse_to_diluted__partial_diluted0_0 *
-        keccak__keccak__parse_to_diluted__partial_diluted0_0 -
-        keccak__keccak__parse_to_diluted__partial_diluted0_0
-    ) * domain37 / domain10;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted0_0 * keccak__keccak__parse_to_diluted__partial_diluted0_0 - keccak__keccak__parse_to_diluted__partial_diluted0_0) * domain37 / domain10;
     tempvar total_sum = total_sum + constraint_coefficients[148] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/extract_bit_other_invocations0.
-    tempvar value = (
-        keccak__keccak__parse_to_diluted__bit_other0_0 *
-        keccak__keccak__parse_to_diluted__bit_other0_0 -
-        keccak__keccak__parse_to_diluted__bit_other0_0
-    ) * domain40 / domain3;
+    tempvar value = (keccak__keccak__parse_to_diluted__bit_other0_0 * keccak__keccak__parse_to_diluted__bit_other0_0 - keccak__keccak__parse_to_diluted__bit_other0_0) * domain40 / domain3;
     tempvar total_sum = total_sum + constraint_coefficients[149] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/to_diluted0_p0.
-    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted0_30 - column1_row6) *
-        domain41 / domain9;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted0_30 - column1_row6) * domain41 / domain9;
     tempvar total_sum = total_sum + constraint_coefficients[150] * value;
 
     // Constraint: keccak/keccak/parse_to_diluted/to_diluted1_p0.
-    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted0_31 - column1_row198) *
-        domain41 / domain9;
+    tempvar value = (keccak__keccak__parse_to_diluted__partial_diluted0_31 - column1_row198) * domain41 / domain9;
     tempvar total_sum = total_sum + constraint_coefficients[151] * value;
 
     // Constraint: keccak/keccak/parity0.
-    tempvar value = (
-        column1_row6 +
-        column1_row1286 +
-        column1_row2566 +
-        column1_row3846 +
-        column1_row5126 -
-        (column1_row6406 + column1_row6597 + column1_row6597 + column1_row6977 * 4)
-    ) / domain18;
+    tempvar value = (column1_row6 + column1_row1286 + column1_row2566 + column1_row3846 + column1_row5126 - (column1_row6406 + column1_row6597 + column1_row6597 + column1_row6977 * 4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[152] * value;
 
     // Constraint: keccak/keccak/parity1.
-    tempvar value = (
-        column1_row262 +
-        column1_row1542 +
-        column1_row2822 +
-        column1_row4102 +
-        column1_row5382 -
-        (column1_row6401 + column1_row6790 + column1_row6790 + column1_row6981 * 4)
-    ) / domain18;
+    tempvar value = (column1_row262 + column1_row1542 + column1_row2822 + column1_row4102 + column1_row5382 - (column1_row6401 + column1_row6790 + column1_row6790 + column1_row6981 * 4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[153] * value;
 
     // Constraint: keccak/keccak/parity2.
-    tempvar value = (
-        column1_row518 +
-        column1_row1798 +
-        column1_row3078 +
-        column1_row4358 +
-        column1_row5638 -
-        (column1_row6405 + column1_row6785 + column1_row6785 + column1_row7174 * 4)
-    ) / domain18;
+    tempvar value = (column1_row518 + column1_row1798 + column1_row3078 + column1_row4358 + column1_row5638 - (column1_row6405 + column1_row6785 + column1_row6785 + column1_row7174 * 4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[154] * value;
 
     // Constraint: keccak/keccak/parity3.
-    tempvar value = (
-        column1_row774 +
-        column1_row2054 +
-        column1_row3334 +
-        column1_row4614 +
-        column1_row5894 -
-        (column1_row6598 + column1_row6789 + column1_row6789 + column1_row7169 * 4)
-    ) / domain18;
+    tempvar value = (column1_row774 + column1_row2054 + column1_row3334 + column1_row4614 + column1_row5894 - (column1_row6598 + column1_row6789 + column1_row6789 + column1_row7169 * 4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[155] * value;
 
     // Constraint: keccak/keccak/parity4.
-    tempvar value = (
-        column1_row1030 +
-        column1_row2310 +
-        column1_row3590 +
-        column1_row4870 +
-        column1_row6150 -
-        (column1_row6593 + column1_row6982 + column1_row6982 + column1_row7173 * 4)
-    ) / domain18;
+    tempvar value = (column1_row1030 + column1_row2310 + column1_row3590 + column1_row4870 + column1_row6150 - (column1_row6593 + column1_row6982 + column1_row6982 + column1_row7173 * 4)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[156] * value;
 
     // Constraint: keccak/keccak/rotate_parity0/n0.
@@ -8768,630 +8396,303 @@ func eval_composition_polynomial{range_check_ptr}(
     tempvar total_sum = total_sum + constraint_coefficients[166] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j0.
-    tempvar value = (
-        keccak__keccak__sum_parities0_0 +
-        column1_row6 -
-        (column1_row3 + column1_row7366 + column1_row7366)
-    ) / domain18;
+    tempvar value = (keccak__keccak__sum_parities0_0 + column1_row6 - (column1_row3 + column1_row7366 + column1_row7366)) / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[167] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j1/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities1_0 +
-        column1_row262 -
-        (column1_row10755 + column1_row15941 + column1_row15941)
-    ) * domain43 / domain18;
+    tempvar value = (keccak__keccak__sum_parities1_0 + column1_row262 - (column1_row10755 + column1_row15941 + column1_row15941)) * domain43 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[168] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j1/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities1_64512 +
-        column1_row516358 -
-        (column1_row2563 + column1_row7749 + column1_row7749)
-    ) / domain26;
+    tempvar value = (keccak__keccak__sum_parities1_64512 + column1_row516358 - (column1_row2563 + column1_row7749 + column1_row7749)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[169] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j2/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities2_0 +
-        column1_row518 -
-        (column1_row513027 + column1_row515843 + column1_row515843)
-    ) / domain45;
+    tempvar value = (keccak__keccak__sum_parities2_0 + column1_row518 - (column1_row513027 + column1_row515843 + column1_row515843)) / domain45;
     tempvar total_sum = total_sum + constraint_coefficients[170] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j2/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities2_2048 +
-        column1_row16902 -
-        (column1_row5123 + column1_row7939 + column1_row7939)
-    ) * domain47 / domain18;
+    tempvar value = (keccak__keccak__sum_parities2_2048 + column1_row16902 - (column1_row5123 + column1_row7939 + column1_row7939)) * domain47 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[171] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j3/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities3_0 +
-        column1_row774 -
-        (column1_row230659 + column1_row236929 + column1_row236929)
-    ) * domain73 / domain18;
+    tempvar value = (keccak__keccak__sum_parities3_0 + column1_row774 - (column1_row230659 + column1_row236929 + column1_row236929)) * domain73 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[172] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j3/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities3_36864 +
-        column1_row295686 -
-        (column1_row1283 + column1_row7553 + column1_row7553)
-    ) / domain105;
+    tempvar value = (keccak__keccak__sum_parities3_36864 + column1_row295686 - (column1_row1283 + column1_row7553 + column1_row7553)) / domain105;
     tempvar total_sum = total_sum + constraint_coefficients[173] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j4/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities4_0 +
-        column1_row1030 -
-        (column1_row225027 + column1_row228163 + column1_row228163)
-    ) * domain72 / domain18;
+    tempvar value = (keccak__keccak__sum_parities4_0 + column1_row1030 - (column1_row225027 + column1_row228163 + column1_row228163)) * domain72 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[174] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i0_j4/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities4_37888 +
-        column1_row304134 -
-        (column1_row3843 + column1_row6979 + column1_row6979)
-    ) / domain104;
+    tempvar value = (keccak__keccak__sum_parities4_37888 + column1_row304134 - (column1_row3843 + column1_row6979 + column1_row6979)) / domain104;
     tempvar total_sum = total_sum + constraint_coefficients[175] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j0/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities0_0 +
-        column1_row1286 -
-        (column1_row299011 + column1_row302083 + column1_row302083)
-    ) / domain105;
+    tempvar value = (keccak__keccak__sum_parities0_0 + column1_row1286 - (column1_row299011 + column1_row302083 + column1_row302083)) / domain105;
     tempvar total_sum = total_sum + constraint_coefficients[176] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j0/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities0_28672 +
-        column1_row230662 -
-        (column1_row4099 + column1_row7171 + column1_row7171)
-    ) * domain73 / domain18;
+    tempvar value = (keccak__keccak__sum_parities0_28672 + column1_row230662 - (column1_row4099 + column1_row7171 + column1_row7171)) * domain73 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[177] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j1/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities1_0 +
-        column1_row1542 -
-        (column1_row360707 + column1_row367809 + column1_row367809)
-    ) / domain98;
+    tempvar value = (keccak__keccak__sum_parities1_0 + column1_row1542 - (column1_row360707 + column1_row367809 + column1_row367809)) / domain98;
     tempvar total_sum = total_sum + constraint_coefficients[178] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j1/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities1_20480 +
-        column1_row165382 -
-        (column1_row259 + column1_row7361 + column1_row7361)
-    ) * domain66 / domain18;
+    tempvar value = (keccak__keccak__sum_parities1_20480 + column1_row165382 - (column1_row259 + column1_row7361 + column1_row7361)) * domain66 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[179] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j2/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities2_0 +
-        column1_row1798 -
-        (column1_row51971 + column1_row55939 + column1_row55939)
-    ) * domain51 / domain18;
+    tempvar value = (keccak__keccak__sum_parities2_0 + column1_row1798 - (column1_row51971 + column1_row55939 + column1_row55939)) * domain51 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[180] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j2/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities2_59392 +
-        column1_row476934 -
-        (column1_row2819 + column1_row6787 + column1_row6787)
-    ) / domain79;
+    tempvar value = (keccak__keccak__sum_parities2_59392 + column1_row476934 - (column1_row2819 + column1_row6787 + column1_row6787)) / domain79;
     tempvar total_sum = total_sum + constraint_coefficients[181] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities3_0 +
-        column1_row2054 -
-        (column1_row455939 + column1_row450755 + column1_row450755)
-    ) / domain108;
+    tempvar value = (keccak__keccak__sum_parities3_0 + column1_row2054 - (column1_row455939 + column1_row450755 + column1_row450755)) / domain108;
     tempvar total_sum = total_sum + constraint_coefficients[182] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities3_8 +
-        column1_row2118 -
-        (column1_row456003 + column1_row451011 + column1_row451011)
-    ) / domain108;
+    tempvar value = (keccak__keccak__sum_parities3_8 + column1_row2118 - (column1_row456003 + column1_row451011 + column1_row451011)) / domain108;
     tempvar total_sum = total_sum + constraint_coefficients[183] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n2.
-    tempvar value = (
-        keccak__keccak__sum_parities3_16 +
-        column1_row2182 -
-        (column1_row456067 + column1_row451267 + column1_row451267)
-    ) / domain108;
+    tempvar value = (keccak__keccak__sum_parities3_16 + column1_row2182 - (column1_row456067 + column1_row451267 + column1_row451267)) / domain108;
     tempvar total_sum = total_sum + constraint_coefficients[184] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n3.
-    tempvar value = (
-        keccak__keccak__sum_parities3_9216 +
-        column1_row75782 -
-        (column1_row5379 + column1_row195 + column1_row195)
-    ) * domain111 / domain17;
+    tempvar value = (keccak__keccak__sum_parities3_9216 + column1_row75782 - (column1_row5379 + column1_row195 + column1_row195)) * domain111 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[185] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n4.
-    tempvar value = (
-        keccak__keccak__sum_parities3_9224 +
-        column1_row75846 -
-        (column1_row5443 + column1_row451 + column1_row451)
-    ) * domain111 / domain17;
+    tempvar value = (keccak__keccak__sum_parities3_9224 + column1_row75846 - (column1_row5443 + column1_row451 + column1_row451)) * domain111 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[186] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j3/n5.
-    tempvar value = (
-        keccak__keccak__sum_parities3_9232 +
-        column1_row75910 -
-        (column1_row5507 + column1_row707 + column1_row707)
-    ) * domain111 / domain17;
+    tempvar value = (keccak__keccak__sum_parities3_9232 + column1_row75910 - (column1_row5507 + column1_row707 + column1_row707)) * domain111 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[187] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j4/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities4_0 +
-        column1_row2310 -
-        (column1_row165379 + column1_row171397 + column1_row171397)
-    ) * domain66 / domain18;
+    tempvar value = (keccak__keccak__sum_parities4_0 + column1_row2310 - (column1_row165379 + column1_row171397 + column1_row171397)) * domain66 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[188] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i1_j4/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities4_45056 +
-        column1_row362758 -
-        (column1_row1539 + column1_row7557 + column1_row7557)
-    ) / domain98;
+    tempvar value = (keccak__keccak__sum_parities4_45056 + column1_row362758 - (column1_row1539 + column1_row7557 + column1_row7557)) / domain98;
     tempvar total_sum = total_sum + constraint_coefficients[189] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j0/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities0_0 +
-        column1_row2566 -
-        (column1_row26371 + column1_row31171 + column1_row31171)
-    ) * domain112 / domain18;
+    tempvar value = (keccak__keccak__sum_parities0_0 + column1_row2566 - (column1_row26371 + column1_row31171 + column1_row31171)) * domain112 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[190] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j0/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities0_62464 +
-        column1_row502278 -
-        (column1_row1795 + column1_row6595 + column1_row6595)
-    ) / domain113;
+    tempvar value = (keccak__keccak__sum_parities0_62464 + column1_row502278 - (column1_row1795 + column1_row6595 + column1_row6595)) / domain113;
     tempvar total_sum = total_sum + constraint_coefficients[191] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j1/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities1_0 +
-        column1_row2822 -
-        (column1_row86275 + column1_row89283 + column1_row89283)
-    ) * domain56 / domain18;
+    tempvar value = (keccak__keccak__sum_parities1_0 + column1_row2822 - (column1_row86275 + column1_row89283 + column1_row89283)) * domain56 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[192] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j1/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities1_55296 +
-        column1_row445190 -
-        (column1_row4355 + column1_row7363 + column1_row7363)
-    ) / domain86;
+    tempvar value = (keccak__keccak__sum_parities1_55296 + column1_row445190 - (column1_row4355 + column1_row7363 + column1_row7363)) / domain86;
     tempvar total_sum = total_sum + constraint_coefficients[193] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j2/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities2_0 +
-        column1_row3078 -
-        (column1_row352771 + column1_row359621 + column1_row359621)
-    ) / domain100;
+    tempvar value = (keccak__keccak__sum_parities2_0 + column1_row3078 - (column1_row352771 + column1_row359621 + column1_row359621)) / domain100;
     tempvar total_sum = total_sum + constraint_coefficients[194] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j2/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities2_21504 +
-        column1_row175110 -
-        (column1_row515 + column1_row7365 + column1_row7365)
-    ) * domain68 / domain18;
+    tempvar value = (keccak__keccak__sum_parities2_21504 + column1_row175110 - (column1_row515 + column1_row7365 + column1_row7365)) * domain68 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[195] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j3/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities3_0 +
-        column1_row3334 -
-        (column1_row207875 + column1_row212742 + column1_row212742)
-    ) * domain71 / domain18;
+    tempvar value = (keccak__keccak__sum_parities3_0 + column1_row3334 - (column1_row207875 + column1_row212742 + column1_row212742)) * domain71 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[196] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j3/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities3_39936 +
-        column1_row322822 -
-        (column1_row3075 + column1_row7942 + column1_row7942)
-    ) / domain103;
+    tempvar value = (keccak__keccak__sum_parities3_39936 + column1_row322822 - (column1_row3075 + column1_row7942 + column1_row7942)) / domain103;
     tempvar total_sum = total_sum + constraint_coefficients[197] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities4_0 +
-        column1_row3590 -
-        (column1_row325123 + column1_row320451 + column1_row320451)
-    ) / domain115;
+    tempvar value = (keccak__keccak__sum_parities4_0 + column1_row3590 - (column1_row325123 + column1_row320451 + column1_row320451)) / domain115;
     tempvar total_sum = total_sum + constraint_coefficients[198] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities4_8 +
-        column1_row3654 -
-        (column1_row325187 + column1_row320707 + column1_row320707)
-    ) / domain115;
+    tempvar value = (keccak__keccak__sum_parities4_8 + column1_row3654 - (column1_row325187 + column1_row320707 + column1_row320707)) / domain115;
     tempvar total_sum = total_sum + constraint_coefficients[199] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n2.
-    tempvar value = (
-        keccak__keccak__sum_parities4_16 +
-        column1_row3718 -
-        (column1_row325251 + column1_row320963 + column1_row320963)
-    ) / domain115;
+    tempvar value = (keccak__keccak__sum_parities4_16 + column1_row3718 - (column1_row325251 + column1_row320963 + column1_row320963)) / domain115;
     tempvar total_sum = total_sum + constraint_coefficients[200] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n3.
-    tempvar value = (
-        keccak__keccak__sum_parities4_25600 +
-        column1_row208390 -
-        (column1_row5635 + column1_row963 + column1_row963)
-    ) * domain117 / domain17;
+    tempvar value = (keccak__keccak__sum_parities4_25600 + column1_row208390 - (column1_row5635 + column1_row963 + column1_row963)) * domain117 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[201] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n4.
-    tempvar value = (
-        keccak__keccak__sum_parities4_25608 +
-        column1_row208454 -
-        (column1_row5699 + column1_row1219 + column1_row1219)
-    ) * domain117 / domain17;
+    tempvar value = (keccak__keccak__sum_parities4_25608 + column1_row208454 - (column1_row5699 + column1_row1219 + column1_row1219)) * domain117 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[202] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i2_j4/n5.
-    tempvar value = (
-        keccak__keccak__sum_parities4_25616 +
-        column1_row208518 -
-        (column1_row5763 + column1_row1475 + column1_row1475)
-    ) * domain117 / domain17;
+    tempvar value = (keccak__keccak__sum_parities4_25616 + column1_row208518 - (column1_row5763 + column1_row1475 + column1_row1475)) * domain117 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[203] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities0_0 +
-        column1_row3846 -
-        (column1_row341763 + column1_row337603 + column1_row337603)
-    ) / domain118;
+    tempvar value = (keccak__keccak__sum_parities0_0 + column1_row3846 - (column1_row341763 + column1_row337603 + column1_row337603)) / domain118;
     tempvar total_sum = total_sum + constraint_coefficients[204] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities0_8 +
-        column1_row3910 -
-        (column1_row341827 + column1_row337859 + column1_row337859)
-    ) / domain118;
+    tempvar value = (keccak__keccak__sum_parities0_8 + column1_row3910 - (column1_row341827 + column1_row337859 + column1_row337859)) / domain118;
     tempvar total_sum = total_sum + constraint_coefficients[205] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n2.
-    tempvar value = (
-        keccak__keccak__sum_parities0_16 +
-        column1_row3974 -
-        (column1_row341891 + column1_row338115 + column1_row338115)
-    ) / domain118;
+    tempvar value = (keccak__keccak__sum_parities0_16 + column1_row3974 - (column1_row341891 + column1_row338115 + column1_row338115)) / domain118;
     tempvar total_sum = total_sum + constraint_coefficients[206] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n3.
-    tempvar value = (
-        keccak__keccak__sum_parities0_23552 +
-        column1_row192262 -
-        (column1_row5891 + column1_row1731 + column1_row1731)
-    ) * domain119 / domain17;
+    tempvar value = (keccak__keccak__sum_parities0_23552 + column1_row192262 - (column1_row5891 + column1_row1731 + column1_row1731)) * domain119 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[207] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n4.
-    tempvar value = (
-        keccak__keccak__sum_parities0_23560 +
-        column1_row192326 -
-        (column1_row5955 + column1_row1987 + column1_row1987)
-    ) * domain119 / domain17;
+    tempvar value = (keccak__keccak__sum_parities0_23560 + column1_row192326 - (column1_row5955 + column1_row1987 + column1_row1987)) * domain119 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[208] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j0/n5.
-    tempvar value = (
-        keccak__keccak__sum_parities0_23568 +
-        column1_row192390 -
-        (column1_row6019 + column1_row2243 + column1_row2243)
-    ) * domain119 / domain17;
+    tempvar value = (keccak__keccak__sum_parities0_23568 + column1_row192390 - (column1_row6019 + column1_row2243 + column1_row2243)) * domain119 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[209] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j1/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities1_0 +
-        column1_row4102 -
-        (column1_row370691 + column1_row376390 + column1_row376390)
-    ) / domain120;
+    tempvar value = (keccak__keccak__sum_parities1_0 + column1_row4102 - (column1_row370691 + column1_row376390 + column1_row376390)) / domain120;
     tempvar total_sum = total_sum + constraint_coefficients[210] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j1/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities1_19456 +
-        column1_row159750 -
-        (column1_row2051 + column1_row7750 + column1_row7750)
-    ) * domain121 / domain18;
+    tempvar value = (keccak__keccak__sum_parities1_19456 + column1_row159750 - (column1_row2051 + column1_row7750 + column1_row7750)) * domain121 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[211] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j2/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities2_0 +
-        column1_row4358 -
-        (column1_row127491 + column1_row130435 + column1_row130435)
-    ) * domain122 / domain18;
+    tempvar value = (keccak__keccak__sum_parities2_0 + column1_row4358 - (column1_row127491 + column1_row130435 + column1_row130435)) * domain122 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[212] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j2/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities2_50176 +
-        column1_row405766 -
-        (column1_row4611 + column1_row7555 + column1_row7555)
-    ) / domain123;
+    tempvar value = (keccak__keccak__sum_parities2_50176 + column1_row405766 - (column1_row4611 + column1_row7555 + column1_row7555)) / domain123;
     tempvar total_sum = total_sum + constraint_coefficients[213] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j3/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities3_0 +
-        column1_row4614 -
-        (column1_row172803 + column1_row178435 + column1_row178435)
-    ) * domain68 / domain18;
+    tempvar value = (keccak__keccak__sum_parities3_0 + column1_row4614 - (column1_row172803 + column1_row178435 + column1_row178435)) * domain68 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[214] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j3/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities3_44032 +
-        column1_row356870 -
-        (column1_row771 + column1_row6403 + column1_row6403)
-    ) / domain100;
+    tempvar value = (keccak__keccak__sum_parities3_44032 + column1_row356870 - (column1_row771 + column1_row6403 + column1_row6403)) / domain100;
     tempvar total_sum = total_sum + constraint_coefficients[215] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j4/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities4_0 +
-        column1_row4870 -
-        (column1_row68867 + column1_row73473 + column1_row73473)
-    ) * domain124 / domain18;
+    tempvar value = (keccak__keccak__sum_parities4_0 + column1_row4870 - (column1_row68867 + column1_row73473 + column1_row73473)) * domain124 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[216] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i3_j4/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities4_57344 +
-        column1_row463622 -
-        (column1_row3331 + column1_row7937 + column1_row7937)
-    ) / domain125;
+    tempvar value = (keccak__keccak__sum_parities4_57344 + column1_row463622 - (column1_row3331 + column1_row7937 + column1_row7937)) / domain125;
     tempvar total_sum = total_sum + constraint_coefficients[217] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j0/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities0_0 +
-        column1_row5126 -
-        (column1_row151043 + column1_row155397 + column1_row155397)
-    ) * domain126 / domain18;
+    tempvar value = (keccak__keccak__sum_parities0_0 + column1_row5126 - (column1_row151043 + column1_row155397 + column1_row155397)) * domain126 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[218] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j0/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities0_47104 +
-        column1_row381958 -
-        (column1_row3587 + column1_row7941 + column1_row7941)
-    ) / domain127;
+    tempvar value = (keccak__keccak__sum_parities0_47104 + column1_row381958 - (column1_row3587 + column1_row7941 + column1_row7941)) / domain127;
     tempvar total_sum = total_sum + constraint_coefficients[219] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities1_0 +
-        column1_row5382 -
-        (column1_row22531 + column1_row18883 + column1_row18883)
-    ) * domain109 / domain17;
+    tempvar value = (keccak__keccak__sum_parities1_0 + column1_row5382 - (column1_row22531 + column1_row18883 + column1_row18883)) * domain109 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[220] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities1_8 +
-        column1_row5446 -
-        (column1_row22595 + column1_row19139 + column1_row19139)
-    ) * domain109 / domain17;
+    tempvar value = (keccak__keccak__sum_parities1_8 + column1_row5446 - (column1_row22595 + column1_row19139 + column1_row19139)) * domain109 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[221] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n2.
-    tempvar value = (
-        keccak__keccak__sum_parities1_16 +
-        column1_row5510 -
-        (column1_row22659 + column1_row19395 + column1_row19395)
-    ) * domain109 / domain17;
+    tempvar value = (keccak__keccak__sum_parities1_16 + column1_row5510 - (column1_row22659 + column1_row19395 + column1_row19395)) * domain109 / domain17;
     tempvar total_sum = total_sum + constraint_coefficients[222] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n3.
-    tempvar value = (
-        keccak__keccak__sum_parities1_63488 +
-        column1_row513286 -
-        (column1_row6147 + column1_row2499 + column1_row2499)
-    ) / domain106;
+    tempvar value = (keccak__keccak__sum_parities1_63488 + column1_row513286 - (column1_row6147 + column1_row2499 + column1_row2499)) / domain106;
     tempvar total_sum = total_sum + constraint_coefficients[223] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n4.
-    tempvar value = (
-        keccak__keccak__sum_parities1_63496 +
-        column1_row513350 -
-        (column1_row6211 + column1_row2755 + column1_row2755)
-    ) / domain106;
+    tempvar value = (keccak__keccak__sum_parities1_63496 + column1_row513350 - (column1_row6211 + column1_row2755 + column1_row2755)) / domain106;
     tempvar total_sum = total_sum + constraint_coefficients[224] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j1/n5.
-    tempvar value = (
-        keccak__keccak__sum_parities1_63504 +
-        column1_row513414 -
-        (column1_row6275 + column1_row3011 + column1_row3011)
-    ) / domain106;
+    tempvar value = (keccak__keccak__sum_parities1_63504 + column1_row513414 - (column1_row6275 + column1_row3011 + column1_row3011)) / domain106;
     tempvar total_sum = total_sum + constraint_coefficients[225] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j2/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities2_0 +
-        column1_row5638 -
-        (column1_row502019 + column1_row507457 + column1_row507457)
-    ) / domain113;
+    tempvar value = (keccak__keccak__sum_parities2_0 + column1_row5638 - (column1_row502019 + column1_row507457 + column1_row507457)) / domain113;
     tempvar total_sum = total_sum + constraint_coefficients[226] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j2/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities2_3072 +
-        column1_row30214 -
-        (column1_row2307 + column1_row7745 + column1_row7745)
-    ) * domain112 / domain18;
+    tempvar value = (keccak__keccak__sum_parities2_3072 + column1_row30214 - (column1_row2307 + column1_row7745 + column1_row7745)) * domain112 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[227] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j3/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities3_0 +
-        column1_row5894 -
-        (column1_row463619 + column1_row466499 + column1_row466499)
-    ) / domain125;
+    tempvar value = (keccak__keccak__sum_parities3_0 + column1_row5894 - (column1_row463619 + column1_row466499 + column1_row466499)) / domain125;
     tempvar total_sum = total_sum + constraint_coefficients[228] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j3/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities3_8192 +
-        column1_row71430 -
-        (column1_row4867 + column1_row7747 + column1_row7747)
-    ) * domain124 / domain18;
+    tempvar value = (keccak__keccak__sum_parities3_8192 + column1_row71430 - (column1_row4867 + column1_row7747 + column1_row7747)) * domain124 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[229] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j4/n0.
-    tempvar value = (
-        keccak__keccak__sum_parities4_0 +
-        column1_row6150 -
-        (column1_row115715 + column1_row122246 + column1_row122246)
-    ) * domain128 / domain18;
+    tempvar value = (keccak__keccak__sum_parities4_0 + column1_row6150 - (column1_row115715 + column1_row122246 + column1_row122246)) * domain128 / domain18;
     tempvar total_sum = total_sum + constraint_coefficients[230] * value;
 
     // Constraint: keccak/keccak/theta_rho_pi_i4_j4/n1.
-    tempvar value = (
-        keccak__keccak__sum_parities4_51200 +
-        column1_row415750 -
-        (column1_row1027 + column1_row7558 + column1_row7558)
-    ) / domain129;
+    tempvar value = (keccak__keccak__sum_parities4_51200 + column1_row415750 - (column1_row1027 + column1_row7558 + column1_row7558)) / domain129;
     tempvar total_sum = total_sum + constraint_coefficients[231] * value;
 
     // Constraint: keccak/keccak/chi_iota0.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key0 +
-        column1_row3 +
-        column1_row3 +
-        keccak__keccak__after_theta_rho_pi_xor_one_32 +
-        column1_row515 -
-        (column1_row1 + column1_row14 + column1_row14 + column1_row5 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key0 + column1_row3 + column1_row3 + keccak__keccak__after_theta_rho_pi_xor_one_32 + column1_row515 - (column1_row1 + column1_row14 + column1_row14 + column1_row5 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[232] * value;
 
     // Constraint: keccak/keccak/chi_iota1.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key1 +
-        column1_row8195 +
-        column1_row8195 +
-        keccak__keccak__after_theta_rho_pi_xor_one_1056 +
-        column1_row8707 -
-        (column1_row8193 + column1_row8206 + column1_row8206 + column1_row8197 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key1 + column1_row8195 + column1_row8195 + keccak__keccak__after_theta_rho_pi_xor_one_1056 + column1_row8707 - (column1_row8193 + column1_row8206 + column1_row8206 + column1_row8197 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[233] * value;
 
     // Constraint: keccak/keccak/chi_iota3.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key3 +
-        column1_row24579 +
-        column1_row24579 +
-        keccak__keccak__after_theta_rho_pi_xor_one_3104 +
-        column1_row25091 -
-        (column1_row24577 + column1_row24590 + column1_row24590 + column1_row24581 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key3 + column1_row24579 + column1_row24579 + keccak__keccak__after_theta_rho_pi_xor_one_3104 + column1_row25091 - (column1_row24577 + column1_row24590 + column1_row24590 + column1_row24581 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[234] * value;
 
     // Constraint: keccak/keccak/chi_iota7.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key7 +
-        column1_row57347 +
-        column1_row57347 +
-        keccak__keccak__after_theta_rho_pi_xor_one_7200 +
-        column1_row57859 -
-        (column1_row57345 + column1_row57358 + column1_row57358 + column1_row57349 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key7 + column1_row57347 + column1_row57347 + keccak__keccak__after_theta_rho_pi_xor_one_7200 + column1_row57859 - (column1_row57345 + column1_row57358 + column1_row57358 + column1_row57349 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[235] * value;
 
     // Constraint: keccak/keccak/chi_iota15.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key15 +
-        column1_row122883 +
-        column1_row122883 +
-        keccak__keccak__after_theta_rho_pi_xor_one_15392 +
-        column1_row123395 -
-        (column1_row122881 + column1_row122894 + column1_row122894 + column1_row122885 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key15 + column1_row122883 + column1_row122883 + keccak__keccak__after_theta_rho_pi_xor_one_15392 + column1_row123395 - (column1_row122881 + column1_row122894 + column1_row122894 + column1_row122885 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[236] * value;
 
     // Constraint: keccak/keccak/chi_iota31.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key31 +
-        column1_row253955 +
-        column1_row253955 +
-        keccak__keccak__after_theta_rho_pi_xor_one_31776 +
-        column1_row254467 -
-        (column1_row253953 + column1_row253966 + column1_row253966 + column1_row253957 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key31 + column1_row253955 + column1_row253955 + keccak__keccak__after_theta_rho_pi_xor_one_31776 + column1_row254467 - (column1_row253953 + column1_row253966 + column1_row253966 + column1_row253957 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[237] * value;
 
     // Constraint: keccak/keccak/chi_iota63.
-    tempvar value = (
-        global_values.keccak__keccak__keccak_round_key63 +
-        column1_row516099 +
-        column1_row516099 +
-        keccak__keccak__after_theta_rho_pi_xor_one_64544 +
-        column1_row516611 -
-        (column1_row516097 + column1_row516110 + column1_row516110 + column1_row516101 * 4)
-    ) / domain26;
+    tempvar value = (global_values.keccak__keccak__keccak_round_key63 + column1_row516099 + column1_row516099 + keccak__keccak__after_theta_rho_pi_xor_one_64544 + column1_row516611 - (column1_row516097 + column1_row516110 + column1_row516110 + column1_row516101 * 4)) / domain26;
     tempvar total_sum = total_sum + constraint_coefficients[238] * value;
 
     // Constraint: keccak/keccak/chi0.
-    tempvar value = (
-        column1_row3 +
-        column1_row3 +
-        keccak__keccak__after_theta_rho_pi_xor_one_32 +
-        column1_row515 -
-        (column1_row1 + column1_row14 + column1_row14 + column1_row5 * 4)
-    ) * domain130 / domain20;
+    tempvar value = (column1_row3 + column1_row3 + keccak__keccak__after_theta_rho_pi_xor_one_32 + column1_row515 - (column1_row1 + column1_row14 + column1_row14 + column1_row5 * 4)) * domain130 / domain20;
     tempvar total_sum = total_sum + constraint_coefficients[239] * value;
 
     // Constraint: keccak/keccak/chi1.
-    tempvar value = (
-        column1_row1027 +
-        column1_row1027 +
-        keccak__keccak__after_theta_rho_pi_xor_one_0 +
-        column1_row259 -
-        (column1_row1025 + column1_row1038 + column1_row1038 + column1_row1029 * 4)
-    ) / domain19;
+    tempvar value = (column1_row1027 + column1_row1027 + keccak__keccak__after_theta_rho_pi_xor_one_0 + column1_row259 - (column1_row1025 + column1_row1038 + column1_row1038 + column1_row1029 * 4)) / domain19;
     tempvar total_sum = total_sum + constraint_coefficients[240] * value;
 
     // Constraint: keccak/keccak/chi2.
-    tempvar value = (
-        column1_row771 +
-        column1_row771 +
-        keccak__keccak__after_theta_rho_pi_xor_one_128 +
-        column1_row3 -
-        (column1_row769 + column1_row782 + column1_row782 + column1_row773 * 4)
-    ) / domain19;
+    tempvar value = (column1_row771 + column1_row771 + keccak__keccak__after_theta_rho_pi_xor_one_128 + column1_row3 - (column1_row769 + column1_row782 + column1_row782 + column1_row773 * 4)) / domain19;
     tempvar total_sum = total_sum + constraint_coefficients[241] * value;
 
     return (res=total_sum);
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/recursive/composition.cairo b/src/starkware/cairo/stark_verifier/air/layouts/recursive/composition.cairo
index 8f471f2..379a5aa 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/recursive/composition.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/recursive/composition.cairo
@@ -78,8 +78,7 @@ func traces_eval_composition_polynomial{range_check_ptr}(
     // Periodic columns.
     let (n_steps) = pow(2, public_input.log_n_steps);
     tempvar n_pedersen_hash_copies = n_steps / (
-        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS
-    );
+        PEDERSEN_BUILTIN_RATIO * PEDERSEN_BUILTIN_REPETITIONS);
     assert_nn(n_pedersen_hash_copies);
     let (pedersen_point) = pow(point, n_pedersen_hash_copies);
     let (pedersen__points__x) = eval_pedersen_x(pedersen_point);
@@ -132,16 +131,14 @@ func traces_eval_composition_polynomial{range_check_ptr}(
         memory__multi_column_perm__hash_interaction_elm0=memory_alpha,
         rc16__perm__interaction_elm=interaction_elements.rc16__perm__interaction_elm,
         diluted_check__permutation__interaction_elm=(
-            interaction_elements.diluted_check__permutation__interaction_elm
-        ),
+            interaction_elements.diluted_check__permutation__interaction_elm),
         diluted_check__interaction_z=diluted_z,
         diluted_check__interaction_alpha=diluted_alpha,
         memory__multi_column_perm__perm__public_memory_prod=public_memory_prod_ratio,
         rc16__perm__public_memory_prod=1,
         diluted_check__first_elm=0,
         diluted_check__permutation__public_memory_prod=1,
-        diluted_check__final_cum_val=diluted_prod,
-    );
+        diluted_check__final_cum_val=diluted_prod);
 
     return eval_composition_polynomial(
         mask_values=mask_values,
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/recursive/public_verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/recursive/public_verify.cairo
index 7342bc2..e63f8e7 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/recursive/public_verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/recursive/public_verify.cairo
@@ -82,38 +82,33 @@ func public_input_validate{range_check_ptr}(
     // Segments.
     tempvar n_output_uses = (
         public_input.segments[segments.OUTPUT].stop_ptr -
-        public_input.segments[segments.OUTPUT].begin_addr
-    );
+        public_input.segments[segments.OUTPUT].begin_addr);
     assert_nn(n_output_uses);
 
     assert public_input.n_segments = segments.N_SEGMENTS;
     tempvar n_pedersen_copies = n_steps / PEDERSEN_BUILTIN_RATIO;
     tempvar n_pedersen_uses = (
         public_input.segments[segments.PEDERSEN].stop_ptr -
-        public_input.segments[segments.PEDERSEN].begin_addr
-    ) / 3;
+        public_input.segments[segments.PEDERSEN].begin_addr) / 3;
     // Note that the following call implies that n_steps is divisible by PEDERSEN_BUILTIN_RATIO.
     assert_nn_le(n_pedersen_uses, n_pedersen_copies);
 
     tempvar n_range_check_copies = n_steps / RC_BUILTIN_RATIO;
     tempvar n_range_check_uses = (
         public_input.segments[segments.RANGE_CHECK].stop_ptr -
-        public_input.segments[segments.RANGE_CHECK].begin_addr
-    );
+        public_input.segments[segments.RANGE_CHECK].begin_addr);
     assert_nn_le(n_range_check_uses, n_range_check_copies);
 
     tempvar n_bitwise_copies = n_steps / BITWISE__RATIO;
     tempvar n_bitwise_uses = (
         public_input.segments[segments.BITWISE].stop_ptr -
-        public_input.segments[segments.BITWISE].begin_addr
-    ) / 5;
+        public_input.segments[segments.BITWISE].begin_addr) / 5;
     assert_nn_le(n_bitwise_uses, n_bitwise_copies);
 
     tempvar n_keccak_copies = n_steps / KECCAK__RATIO;
     tempvar n_keccak_uses = (
         public_input.segments[segments.KECCAK].stop_ptr -
-        public_input.segments[segments.KECCAK].begin_addr
-    ) / 16;
+        public_input.segments[segments.KECCAK].begin_addr) / 16;
     assert_nn_le(n_keccak_uses, n_keccak_copies);
     return ();
 }
diff --git a/src/starkware/cairo/stark_verifier/air/layouts/recursive/verify.cairo b/src/starkware/cairo/stark_verifier/air/layouts/recursive/verify.cairo
index 5afeeab..15cab0e 100644
--- a/src/starkware/cairo/stark_verifier/air/layouts/recursive/verify.cairo
+++ b/src/starkware/cairo/stark_verifier/air/layouts/recursive/verify.cairo
@@ -41,8 +41,7 @@ func build_air() -> (air: AirWithLayout*) {
     );
     let (arg_eval_oods_polynomial) = get_label_location(eval_oods_polynomial);
 
-    tempvar air = new AirWithLayout(
-        air=AirInstance(
+    tempvar air = new AirWithLayout(air=AirInstance(
             public_input_hash=arg_public_input_hash,
             public_input_validate=arg_public_input_validate,
             traces_config_validate=arg_traces_config_validate,
@@ -53,14 +52,14 @@ func build_air() -> (air: AirWithLayout*) {
             n_constraints=N_CONSTRAINTS,
             constraint_degree=CONSTRAINT_DEGREE,
             mask_size=MASK_SIZE,
-        ),
+            ),
         layout=Layout(
             eval_oods_polynomial=arg_eval_oods_polynomial,
             n_original_columns=N_ORIGINAL_COLUMNS,
             n_interaction_columns=N_INTERACTION_COLUMNS,
             n_interaction_elements=InteractionElements.SIZE,
-        ),
-    );
+            ),
+        );
     return (air=air);
 }
 
diff --git a/src/starkware/cairo/stark_verifier/air/traces.cairo b/src/starkware/cairo/stark_verifier/air/traces.cairo
index 3f565b6..4d48e84 100644
--- a/src/starkware/cairo/stark_verifier/air/traces.cairo
+++ b/src/starkware/cairo/stark_verifier/air/traces.cairo
@@ -94,10 +94,10 @@ func traces_commit{
 
     return (
         commitment=new TracesCommitment(
-            public_input=public_input,
-            original=original_commitment,
-            interaction_elements=interaction_elements,
-            interaction=interaction_commitment,
+        public_input=public_input,
+        original=original_commitment,
+        interaction_elements=interaction_elements,
+        interaction=interaction_commitment,
         ),
     );
 }
diff --git a/src/starkware/cairo/stark_verifier/core/channel.cairo b/src/starkware/cairo/stark_verifier/core/channel.cairo
index eee2016..3e82660 100644
--- a/src/starkware/cairo/stark_verifier/core/channel.cairo
+++ b/src/starkware/cairo/stark_verifier/core/channel.cairo
@@ -137,7 +137,12 @@ func read_uint64_from_prover{
         Uint256(low=channel.digest.low + 1, high=channel.digest.high)
     );
     // Align 64 bit value to MSB.
-    blake2s_add_uint256_bigend{data=data}(Uint256(low=0, high=value.value * 2 ** 64));
+    blake2s_add_uint256_bigend{data=data}(
+        Uint256(
+        low=0,
+        high=value.value * 2 ** 64,
+        )
+    );
     let (digest) = blake2s_bigend(data=data_start, n_bytes=0x28);
     let channel = Channel(digest=digest, counter=0);
     return (value=ChannelSentFelt(value.value));
diff --git a/src/starkware/cairo/stark_verifier/core/channel_test.cairo b/src/starkware/cairo/stark_verifier/core/channel_test.cairo
index 1493980..1a2040f 100644
--- a/src/starkware/cairo/stark_verifier/core/channel_test.cairo
+++ b/src/starkware/cairo/stark_verifier/core/channel_test.cairo
@@ -23,14 +23,11 @@ func test_to{range_check_ptr, bitwise_ptr: BitwiseBuiltin*, blake2s_ptr: felt*}(
         let (local elements) = alloc();
         random_felts_to_prover(n_elements=3, elements=elements);
         assert elements[0] = (
-            3199910790894706855027093840383592257502485581126271436027309705477370004002
-        );
+            3199910790894706855027093840383592257502485581126271436027309705477370004002);
         assert elements[1] = (
-            2678311171676075552444787698918310126938416157877134200897080931937186268438
-        );
+            2678311171676075552444787698918310126938416157877134200897080931937186268438);
         assert elements[2] = (
-            2409925148191156067407217062797240658947927224212800962983204460004996362724
-        );
+            2409925148191156067407217062797240658947927224212800962983204460004996362724);
     }
     return ();
 }
@@ -49,8 +46,7 @@ func test_from{range_check_ptr, bitwise_ptr: BitwiseBuiltin*, blake2s_ptr: felt*
         let (value) = read_truncated_hash_from_prover(ChannelUnsentFelt(2 ** 160 - 1));
         assert value = ChannelSentFelt(2 ** 160 - 1);
         assert channel.digest = Uint256(
-            264245158129643438725130805500698377532, 273487178329072845015974259185110443467
-        );
+            264245158129643438725130805500698377532, 273487178329072845015974259185110443467);
         assert channel.counter = 0;
 
         // Read multiple felts.
@@ -58,8 +54,7 @@ func test_from{range_check_ptr, bitwise_ptr: BitwiseBuiltin*, blake2s_ptr: felt*
         %{ segments.write_arg(ids.unsent_values.address_, [2, 3, -1]) %}
         let (values: ChannelSentFelt*) = read_felts_from_prover(n_values=3, values=unsent_values);
         assert channel.digest = Uint256(
-            242546666571867849760234496042176867468, 276032264349006147573126117370612632439
-        );
+            242546666571867849760234496042176867468, 276032264349006147573126117370612632439);
         assert channel.counter = 0;
         %{
             assert memory[ids.values.address_ + 0] == 2
@@ -72,8 +67,7 @@ func test_from{range_check_ptr, bitwise_ptr: BitwiseBuiltin*, blake2s_ptr: felt*
             n_values=3, values=unsent_values
         );
         assert channel.digest = Uint256(
-            47489586150803289593519442158772964707, 295510913258162813848457591889478884574
-        );
+            47489586150803289593519442158772964707, 295510913258162813848457591889478884574);
         assert channel.counter = 0;
         %{
             assert memory[ids.values.address_ + 0] == 2
diff --git a/src/starkware/cairo/stark_verifier/core/config.cairo b/src/starkware/cairo/stark_verifier/core/config.cairo
index 7e30440..3ca958c 100644
--- a/src/starkware/cairo/stark_verifier/core/config.cairo
+++ b/src/starkware/cairo/stark_verifier/core/config.cairo
@@ -88,12 +88,12 @@ func stark_domains_create{range_check_ptr}(config: StarkConfig*) -> (stark_domai
 
     return (
         stark_domains=new StarkDomains(
-            log_eval_domain_size=log_eval_domain_size,
-            eval_domain_size=eval_domain_size,
-            eval_generator=eval_generator,
-            log_trace_domain_size=config.log_trace_domain_size,
-            trace_domain_size=trace_domain_size,
-            trace_generator=trace_generator,
+        log_eval_domain_size=log_eval_domain_size,
+        eval_domain_size=eval_domain_size,
+        eval_generator=eval_generator,
+        log_trace_domain_size=config.log_trace_domain_size,
+        trace_domain_size=trace_domain_size,
+        trace_generator=trace_generator,
         ),
     );
 }
diff --git a/src/starkware/cairo/stark_verifier/core/fri/fri.cairo b/src/starkware/cairo/stark_verifier/core/fri/fri.cairo
index f7966ad..2684bc5 100644
--- a/src/starkware/cairo/stark_verifier/core/fri/fri.cairo
+++ b/src/starkware/cairo/stark_verifier/core/fri/fri.cairo
@@ -124,11 +124,10 @@ func fri_commit{
 
     return (
         commitment=new FriCommitment(
-            config=config,
-            inner_layers=inner_layer_commitments,
-            eval_points=eval_points,
-            last_layer_coefficients=coefficients,
-        ),
+        config=config,
+        inner_layers=inner_layer_commitments,
+        eval_points=eval_points,
+        last_layer_coefficients=coefficients),
     );
 }
 
@@ -229,8 +228,10 @@ func gather_first_layer_queries(
     // Translate the coset to the homogenous group to have simple FRI equations.
     let shifted_x_value = x_values[0] / FIELD_GENERATOR;
     assert fri_queries[0] = FriLayerQuery(
-        index=queries[0], y_value=evaluations[0], x_inv_value=1 / shifted_x_value
-    );
+        index=queries[0],
+        y_value=evaluations[0],
+        x_inv_value=1 / shifted_x_value,
+        );
 
     return gather_first_layer_queries(
         n_queries=n_queries - 1,
@@ -259,8 +260,7 @@ func fri_decommit_layers{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: Bitwi
     // Params.
     let (coset_size) = pow(2, step_sizes[0]);
     tempvar params: FriLayerComputationParams* = new FriLayerComputationParams(
-        coset_size=coset_size, fri_group=fri_group, eval_point=eval_points[0]
-    );
+        coset_size=coset_size, fri_group=fri_group, eval_point=eval_points[0]);
 
     // Allocate values for the next layer computation.
     let (next_queries: FriLayerQuery*) = alloc();
@@ -279,8 +279,9 @@ func fri_decommit_layers{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: Bitwi
 
     // Table decommitment.
     tempvar decommitment: TableDecommitment* = new TableDecommitment(
-        n_values=verify_y_values - verify_y_values_start, values=verify_y_values_start
-    );
+        n_values=verify_y_values - verify_y_values_start,
+        values=verify_y_values_start,
+        );
     table_decommit(
         commitment=commitment[0],
         n_queries=verify_indices - verify_indices_start,
diff --git a/src/starkware/cairo/stark_verifier/core/fri/fri_layer.cairo b/src/starkware/cairo/stark_verifier/core/fri/fri_layer.cairo
index 6777466..3818b01 100644
--- a/src/starkware/cairo/stark_verifier/core/fri/fri_layer.cairo
+++ b/src/starkware/cairo/stark_verifier/core/fri/fri_layer.cairo
@@ -140,8 +140,9 @@ func compute_next_layer{
     // Write next layer query.
     let (next_x_inv) = pow([coset_x_inv], params.coset_size);
     assert next_queries[0] = FriLayerQuery(
-        index=coset_index, y_value=fri_formula_res, x_inv_value=next_x_inv
-    );
+        index=coset_index,
+        y_value=fri_formula_res,
+        x_inv_value=next_x_inv);
     let next_queries = &next_queries[1];
 
     return compute_next_layer(params=params);
diff --git a/src/starkware/cairo/stark_verifier/core/proof_of_work.cairo b/src/starkware/cairo/stark_verifier/core/proof_of_work.cairo
index d6b6d35..eb706aa 100644
--- a/src/starkware/cairo/stark_verifier/core/proof_of_work.cairo
+++ b/src/starkware/cairo/stark_verifier/core/proof_of_work.cairo
@@ -59,13 +59,15 @@ func verify_proof_of_work{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: Bitw
     let data_start = data;
     blake2s_add_uint256_bigend{data=data}(
         Uint256(
-            low=digest_hl * WORD_UPPER_BOUND + digest_lh,
-            high=0x123456789abcded * WORD_UPPER_BOUND + digest_hh,
-        ),
+        low=digest_hl * WORD_UPPER_BOUND + digest_lh,
+        high=0x123456789abcded * WORD_UPPER_BOUND + digest_hh),
     );
     // Align 72 bit value to MSB.
     blake2s_add_uint256_bigend{data=data}(
-        Uint256(low=0, high=(digest_ll * BYTE_UPPER_BOUND + n_bits) * 2 ** 56)
+        Uint256(
+        low=0,
+        high=(digest_ll * BYTE_UPPER_BOUND + n_bits) * 2 ** 56
+        )
     );
     let (init_hash) = blake2s_bigend(data=data_start, n_bytes=0x29);
 
@@ -77,7 +79,10 @@ func verify_proof_of_work{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: Bitw
     blake2s_add_uint256_bigend{data=data}(init_hash);
     // Align 64 bit value to MSB.
     static_assert MAX_NONCE == 2 ** 64 - 1;
-    blake2s_add_uint256_bigend{data=data}(Uint256(low=0, high=nonce.value * 2 ** 64));
+    blake2s_add_uint256_bigend{data=data}(Uint256(
+        low=0,
+        high=nonce.value * 2 ** 64
+        ));
     let (result) = blake2s_bigend(data=data_start, n_bytes=0x28);
     let (work_limit) = pow(2, 128 - n_bits);
 
diff --git a/src/starkware/cairo/stark_verifier/core/stark.cairo b/src/starkware/cairo/stark_verifier/core/stark.cairo
index 6ab0b02..01333a2 100644
--- a/src/starkware/cairo/stark_verifier/core/stark.cairo
+++ b/src/starkware/cairo/stark_verifier/core/stark.cairo
@@ -221,8 +221,7 @@ func stark_commit{
     random_felts_to_prover(n_elements=air.n_constraints, elements=traces_coefficients);
     let (interaction_after_traces: InteractionValuesAfterTraces*) = alloc();
     assert [interaction_after_traces] = InteractionValuesAfterTraces(
-        coefficients=traces_coefficients
-    );
+        coefficients=traces_coefficients);
 
     // Read composition commitment.
     let (composition_commitment: TableCommitment*) = table_commit(
@@ -256,7 +255,8 @@ func stark_commit{
     // Generate interaction values after OODS.
     let (oods_coefficients: felt*) = alloc();
     random_felts_to_prover(n_elements=n_oods_values, elements=oods_coefficients);
-    tempvar interaction_after_oods = new InteractionValuesAfterOods(coefficients=oods_coefficients);
+    tempvar interaction_after_oods = new InteractionValuesAfterOods(
+        coefficients=oods_coefficients);
 
     // Read fri commitment.
     let (fri_commitment) = fri_commit(unsent_commitment=unsent_commitment.fri, config=config.fri);
@@ -269,13 +269,12 @@ func stark_commit{
     // Return commitment.
     return (
         res=new StarkCommitment(
-            traces=traces_commitment,
-            composition=composition_commitment,
-            interaction_after_composition=interaction_after_composition,
-            oods_values=sent_oods_values,
-            interaction_after_oods=interaction_after_oods,
-            fri=fri_commitment,
-        ),
+        traces=traces_commitment,
+        composition=composition_commitment,
+        interaction_after_composition=interaction_after_composition,
+        oods_values=sent_oods_values,
+        interaction_after_oods=interaction_after_oods,
+        fri=fri_commitment),
     );
 }
 
@@ -303,8 +302,7 @@ func verify_oods{range_check_ptr}(
     // This verification is currently only implemented for constraint degree 2.
     assert air.constraint_degree = 2;
     tempvar claimed_composition = (
-        oods_values[air.mask_size + 0].value + oods_values[air.mask_size + 1].value * oods_point
-    );
+        oods_values[air.mask_size + 0].value + oods_values[air.mask_size + 1].value * oods_point);
 
     assert composition_from_trace_values = claimed_composition;
 
@@ -351,7 +349,7 @@ func stark_decommit{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: BitwiseBui
         oods_point=commitment.interaction_after_composition.oods_point,
         trace_generator=stark_domains.trace_generator,
         constraint_coefficients=commitment.interaction_after_oods.coefficients,
-    );
+        );
     let (oods_poly_evals) = eval_oods_boundary_poly_at_points(
         air=air,
         eval_info=eval_info,
@@ -363,8 +361,9 @@ func stark_decommit{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr: BitwiseBui
 
     // Decommit FRI.
     tempvar fri_decommitment = new FriDecommitment(
-        n_values=n_queries, values=oods_poly_evals, points=points
-    );
+        n_values=n_queries,
+        values=oods_poly_evals,
+        points=points);
     fri_decommit(
         n_queries=n_queries,
         queries=queries,
diff --git a/src/starkware/cairo/stark_verifier/core/vector_commitment.cairo b/src/starkware/cairo/stark_verifier/core/vector_commitment.cairo
index e5ccfba..476b453 100644
--- a/src/starkware/cairo/stark_verifier/core/vector_commitment.cairo
+++ b/src/starkware/cairo/stark_verifier/core/vector_commitment.cairo
@@ -78,8 +78,7 @@ func vector_commitment_decommit{range_check_ptr, blake2s_ptr: felt*, bitwise_ptr
     // Make sure hash is truncated.
     assert_nn(expected_commitment.low / 2 ** 96);
     tempvar expected_truncated_hash = (
-        expected_commitment.low + expected_commitment.high * 2 ** 128
-    ) / 2 ** 96;
+        expected_commitment.low + expected_commitment.high * 2 ** 128) / 2 ** 96;
     assert expected_truncated_hash = commitment.commitment_hash.value;
     return ();
 }
@@ -93,7 +92,9 @@ func shift_queries{range_check_ptr}(
         return ();
     }
     assert_nn_le(queries.index, shift - 1);
-    assert [shifted_queries] = VectorQuery(index=queries.index + shift, value=queries.value);
+    assert [shifted_queries] = VectorQuery(
+        index=queries.index + shift,
+        value=queries.value);
     return shift_queries(
         n_queries=n_queries - 1,
         queries=&queries[1],
diff --git a/src/starkware/python/expression_string.py b/src/starkware/python/expression_string.py
index 6a957ad..71423ea 100644
--- a/src/starkware/python/expression_string.py
+++ b/src/starkware/python/expression_string.py
@@ -97,7 +97,7 @@ class ExpressionString:
 
     def __pow__(self, other):
         other = to_expr_string(other)
-        # For the two expressions (a^b)^c and a^(b^c), parentheses will always be added.
+        # For the two expressions (a ** b) ** c and a ** (b ** c), parentheses will always be added.
         return ExpressionString(f"{self:HIGHEST}^{other:HIGHEST}", OperatorPrecedence.POW)
 
     def double_star_pow(self, other):
diff --git a/src/starkware/python/expression_string_test.py b/src/starkware/python/expression_string_test.py
index e8ebbe1..eb15b37 100644
--- a/src/starkware/python/expression_string_test.py
+++ b/src/starkware/python/expression_string_test.py
@@ -28,8 +28,6 @@ def test_expression_string():
     assert str(a**b**c) == "a^(b^c)"
     assert str(a ** ((b**c) ** (d**e)) ** f) == "a^(((b^c)^(d^e))^f)"
     assert str(a / b ** (c + d) * (e + f)) == "a / b^(c + d) * (e + f)"
-    assert str(a.double_star_pow(b.double_star_pow(c))) == "a ** (b ** c)"
-    assert str((a.double_star_pow(b)).double_star_pow(c)) == "(a ** b) ** c"
 
     assert str(-a) == "-a"
     assert str(-(a + b) + (-(a - b)) - (-(a - b))) == "(-(a + b)) + (-(a - b)) - (-(a - b))"
diff --git a/src/starkware/python/utils.py b/src/starkware/python/utils.py
index 409e9cd..b79e203 100644
--- a/src/starkware/python/utils.py
+++ b/src/starkware/python/utils.py
@@ -38,8 +38,6 @@ from typing_extensions import Literal, Protocol
 from starkware.python.utils_stub_module import *  # noqa
 
 T = TypeVar("T")
-K = TypeVar("K")
-V = TypeVar("V")
 TAsyncGenerator = TypeVar("TAsyncGenerator", bound=AsyncGenerator)
 NumType = TypeVar("NumType", int, float)
 HASH_BYTES = 32
@@ -594,12 +592,3 @@ async def aenumerate(aiterable: AsyncIterable[T], start: int = 0) -> AsyncIterat
     counter = itertools.count(start)
     async for element in aiterable:
         yield next(counter), element
-
-
-def subtract_mappings(a: Mapping[K, V], b: Mapping[K, V]) -> Mapping[K, V]:
-    """
-    Returns a mapping containing key-value pairs from a that are not included in b (if
-    a key appears in b with a different value, it will be part of the output).
-    Uses to take only updated cells from a mapping.
-    """
-    return dict(a.items() - b.items())
diff --git a/src/starkware/python/utils_test.py b/src/starkware/python/utils_test.py
index 7b016a5..692fb8b 100644
--- a/src/starkware/python/utils_test.py
+++ b/src/starkware/python/utils_test.py
@@ -23,7 +23,6 @@ from starkware.python.utils import (
     iter_blockify,
     multiply_counter_by_scalar,
     safe_zip,
-    subtract_mappings,
     to_ascii_string,
     unique,
 )
@@ -270,9 +269,3 @@ async def test_aclosing():
 
     assert not is_closed.value
     await gen.aclose()  # Close properly.
-
-
-def test_subtract_mappings():
-    a = {"red": 1, "green": 2, "blue": 3}
-    b = {"yellow": 1, "green": 2, "blue": 4}
-    assert subtract_mappings(a, b) == {"red": 1, "blue": 3}
diff --git a/src/starkware/starknet/business_logic/execution/CMakeLists.txt b/src/starkware/starknet/business_logic/execution/CMakeLists.txt
index 09b3a9a..304274c 100644
--- a/src/starkware/starknet/business_logic/execution/CMakeLists.txt
+++ b/src/starkware/starknet/business_logic/execution/CMakeLists.txt
@@ -59,7 +59,6 @@ python_lib(starknet_execute_entry_point_lib
     starknet_storage_lib
     starknet_transaction_execution_objects_lib
     starkware_error_handling_lib
-    starkware_python_utils_lib
 )
 
 python_lib(starknet_execution_usage_lib
diff --git a/src/starkware/starknet/business_logic/execution/execute_entry_point.py b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
index 09dfd89..1671653 100644
--- a/src/starkware/starknet/business_logic/execution/execute_entry_point.py
+++ b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
@@ -9,7 +9,6 @@ from starkware.cairo.lang.vm.relocatable import RelocatableValue
 from starkware.cairo.lang.vm.security import SecurityError
 from starkware.cairo.lang.vm.utils import ResourcesError
 from starkware.cairo.lang.vm.vm_exceptions import HintException, VmException, VmExceptionBase
-from starkware.python.utils import to_bytes
 from starkware.starknet.business_logic.execution.execute_entry_point_base import (
     ExecuteEntryPointBase,
 )
@@ -43,9 +42,10 @@ from starkware.starkware_utils.error_handling import (
     wrap_with_stark_exception,
 )
 
-logger = logging.getLogger(__name__)
+from starkware.starknet.core.os.syscall_utils import HandlerException
+import cairo_rs_py
 
-FAULTY_CLASS_HASH = to_bytes(0x1A7820094FEAF82D53F53F214B81292D717E7BB9A92BB2488092CD306F3993F)
+logger = logging.getLogger(__name__)
 
 
 class ExecuteEntryPoint(ExecuteEntryPointBase):
@@ -176,13 +176,6 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
         """
         # Prepare input for Cairo function runner.
         class_hash = self._get_code_class_hash(state=state)
-
-        # Hack to prevent version 0 attack on argent accounts.
-        if (tx_execution_context.version == 0) and (class_hash == FAULTY_CLASS_HASH):
-            raise StarkException(
-                code=StarknetErrorCode.TRANSACTION_FAILED, message="Fraud attempt blocked."
-            )
-
         contract_class = state.get_contract_class(class_hash=class_hash)
         contract_class.validate()
 
@@ -192,7 +185,8 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
 
         # Run the specified contract entry point with given calldata.
         with wrap_with_stark_exception(code=StarknetErrorCode.SECURITY_ERROR):
-            runner = CairoFunctionRunner(program=contract_class.program, layout="all")
+            runner = cairo_rs_py.CairoRunner(program=contract_class.program.dumps(), entrypoint=None, layout="all", proof_mode=False)
+            runner.initialize_function_runner()
         os_context = os_utils.prepare_os_context(runner=runner)
 
         validate_contract_deployed(state=state, contract_address=self.contract_address)
@@ -215,24 +209,24 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
             os_context,
             len(self.calldata),
             # Allocate and mark the segment as read-only (to mark every input array as read-only).
-            syscall_handler._allocate_segment(segments=runner.segments, data=self.calldata),
+            syscall_handler._allocate_segment(segments=runner, data=self.calldata),
         ]
 
         try:
             runner.run_from_entrypoint(
                 entry_point.offset,
-                *entry_points_args,
+                entry_points_args,
                 hint_locals={
                     "syscall_handler": syscall_handler,
                 },
-                static_locals={
-                    "__find_element_max_size": 2**20,
-                    "__squash_dict_max_size": 2**20,
-                    "__keccak_max_size": 2**20,
-                    "__usort_max_size": 2**20,
-                    "__chained_ec_op_max_len": 1000,
-                },
-                run_resources=tx_execution_context.run_resources,
+                # static_locals={
+                #     "__find_element_max_size": 2**20,
+                #     "__squash_dict_max_size": 2**20,
+                #     "__keccak_max_size": 2**20,
+                #     "__usort_max_size": 2**20,
+                #     "__chained_ec_op_max_len": 1000,
+                # },
+                # run_resources=tx_execution_context.run_resources,
                 verify_secure=True,
             )
         except VmException as exception:
@@ -268,6 +262,8 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
                 code=StarknetErrorCode.UNEXPECTED_FAILURE,
                 message="Got an unexpected exception during the execution of the transaction.",
             ) from exception
+        except HandlerException as exception:
+            raise StarkException(code=exception.stark_exception.code, message=str(exception.stark_exception.message)) from exception
 
         # Complete handler validations.
         os_utils.validate_and_process_os_context(
@@ -281,7 +277,7 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
 
         # The arguments are touched by the OS and should not be counted as holes, mark them
         # as accessed.
-        assert isinstance(args_ptr, RelocatableValue)  # Downcast.
+        # assert isinstance(args_ptr, RelocatableValue)  # Downcast.
         runner.mark_as_accessed(address=args_ptr, size=len(entry_points_args))
 
         return runner, syscall_handler
diff --git a/src/starkware/starknet/business_logic/execution/objects.py b/src/starkware/starknet/business_logic/execution/objects.py
index 4ec78f7..27f9d4c 100644
--- a/src/starkware/starknet/business_logic/execution/objects.py
+++ b/src/starkware/starknet/business_logic/execution/objects.py
@@ -377,7 +377,7 @@ class CallInfo(SerializableMarshmallowDataclass):
 @marshmallow_dataclass.dataclass(frozen=True)
 class TransactionExecutionInfo(EverestTransactionExecutionInfo):
     """
-    Contains the information gathered by the execution of a transaction. Main usages:
+    Contains the information gathered by the execution of a transation. Main usages:
     1. Supplies hints for the OS run on the corresponding transaction; e.g., internal call results.
     2. Stores useful information for users; e.g., L2-to-L1 messages and emitted events.
     """
diff --git a/src/starkware/starknet/business_logic/fact_state/CMakeLists.txt b/src/starkware/starknet/business_logic/fact_state/CMakeLists.txt
index 7ab47b0..6332f68 100644
--- a/src/starkware/starknet/business_logic/fact_state/CMakeLists.txt
+++ b/src/starkware/starknet/business_logic/fact_state/CMakeLists.txt
@@ -7,11 +7,11 @@ python_lib(starknet_business_logic_fact_state_lib
     LIBS
     cairo_vm_lib
     everest_business_logic_lib
-    starknet_business_logic_fact_state_utils_lib
     starknet_business_logic_patricia_state_lib
     starknet_business_logic_state_lib
     starknet_definitions_lib
     starknet_general_config_lib
+    starknet_storage_lib
     starknet_transaction_lib
     starkware_config_utils_lib
     starkware_error_handling_lib
@@ -44,13 +44,3 @@ python_lib(starknet_business_logic_patricia_state_lib
     starkware_utils_lib
     pip_marshmallow_dataclass
 )
-
-python_lib(starknet_business_logic_fact_state_utils_lib
-    PREFIX starkware/starknet/business_logic/fact_state
-
-    FILES
-    utils.py
-
-    LIBS
-    starknet_business_logic_state_lib
-)
diff --git a/src/starkware/starknet/business_logic/fact_state/contract_state_objects.py b/src/starkware/starknet/business_logic/fact_state/contract_state_objects.py
index 9ddb905..ea37e36 100644
--- a/src/starkware/starknet/business_logic/fact_state/contract_state_objects.py
+++ b/src/starkware/starknet/business_logic/fact_state/contract_state_objects.py
@@ -129,7 +129,7 @@ class ContractState(ValidatedMarshmallowDataclass, LeafFact):
     async def update(
         self,
         ffc: FactFetchingContext,
-        updates: Mapping[int, int],
+        updates: Mapping[int, StorageLeaf],
         nonce: Optional[int],
         class_hash: Optional[bytes] = None,
     ) -> "ContractState":
@@ -151,10 +151,8 @@ class ContractState(ValidatedMarshmallowDataclass, LeafFact):
                 class_hash != ContractState.UNINITIALIZED_CLASS_HASH
             ), "Cannot update the state of an uninitialized contract."
 
-        modifications = [(key, StorageLeaf(value=value)) for key, value in updates.items()]
-
         updated_storage_commitment_tree = await self.storage_commitment_tree.update(
-            ffc=ffc, modifications=modifications
+            ffc=ffc, modifications=updates.items()
         )
 
         return ContractState(
@@ -172,7 +170,7 @@ class ContractCarriedState(ValidatedDataclass):
     """
 
     state: ContractState
-    storage_updates: Mapping[int, int]
+    storage_updates: Mapping[int, StorageLeaf]
     nonce: int
 
     @property
diff --git a/src/starkware/starknet/business_logic/fact_state/state.py b/src/starkware/starknet/business_logic/fact_state/state.py
index 44fbc28..6d6ed7a 100644
--- a/src/starkware/starknet/business_logic/fact_state/state.py
+++ b/src/starkware/starknet/business_logic/fact_state/state.py
@@ -1,5 +1,4 @@
 import logging
-from dataclasses import field
 from typing import Dict, Mapping, MutableMapping, Optional
 
 import marshmallow_dataclass
@@ -11,25 +10,21 @@ from services.everest.business_logic.state import (
     StateSelectorBase,
 )
 from starkware.cairo.lang.vm.cairo_pie import ExecutionResources
-from starkware.python.utils import gather_in_chunks, safe_zip, subtract_mappings
+from starkware.python.utils import gather_in_chunks, safe_zip
 from starkware.starknet.business_logic.fact_state.contract_state_objects import (
     ContractCarriedState,
     ContractState,
 )
 from starkware.starknet.business_logic.fact_state.patricia_state import PatriciaStateReader
-from starkware.starknet.business_logic.fact_state.utils import (
-    to_cached_state_storage_mapping,
-    to_state_diff_storage_mapping,
-)
-from starkware.starknet.business_logic.state.state import CachedState
+from starkware.starknet.business_logic.state.state import CachedState, StorageEntry
 from starkware.starknet.business_logic.state.state_api import StateReader
 from starkware.starknet.business_logic.state.state_api_objects import BlockInfo
-from starkware.starknet.definitions import fields
 from starkware.starknet.definitions.general_config import StarknetGeneralConfig
+from starkware.starknet.storage.starknet_storage import ContractStorageMapping, StorageLeaf
 from starkware.starkware_utils.commitment_tree.binary_fact_tree import BinaryFactDict
 from starkware.starkware_utils.commitment_tree.patricia_tree.patricia_tree import PatriciaTree
 from starkware.starkware_utils.config_base import Config
-from starkware.storage.storage import DBObject, FactFetchingContext
+from starkware.storage.storage import FactFetchingContext
 
 logger = logging.getLogger(__name__)
 state_objects_logger = logging.getLogger(f"{__name__}:state_objects_logger")
@@ -257,9 +252,7 @@ class SharedState(SharedStateBase):
             ffc=ffc,
             address_to_class_hash=state_cache._class_hash_writes,
             address_to_nonce=state_cache._nonce_writes,
-            storage_updates=to_state_diff_storage_mapping(
-                storage_writes=state_cache._storage_writes
-            ),
+            storage_updates=state_cache._storage_writes,
             block_info=current_carried_state.state.block_info,
         )
 
@@ -268,11 +261,18 @@ class SharedState(SharedStateBase):
         ffc: FactFetchingContext,
         address_to_class_hash: Mapping[int, bytes],
         address_to_nonce: Mapping[int, int],
-        storage_updates: Mapping[int, Mapping[int, int]],
+        storage_updates: Mapping[StorageEntry, int],
         block_info: BlockInfo,
     ) -> "SharedState":
+        address_to_storage_updates: Dict[int, ContractStorageMapping] = {}
+        for (address, key), value in storage_updates.items():
+            contract_storage_updates = address_to_storage_updates.setdefault(address, {})
+            contract_storage_updates[key] = StorageLeaf(value=value)
+
         accessed_addresses = (
-            address_to_class_hash.keys() | address_to_nonce.keys() | storage_updates.keys()
+            set(address_to_class_hash.keys())
+            | set(address_to_nonce.keys())
+            | {address for address, _ in storage_updates.keys()}
         )
         current_contract_states = await self.contract_states.get_leaves(
             ffc=ffc, indices=accessed_addresses, fact_cls=ContractState
@@ -283,7 +283,7 @@ class SharedState(SharedStateBase):
             awaitables=(
                 current_contract_states[address].update(
                     ffc=ffc,
-                    updates=storage_updates.get(address, {}),
+                    updates=address_to_storage_updates.get(address, {}),
                     nonce=address_to_nonce.get(address, None),
                     class_hash=address_to_class_hash.get(address, None),
                 )
@@ -300,18 +300,14 @@ class SharedState(SharedStateBase):
 
 
 @marshmallow_dataclass.dataclass(frozen=True)
-class StateDiff(EverestStateDiff, DBObject):
+class StateDiff(EverestStateDiff):
     """
     Holds uncommitted changes induced on StarkNet contracts.
     """
 
-    address_to_class_hash: Mapping[int, bytes] = field(
-        metadata=fields.address_to_class_hash_metadata
-    )
-    address_to_nonce: Mapping[int, int] = field(metadata=fields.address_to_nonce_metadata)
-    storage_updates: Mapping[int, Mapping[int, int]] = field(
-        metadata=fields.storage_updates_metadata
-    )
+    address_to_class_hash: Mapping[int, bytes]
+    address_to_nonce: Mapping[int, int]
+    storage_updates: Mapping[StorageEntry, int]
     block_info: BlockInfo
 
     @classmethod
@@ -329,30 +325,19 @@ class StateDiff(EverestStateDiff, DBObject):
     @classmethod
     def from_cached_state(cls, cached_state: CachedState) -> "StateDiff":
         state_cache = cached_state.cache
-        storage_updates = to_state_diff_storage_mapping(
-            storage_writes=subtract_mappings(
-                state_cache._storage_writes, state_cache._storage_initial_values
-            )
-        )
-        address_to_nonce = subtract_mappings(
-            state_cache._nonce_writes, state_cache._nonce_initial_values
-        )
-        address_to_class_hash = subtract_mappings(
-            state_cache._class_hash_writes, state_cache._class_hash_initial_values
-        )
         return cls(
-            address_to_class_hash=address_to_class_hash,
-            address_to_nonce=address_to_nonce,
-            storage_updates=storage_updates,
+            address_to_class_hash=state_cache._class_hash_writes,
+            address_to_nonce=state_cache._nonce_writes,
+            storage_updates=state_cache._storage_writes,
             block_info=cached_state.block_info,
         )
 
     def to_cached_state(self, state_reader: StateReader) -> CachedState:
         cached_state = CachedState(block_info=self.block_info, state_reader=state_reader)
-        cached_state.cache.set_initial_values(
+        cached_state.cache.update_writes(
             address_to_class_hash=self.address_to_class_hash,
             address_to_nonce=self.address_to_nonce,
-            storage_updates=to_cached_state_storage_mapping(storage_updates=self.storage_updates),
+            storage_updates=self.storage_updates,
         )
 
         return cached_state
@@ -360,12 +345,7 @@ class StateDiff(EverestStateDiff, DBObject):
     def squash(self, other: "StateDiff") -> "StateDiff":
         address_to_class_hash = {**self.address_to_class_hash, **other.address_to_class_hash}
         address_to_nonce = {**self.address_to_nonce, **other.address_to_nonce}
-        storage_updates: Dict[int, Dict[int, int]] = {}
-        for address in self.storage_updates.keys() | other.storage_updates.keys():
-            storage_updates[address] = {
-                **self.storage_updates.get(address, {}),
-                **other.storage_updates.get(address, {}),
-            }
+        storage_updates = {**self.storage_updates, **other.storage_updates}
         self.block_info.validate_legal_progress(next_block_info=other.block_info)
 
         return StateDiff(
diff --git a/src/starkware/starknet/business_logic/fact_state/utils.py b/src/starkware/starknet/business_logic/fact_state/utils.py
deleted file mode 100644
index 7251a06..0000000
--- a/src/starkware/starknet/business_logic/fact_state/utils.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from typing import Dict, Mapping
-
-from starkware.starknet.business_logic.state.state import StorageEntry
-
-
-def to_cached_state_storage_mapping(
-    storage_updates: Mapping[int, Mapping[int, int]]
-) -> Mapping[StorageEntry, int]:
-    """
-    Converts StateDiff storage mapping (addresses map to a key-value mapping) to CachedState
-    storage mapping (Tuple of address and key map to the associated value).
-    """
-    storage_writes: Dict[StorageEntry, int] = {}
-    for address, contract_storage in storage_updates.items():
-        for key, value in contract_storage.items():
-            storage_writes[(address, key)] = value
-
-    return storage_writes
-
-
-def to_state_diff_storage_mapping(
-    storage_writes: Mapping[StorageEntry, int]
-) -> Mapping[int, Mapping[int, int]]:
-    """
-    Converts CachedState storage mapping to StateDiff storage mapping.
-    See to_cached_state_storage_mapping documentation.
-    """
-    storage_updates: Dict[int, Dict[int, int]] = {}
-    for (address, key), value in storage_writes.items():
-        if address in storage_updates:
-            storage_updates[address][key] = value
-        else:
-            storage_updates[address] = {key: value}
-
-    return storage_updates
diff --git a/src/starkware/starknet/business_logic/state/state.py b/src/starkware/starknet/business_logic/state/state.py
index cb75d4e..7eed90e 100644
--- a/src/starkware/starknet/business_logic/state/state.py
+++ b/src/starkware/starknet/business_logic/state/state.py
@@ -139,23 +139,6 @@ class StateCache:
         self._nonce_writes.update(address_to_nonce)
         self._storage_writes.update(storage_updates)
 
-    def set_initial_values(
-        self,
-        address_to_class_hash: Mapping[int, bytes],
-        address_to_nonce: Mapping[int, int],
-        storage_updates: Mapping[Tuple[int, int], int],
-    ):
-        mappings: Tuple[Mapping, ...] = (
-            self.address_to_class_hash,
-            self.address_to_nonce,
-            self.storage_view,
-        )
-        assert all(len(mapping) == 0 for mapping in mappings), "Cache already initialized."
-
-        self._class_hash_writes.update(address_to_class_hash)
-        self._nonce_writes.update(address_to_nonce)
-        self._storage_writes.update(storage_updates)
-
     def get_accessed_contract_addresses(self) -> Set[int]:
         return {
             *self.address_to_class_hash.keys(),
diff --git a/src/starkware/starknet/business_logic/state/state_api_objects.py b/src/starkware/starknet/business_logic/state/state_api_objects.py
index 911fd3e..e31b0d4 100644
--- a/src/starkware/starknet/business_logic/state/state_api_objects.py
+++ b/src/starkware/starknet/business_logic/state/state_api_objects.py
@@ -28,7 +28,7 @@ class BlockInfo(ValidatedMarshmallowDataclass):
     # The sequencer address of this block.
     sequencer_address: Optional[int] = field(metadata=fields.optional_sequencer_address_metadata)
 
-    # The version of StarkNet system (e.g. "0.10.3").
+    # The version of StarkNet system (e.g. "0.10.2").
     starknet_version: Optional[str] = field(metadata=fields.starknet_version_metadata)
 
     @classmethod
diff --git a/src/starkware/starknet/business_logic/transaction/fee.py b/src/starkware/starknet/business_logic/transaction/fee.py
index 9acaa73..9bbb9f5 100644
--- a/src/starkware/starknet/business_logic/transaction/fee.py
+++ b/src/starkware/starknet/business_logic/transaction/fee.py
@@ -67,9 +67,9 @@ def calculate_l1_gas_by_cairo_usage(
     """
     cairo_resource_fee_weights = general_config.cairo_resource_fee_weights
     cairo_resource_names = set(cairo_resource_usage.keys())
-    assert cairo_resource_names.issubset(
-        cairo_resource_fee_weights.keys()
-    ), "Cairo resource names must be contained in fee weights dict."
+    # assert cairo_resource_names.issubset(
+    #     cairo_resource_fee_weights.keys()
+    # ), "Cairo resource names must be contained in fee weights dict."
 
     # Convert Cairo usage to L1 gas usage.
     cairo_l1_gas_usage = max(
diff --git a/src/starkware/starknet/business_logic/transaction/objects.py b/src/starkware/starknet/business_logic/transaction/objects.py
index 6673eeb..ee90e6e 100644
--- a/src/starkware/starknet/business_logic/transaction/objects.py
+++ b/src/starkware/starknet/business_logic/transaction/objects.py
@@ -2,7 +2,7 @@ import dataclasses
 import logging
 from abc import abstractmethod
 from dataclasses import field
-from typing import Any, ClassVar, Dict, List, Optional, Type
+from typing import Any, ClassVar, Dict, List, Optional, Tuple, Type
 
 import marshmallow
 import marshmallow_dataclass
@@ -25,10 +25,7 @@ from starkware.starknet.business_logic.state.state import UpdatesTrackerState
 from starkware.starknet.business_logic.state.state_api import SyncState
 from starkware.starknet.business_logic.state.state_api_objects import BlockInfo
 from starkware.starknet.business_logic.transaction.fee import calculate_tx_fee, execute_fee_transfer
-from starkware.starknet.business_logic.transaction.state_objects import (
-    FeeInfo,
-    InternalStateTransaction,
-)
+from starkware.starknet.business_logic.transaction.state_objects import InternalStateTransaction
 from starkware.starknet.business_logic.utils import (
     calculate_tx_resources,
     preprocess_invoke_function_fields,
@@ -181,6 +178,15 @@ class InternalTransaction(InternalStateTransaction, EverestInternalTransaction):
         assert isinstance(tx_execution_info, TransactionExecutionInfo)
         return tx_execution_info
 
+    @abstractmethod
+    def _apply_specific_sequential_changes(
+        self,
+        state: SyncState,
+        general_config: StarknetGeneralConfig,
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> TransactionExecutionInfo:
+        pass
+
 
 class SyntheticTransaction(InternalStateTransaction):
     """
@@ -210,33 +216,24 @@ class InitializeBlockInfo(SyntheticTransaction):
     block_info: BlockInfo
     tx_type: ClassVar[TransactionType] = TransactionType.INITIALIZE_BLOCK_INFO
 
-    def sync_apply_state_updates(self, state: StateProxy, general_config: Config) -> None:
-        # Downcast arguments to application-specific types.
-        assert isinstance(state, SyncState)
-
+    def _apply_specific_sequential_changes(
+        self,
+        state: SyncState,
+        general_config: StarknetGeneralConfig,
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> Optional[TransactionExecutionInfo]:
         # Validate progress is legal.
         state.block_info.validate_legal_progress(next_block_info=self.block_info)
 
         # Update entire block-related information.
         state.update_block_info(block_info=self.block_info)
-        return None
 
-    def _apply_specific_sequential_changes(
-        self,
-        state: SyncState,
-        general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
-        raise NotImplementedError(
-            f"_apply_specific_sequential_changes is not implemented for {type(self).__name__}."
-        )
+        return None
 
     def _apply_specific_concurrent_changes(
         self, state: UpdatesTrackerState, general_config: StarknetGeneralConfig
     ) -> TransactionExecutionInfo:
-        raise NotImplementedError(
-            f"_apply_specific_concurrent_changes is not implemented for {type(self).__name__}."
-        )
+        return TransactionExecutionInfo.empty()
 
     def get_state_selector(self, general_config: Config) -> StateSelector:
         return StateSelector.empty()
@@ -338,7 +335,7 @@ class InternalAccountTransaction(InternalTransaction):
 
     def charge_fee(
         self, state: SyncState, resources: ResourcesMapping, general_config: StarknetGeneralConfig
-    ) -> FeeInfo:
+    ) -> Tuple[Optional[CallInfo], int]:
         """
         Calculates and charges the actual fee.
         """
@@ -385,14 +382,21 @@ class InternalAccountTransaction(InternalTransaction):
         self,
         state: SyncState,
         general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> TransactionExecutionInfo:
         self._handle_nonce(state=state)
 
-        return self.charge_fee(
+        # Handle fee.
+        fee_transfer_info, actual_fee = self.charge_fee(
             state=state,
             general_config=general_config,
-            resources=actual_resources,
+            resources=concurrent_execution_info.actual_resources,
+        )
+
+        return TransactionExecutionInfo.from_concurrent_stage_execution_info(
+            concurrent_execution_info=concurrent_execution_info,
+            fee_transfer_info=fee_transfer_info,
+            actual_fee=actual_fee,
         )
 
 
@@ -941,10 +945,9 @@ class InternalDeploy(InternalTransaction):
         self,
         state: SyncState,
         general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
-        fee_transfer_info, actual_fee = None, 0
-        return fee_transfer_info, actual_fee
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> TransactionExecutionInfo:
+        return concurrent_execution_info
 
     def handle_empty_constructor(self, state: UpdatesTrackerState) -> TransactionExecutionInfo:
         stark_assert(
@@ -1459,10 +1462,9 @@ class InternalL1Handler(InternalTransaction):
         self,
         state: SyncState,
         general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
-        fee_transfer_info, actual_fee = None, 0
-        return fee_transfer_info, actual_fee
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> TransactionExecutionInfo:
+        return concurrent_execution_info
 
     def get_execution_context(self, n_steps: int) -> TransactionExecutionContext:
         return TransactionExecutionContext.create(
diff --git a/src/starkware/starknet/business_logic/transaction/state_objects.py b/src/starkware/starknet/business_logic/transaction/state_objects.py
index fc3af60..8f37442 100644
--- a/src/starkware/starknet/business_logic/transaction/state_objects.py
+++ b/src/starkware/starknet/business_logic/transaction/state_objects.py
@@ -2,15 +2,11 @@ import asyncio
 import functools
 import logging
 from abc import ABC, abstractmethod
-from typing import Iterable, Optional, Tuple, cast
+from typing import Iterable, Optional, cast
 
 from services.everest.business_logic.internal_transaction import EverestInternalStateTransaction
 from services.everest.business_logic.state_api import StateProxy
-from starkware.starknet.business_logic.execution.objects import (
-    CallInfo,
-    ResourcesMapping,
-    TransactionExecutionInfo,
-)
+from starkware.starknet.business_logic.execution.objects import TransactionExecutionInfo
 from starkware.starknet.business_logic.fact_state.contract_state_objects import StateSelector
 from starkware.starknet.business_logic.state.state import StateSyncifier, UpdatesTrackerState
 from starkware.starknet.business_logic.state.state_api import State, SyncState
@@ -21,8 +17,6 @@ from starkware.starkware_utils.error_handling import wrap_with_stark_exception
 
 logger = logging.getLogger(__name__)
 
-FeeInfo = Tuple[Optional[CallInfo], int]
-
 
 class InternalStateTransaction(EverestInternalStateTransaction, ABC):
     """
@@ -81,16 +75,10 @@ class InternalStateTransaction(EverestInternalStateTransaction, ABC):
         concurrent_execution_info = self.apply_concurrent_changes(
             state=state, general_config=general_config
         )
-        fee_transfer_info, actual_fee = self.apply_sequential_changes(
+        return self.apply_sequential_changes(
             state=state,
             general_config=general_config,
-            actual_resources=concurrent_execution_info.actual_resources,
-        )
-
-        return TransactionExecutionInfo.from_concurrent_stage_execution_info(
             concurrent_execution_info=concurrent_execution_info,
-            fee_transfer_info=fee_transfer_info,
-            actual_fee=actual_fee,
         )
 
     def apply_concurrent_changes(
@@ -113,8 +101,8 @@ class InternalStateTransaction(EverestInternalStateTransaction, ABC):
         self,
         state: SyncState,
         general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> Optional[TransactionExecutionInfo]:
         """
         Applies the parts of the transaction needed to be executed sequentially to enable
         efficient concurrency, as they are likely to collide in a concurrent execution,
@@ -128,7 +116,7 @@ class InternalStateTransaction(EverestInternalStateTransaction, ABC):
             return self._apply_specific_sequential_changes(
                 state=state,
                 general_config=general_config,
-                actual_resources=actual_resources,
+                concurrent_execution_info=concurrent_execution_info,
             )
 
     @abstractmethod
@@ -145,8 +133,8 @@ class InternalStateTransaction(EverestInternalStateTransaction, ABC):
         self,
         state: SyncState,
         general_config: StarknetGeneralConfig,
-        actual_resources: ResourcesMapping,
-    ) -> FeeInfo:
+        concurrent_execution_info: TransactionExecutionInfo,
+    ) -> Optional[TransactionExecutionInfo]:
         """
         A specific implementation of apply_sequential_changes for each internal transaction.
         See apply_sequential_changes.
diff --git a/src/starkware/starknet/business_logic/utils.py b/src/starkware/starknet/business_logic/utils.py
index f63bc9f..15660fe 100644
--- a/src/starkware/starknet/business_logic/utils.py
+++ b/src/starkware/starknet/business_logic/utils.py
@@ -48,7 +48,14 @@ def get_return_values(runner: CairoFunctionRunner) -> List[int]:
         exception_types=[Exception],
     ):
         ret_data_size, ret_data_ptr = runner.get_return_values(2)
-        values = runner.memory.get_range(ret_data_ptr, ret_data_size)
+
+        try: 
+            # CAIRO-RS VERSION
+            values = runner.get_range(ret_data_ptr, ret_data_size)
+        except:
+            # ORIGINAL VERSION
+            values = runner.memory.get_range(ret_data_ptr, ret_data_size)
+
 
     stark_assert(
         all(isinstance(value, int) for value in values),
diff --git a/src/starkware/starknet/cli/CMakeLists.txt b/src/starkware/starknet/cli/CMakeLists.txt
index 01fbccc..1d90914 100644
--- a/src/starkware/starknet/cli/CMakeLists.txt
+++ b/src/starkware/starknet/cli/CMakeLists.txt
@@ -2,7 +2,6 @@ python_lib(starknet_cli_lib
     PREFIX starkware/starknet/cli
 
     FILES
-    class_hash.py
     reconstruct_starknet_traceback.py
     starknet_cli.py
 
@@ -23,7 +22,6 @@ python_lib(starknet_cli_lib
     starknet_feeder_gateway_response_objects_lib
     starknet_gateway_client_lib
     starknet_general_config_lib
-    starknet_os_abi_lib
     starknet_standard_wallets_lib
     starknet_transaction_lib
     starknet_wallets_lib
diff --git a/src/starkware/starknet/cli/class_hash.py b/src/starkware/starknet/cli/class_hash.py
deleted file mode 100644
index c634d59..0000000
--- a/src/starkware/starknet/cli/class_hash.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import argparse
-
-from starkware.cairo.lang.version import __version__
-from starkware.cairo.lang.vm.crypto import get_crypto_lib_context_manager
-from starkware.starknet.core.os.class_hash import compute_class_hash
-from starkware.starknet.services.api.contract_class import ContractClass
-
-
-def main():
-    parser = argparse.ArgumentParser(
-        description="A tool to compute the class hash of a StarkNet contract"
-    )
-    parser.add_argument("-v", "--version", action="version", version=f"%(prog)s {__version__}")
-    parser.add_argument(
-        "compiled_contract",
-        type=argparse.FileType("r"),
-        help="The name of the contract JSON file.",
-    )
-    parser.add_argument(
-        "--flavor",
-        type=str,
-        default="Release",
-        choices=["Debug", "Release", "RelWithDebInfo"],
-        help="Build flavor",
-    )
-    args = parser.parse_args()
-
-    with get_crypto_lib_context_manager(args.flavor):
-        compiled_contract = ContractClass.loads(data=args.compiled_contract.read())
-        print(hex(compute_class_hash(compiled_contract)))
-
-
-if __name__ == "__main__":
-    main()
diff --git a/src/starkware/starknet/cli/starknet_cli.py b/src/starkware/starknet/cli/starknet_cli.py
index ddca7c6..989b04b 100755
--- a/src/starkware/starknet/cli/starknet_cli.py
+++ b/src/starkware/starknet/cli/starknet_cli.py
@@ -68,7 +68,7 @@ NETWORKS = {
 
 CHAIN_IDS = {
     "alpha-goerli": StarknetChainId.TESTNET.value,
-    "alpha-goerli2": StarknetChainId.TESTNET2.value,
+    "alpha-goerli2": StarknetChainId.TESTNET.value,
     "alpha-mainnet": StarknetChainId.MAINNET.value,
 }
 
diff --git a/src/starkware/starknet/common/messages.cairo b/src/starkware/starknet/common/messages.cairo
index dea531d..ab23bf6 100644
--- a/src/starkware/starknet/common/messages.cairo
+++ b/src/starkware/starknet/common/messages.cairo
@@ -6,8 +6,7 @@ func send_message_to_l1{syscall_ptr: felt*}(to_address: felt, payload_size: felt
         selector=SEND_MESSAGE_TO_L1_SELECTOR,
         to_address=to_address,
         payload_size=payload_size,
-        payload_ptr=payload,
-    );
+        payload_ptr=payload);
     %{ syscall_handler.send_message_to_l1(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let syscall_ptr = syscall_ptr + SendMessageToL1SysCall.SIZE;
     return ();
diff --git a/src/starkware/starknet/common/syscalls.cairo b/src/starkware/starknet/common/syscalls.cairo
index feaea9a..c0a752c 100644
--- a/src/starkware/starknet/common/syscalls.cairo
+++ b/src/starkware/starknet/common/syscalls.cairo
@@ -48,8 +48,7 @@ func call_contract{syscall_ptr: felt*}(
         contract_address=contract_address,
         function_selector=function_selector,
         calldata_size=calldata_size,
-        calldata=calldata,
-    );
+        calldata=calldata);
     %{ syscall_handler.call_contract(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let response = syscall.response;
 
@@ -91,8 +90,7 @@ func library_call{syscall_ptr: felt*}(
         class_hash=class_hash,
         function_selector=function_selector,
         calldata_size=calldata_size,
-        calldata=calldata,
-    );
+        calldata=calldata);
     %{ syscall_handler.library_call(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let response = syscall.response;
 
@@ -113,8 +111,7 @@ func library_call_l1_handler{syscall_ptr: felt*}(
         class_hash=class_hash,
         function_selector=function_selector,
         calldata_size=calldata_size,
-        calldata=calldata,
-    );
+        calldata=calldata);
     %{ syscall_handler.library_call_l1_handler(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let response = syscall.response;
 
@@ -168,8 +165,7 @@ func deploy{syscall_ptr: felt*}(
         contract_address_salt=contract_address_salt,
         constructor_calldata_size=constructor_calldata_size,
         constructor_calldata=constructor_calldata,
-        deploy_from_zero=deploy_from_zero,
-    );
+        deploy_from_zero=deploy_from_zero);
 
     %{ syscall_handler.deploy(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let response = syscall.response;
@@ -369,8 +365,7 @@ struct StorageWrite {
 
 func storage_write{syscall_ptr: felt*}(address: felt, value: felt) {
     assert [cast(syscall_ptr, StorageWrite*)] = StorageWrite(
-        selector=STORAGE_WRITE_SELECTOR, address=address, value=value
-    );
+        selector=STORAGE_WRITE_SELECTOR, address=address, value=value);
     %{ syscall_handler.storage_write(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let syscall_ptr = syscall_ptr + StorageWrite.SIZE;
     return ();
@@ -389,8 +384,7 @@ struct EmitEvent {
 
 func emit_event{syscall_ptr: felt*}(keys_len: felt, keys: felt*, data_len: felt, data: felt*) {
     assert [cast(syscall_ptr, EmitEvent*)] = EmitEvent(
-        selector=EMIT_EVENT_SELECTOR, keys_len=keys_len, keys=keys, data_len=data_len, data=data
-    );
+        selector=EMIT_EVENT_SELECTOR, keys_len=keys_len, keys=keys, data_len=data_len, data=data);
     %{ syscall_handler.emit_event(segments=segments, syscall_ptr=ids.syscall_ptr) %}
     let syscall_ptr = syscall_ptr + EmitEvent.SIZE;
     return ();
diff --git a/src/starkware/starknet/compiler/data_encoder.py b/src/starkware/starknet/compiler/data_encoder.py
index 8ab5442..93e4adb 100644
--- a/src/starkware/starknet/compiler/data_encoder.py
+++ b/src/starkware/starknet/compiler/data_encoder.py
@@ -333,12 +333,8 @@ def decode_data(
     )
     parser.run(arguments)
     args = parser.args
-    has_trailing_comma = len(args) > 0
     return parser.code_elements, ArgList(
-        args=args,
-        notes=[Notes()] * (len(args) + 1),
-        has_trailing_comma=has_trailing_comma,
-        location=location,
+        args=args, notes=[Notes()] * (len(args) + 1), has_trailing_comma=True, location=location
     )
 
 
diff --git a/src/starkware/starknet/compiler/data_encoder_test.py b/src/starkware/starknet/compiler/data_encoder_test.py
index 11671ad..e07ebf0 100644
--- a/src/starkware/starknet/compiler/data_encoder_test.py
+++ b/src/starkware/starknet/compiler/data_encoder_test.py
@@ -104,7 +104,8 @@ tempvar __calldata_ptr = __calldata_ptr + __calldata_arg_a_len * 4;
 let __calldata_arg_b = [__calldata_ptr];
 let __calldata_ptr = __calldata_ptr + 1;
 
-let __calldata_arg_c = [cast(__calldata_ptr, (felt, (felt, felt))*)];
+let __calldata_arg_c = [
+    cast(__calldata_ptr, (felt, (felt, felt))*)];
 let __calldata_ptr = __calldata_ptr + 3;
 
 let __calldata_actual_size = __calldata_ptr - cast(data_ptr, felt*);
diff --git a/src/starkware/starknet/core/os/block_context.cairo b/src/starkware/starknet/core/os/block_context.cairo
index 95d2874..7a0ffdf 100644
--- a/src/starkware/starknet/core/os/block_context.cairo
+++ b/src/starkware/starknet/core/os/block_context.cairo
@@ -43,13 +43,11 @@ func get_block_context{pedersen_ptr: HashBuiltin*, range_check_ptr}() -> (
         sequencer_address=nondet %{ os_input.general_config.sequencer_address %},
         block_info=BlockInfo(
             block_timestamp=nondet %{ syscall_handler.block_info.block_timestamp %},
-            block_number=nondet %{ syscall_handler.block_info.block_number %},
-        ),
+            block_number=nondet %{ syscall_handler.block_info.block_number %}),
         starknet_os_config=StarknetOsConfig(
             chain_id=nondet %{ os_input.general_config.chain_id.value %},
-            fee_token_address=nondet %{ os_input.general_config.fee_token_address %},
-        ),
-    );
+            fee_token_address=nondet %{ os_input.general_config.fee_token_address %}
+            ));
 
     let (__fp__, _) = get_fp_and_pc();
     return (block_context=&block_context);
diff --git a/src/starkware/starknet/core/os/builtins.cairo b/src/starkware/starknet/core/os/builtins.cairo
index e467a68..c2d9506 100644
--- a/src/starkware/starknet/core/os/builtins.cairo
+++ b/src/starkware/starknet/core/os/builtins.cairo
@@ -46,19 +46,17 @@ func get_builtin_params() -> (builtin_params: BuiltinParams*) {
         range_check='range_check',
         ecdsa='ecdsa',
         bitwise='bitwise',
-        ec_op='ec_op',
-    );
+        ec_op='ec_op');
 
     local builtin_instance_sizes: BuiltinInstanceSizes = BuiltinInstanceSizes(
         pedersen=HashBuiltin.SIZE,
         range_check=1,
         ecdsa=SignatureBuiltin.SIZE,
         bitwise=BitwiseBuiltin.SIZE,
-        ec_op=EcOpBuiltin.SIZE,
-    );
+        ec_op=EcOpBuiltin.SIZE);
 
     local builtin_params: BuiltinParams = BuiltinParams(
-        builtin_encodings=&builtin_encodings, builtin_instance_sizes=&builtin_instance_sizes
-    );
+        builtin_encodings=&builtin_encodings,
+        builtin_instance_sizes=&builtin_instance_sizes);
     return (builtin_params=&builtin_params);
 }
diff --git a/src/starkware/starknet/core/os/class_hash.py b/src/starkware/starknet/core/os/class_hash.py
index 132fb21..4cdfa69 100644
--- a/src/starkware/starknet/core/os/class_hash.py
+++ b/src/starkware/starknet/core/os/class_hash.py
@@ -5,9 +5,10 @@ import json
 import os
 from contextvars import ContextVar
 from functools import lru_cache
-from typing import Callable, List, Optional
+from typing import Any, Callable, Dict, List, Optional, Tuple
 
 import cachetools
+import cairo_rs_py
 
 from starkware.cairo.common.cairo_function_runner import CairoFunctionRunner
 from starkware.cairo.common.structs import CairoStructFactory, CairoStructProxy
@@ -23,6 +24,10 @@ from starkware.cairo.lang.vm.crypto import pedersen_hash
 from starkware.python.utils import from_bytes
 from starkware.starknet.public.abi import starknet_keccak
 from starkware.starknet.services.api.contract_class import ContractClass, EntryPointType
+# Added Imports
+from starkware.cairo.lang.vm.relocatable import MaybeRelocatable, RelocatableValue
+from starkware.cairo.lang.vm.vm_exceptions import SecurityError, VmException
+from starkware.python.utils import safe_zip
 
 CAIRO_FILE = os.path.join(os.path.dirname(__file__), "contracts.cairo")
 
@@ -77,17 +82,17 @@ def compute_class_hash_inner(
     contract_class_struct = get_contract_class_struct(
         identifiers=program.identifiers, contract_class=contract_class
     )
-    runner = CairoFunctionRunner(program)
 
-    hash_builtin = HashBuiltinRunner(
-        name="custom_hasher", included=True, ratio=32, hash_func=hash_func
-    )
-    runner.builtin_runners["hash_builtin"] = hash_builtin
-    hash_builtin.initialize_segments(runner)
+    runner = cairo_rs_py.CairoRunner(program=program.dumps(), entrypoint=None, layout="all", proof_mode=False)
+    runner.initialize_function_runner()
+    hash_ptr = runner.add_additional_hash_builtin()
+
 
-    runner.run(
+    run_function_runner(
+        runner,
+        program,
         "starkware.starknet.core.os.contracts.class_hash",
-        hash_ptr=hash_builtin.base,
+        hash_ptr=hash_ptr,
         contract_class=contract_class_struct,
         use_full_name=True,
         verify_secure=False,
@@ -194,3 +199,103 @@ def get_contract_class_struct(
         bytecode_length=len(contract_class.program.data),
         bytecode_ptr=contract_class.program.data,
     )
+
+def run_function_runner(
+        runner,
+        program,
+        func_name: str,
+        *args,
+        hint_locals: Optional[Dict[str, Any]] = None,
+        static_locals: Optional[Dict[str, Any]] = None,
+        verify_secure: Optional[bool] = None,
+        trace_on_failure: bool = False,
+        apply_modulo_to_args: Optional[bool] = None,
+        use_full_name: bool = False,
+        verify_implicit_args_segment: bool = False,
+        **kwargs,
+    ) -> Tuple[Tuple[MaybeRelocatable, ...], Tuple[MaybeRelocatable, ...]]:
+        """
+        Runs func_name(*args).
+        args are converted to Cairo-friendly ones using gen_arg.
+
+        Returns the return values of the function, splitted into 2 tuples of implicit values and
+        explicit values. Structs will be flattened to a sequence of felts as part of the returned
+        tuple.
+
+        Additional params:
+        verify_secure - Run verify_secure_runner to do extra verifications.
+        trace_on_failure - Run the tracer in case of failure to help debugging.
+        apply_modulo_to_args - Apply modulo operation on integer arguments.
+        use_full_name - Treat 'func_name' as a fully qualified identifier name, rather than a
+          relative one.
+        verify_implicit_args_segment - For each implicit argument, verify that the argument and the
+          return value are in the same segment.
+        """
+        assert isinstance(program, Program)
+        entrypoint = program.get_label(func_name, full_name_lookup=use_full_name)
+
+        #Construct Fu
+        structs_factory = CairoStructFactory.from_program(program=program)
+        func = ScopedName.from_string(scope=func_name)
+
+        full_args_struct = structs_factory.build_func_args(func=func)
+        all_args = full_args_struct(*args, **kwargs)
+
+        try:
+            runner.run_from_entrypoint(
+                entrypoint,
+                all_args,
+                typed_args=True,
+                hint_locals=hint_locals,
+                static_locals=static_locals,
+                verify_secure=verify_secure,
+                apply_modulo_to_args=apply_modulo_to_args,
+            )
+        except (VmException, SecurityError, AssertionError) as ex:
+            if trace_on_failure:
+                print(
+                    f"""\
+Got {type(ex).__name__} exception during the execution of {func_name}:
+{str(ex)}
+"""
+                )
+                #trace_runner(runner=runner)
+            raise
+
+        # The number of implicit arguments is identical to the number of implicit return values.
+        n_implicit_ret_vals = structs_factory.get_implicit_args_length(func=func)
+        n_explicit_ret_vals = structs_factory.get_explicit_return_values_length(func=func)
+        n_ret_vals = n_explicit_ret_vals + n_implicit_ret_vals
+        implicit_retvals = tuple(
+            runner.get_range(
+                runner.vm.run_context.ap - n_ret_vals, n_implicit_ret_vals
+            )
+        )
+
+        explicit_retvals = tuple(
+            runner.get_range(
+                runner.vm.run_context.ap - n_explicit_ret_vals, n_explicit_ret_vals
+            )
+        )
+
+        # Verify the memory segments of the implicit arguments.
+        if verify_implicit_args_segment:
+            implicit_args = all_args[:n_implicit_ret_vals]
+            for implicit_arg, implicit_retval in safe_zip(implicit_args, implicit_retvals):
+                assert isinstance(
+                    implicit_arg, RelocatableValue
+                ), f"Implicit arguments must be RelocatableValues, {implicit_arg} is not."
+                assert isinstance(implicit_retval, RelocatableValue), (
+                    f"Argument {implicit_arg} is a RelocatableValue, but the returned value "
+                    f"{implicit_retval} is not."
+                )
+                assert implicit_arg.segment_index == implicit_retval.segment_index, (
+                    f"Implicit argument {implicit_arg} is not on the same segment as the returned "
+                    f"{implicit_retval}."
+                )
+                assert implicit_retval.offset >= implicit_arg.offset, (
+                    f"The offset of the returned implicit argument {implicit_retval} is less than "
+                    f"the offset of the input {implicit_arg}."
+                )
+
+        return implicit_retvals, explicit_retvals
diff --git a/src/starkware/starknet/core/os/os_config/os_config_hash.json b/src/starkware/starknet/core/os/os_config/os_config_hash.json
index b736d66..2bb8f2e 100644
--- a/src/starkware/starknet/core/os/os_config/os_config_hash.json
+++ b/src/starkware/starknet/core/os/os_config/os_config_hash.json
@@ -1,5 +1,4 @@
 {
-    "MAINNET": "0x17c0bc29d31e9a7d14671610a7626264ce9ce8e3ed066a4775adf9b123de9dd",
-    "TESTNET": "0x36f5e4ea4dd042801c8841e3db8e654124305da0f11824fc1db60c405dbb39f",
-    "TESTNET2": "0x4752422aeb949603d5e60bbd3f880ef4e8f523fa22f983386877fa5c19c2b72"
+    "mainnet": "0x17c0bc29d31e9a7d14671610a7626264ce9ce8e3ed066a4775adf9b123de9dd",
+    "testnet": "0x36f5e4ea4dd042801c8841e3db8e654124305da0f11824fc1db60c405dbb39f"
 }
diff --git a/src/starkware/starknet/core/os/os_config/os_config_hash_test.py b/src/starkware/starknet/core/os/os_config/os_config_hash_test.py
index 4b1faf0..9deeff6 100644
--- a/src/starkware/starknet/core/os/os_config/os_config_hash_test.py
+++ b/src/starkware/starknet/core/os/os_config/os_config_hash_test.py
@@ -65,9 +65,14 @@ def test_get_starknet_config_hash(seed: int):
 
 def run_starknet_os_config_hash_test(fix: bool):
     configs = {
-        chain_id.name: StarknetOsConfig(chain_id=chain_id, fee_token_address=FEE_TOKEN_ADDRESS)
-        for chain_id in StarknetChainId
+        "mainnet": StarknetOsConfig(
+            chain_id=StarknetChainId.MAINNET, fee_token_address=FEE_TOKEN_ADDRESS
+        ),
+        "testnet": StarknetOsConfig(
+            chain_id=StarknetChainId.TESTNET, fee_token_address=FEE_TOKEN_ADDRESS
+        ),
     }
+
     config_hashes = {
         config_name: hex(calculate_starknet_config_hash(starknet_os_config=config))
         for config_name, config in configs.items()
diff --git a/src/starkware/starknet/core/os/os_utils.py b/src/starkware/starknet/core/os/os_utils.py
index 20bd521..5bfc97a 100644
--- a/src/starkware/starknet/core/os/os_utils.py
+++ b/src/starkware/starknet/core/os/os_utils.py
@@ -43,18 +43,23 @@ def update_builtin_pointers(
 
     return return_builtins
 
-
 def prepare_os_context(runner: CairoFunctionRunner) -> List[MaybeRelocatable]:
-    syscall_segment = runner.segments.add()
-    os_context: List[MaybeRelocatable] = [syscall_segment]
-
-    for builtin in runner.program.builtins:
-        builtin_runner = runner.builtin_runners[f"{builtin}_builtin"]
-        os_context.extend(builtin_runner.initial_stack())
+    # CAIRO-RS VERSION
+    try: 
+        syscall_segment = runner.add_segment()
+        os_context: List[MaybeRelocatable] = [syscall_segment]
+        os_context.extend(runner.get_program_builtins_initial_stack())
+    # ORIGINAL VERSION
+    except:
+        syscall_segment = runner.segments.add()
+        os_context: List[MaybeRelocatable] = [syscall_segment]
+
+        for builtin in runner.program.builtins:
+            builtin_runner = runner.builtin_runners[f"{builtin}_builtin"]
+            os_context.extend(builtin_runner.initial_stack())
 
     return os_context
 
-
 def validate_and_process_os_context(
     runner: CairoFunctionRunner,
     syscall_handler: syscall_utils.BusinessLogicSysCallHandler,
@@ -64,14 +69,23 @@ def validate_and_process_os_context(
     Validates and processes an OS context that was returned by a transaction.
     Returns the syscall processor object containing the accumulated syscall information.
     """
-    # The returned values are os_context, retdata_size, retdata_ptr.
-    os_context_end = runner.vm.run_context.ap - 2
-    stack_ptr = os_context_end
-    for builtin in runner.program.builtins[::-1]:
-        builtin_runner = runner.builtin_runners[f"{builtin}_builtin"]
+    # CAIRO-RS VERSION
+    try:
+        os_context_end = runner.vm.run_context.ap - 2
+        stack_ptr = os_context_end
+        # The returned values are os_context, retdata_size, retdata_ptr.
+        stack_ptr = runner.get_builtins_final_stack(stack_ptr)
+    # ORIGINAL VERSION
+    except:
+        os_context_end = runner.vm.run_context.ap - 2
+
+        stack_ptr = os_context_end
 
-        with wrap_with_stark_exception(code=StarknetErrorCode.SECURITY_ERROR):
-            stack_ptr = builtin_runner.final_stack(runner=runner, pointer=stack_ptr)
+        for builtin in runner.program.builtins[::-1]:
+            builtin_runner = runner.builtin_runners[f"{builtin}_builtin"]
+
+            with wrap_with_stark_exception(code=StarknetErrorCode.SECURITY_ERROR):
+                stack_ptr = builtin_runner.final_stack(runner=runner, pointer=stack_ptr)
 
     final_os_context_ptr = stack_ptr - 1
     assert final_os_context_ptr + len(initial_os_context) == os_context_end
@@ -81,9 +95,19 @@ def validate_and_process_os_context(
         runner=runner, ptr_offset=SYSCALL_PTR_OFFSET, os_context=initial_os_context
     )
 
-    segment_utils.validate_segment_pointers(
-        segments=runner.segments,
-        segment_base_ptr=syscall_base_ptr,
-        segment_stop_ptr=syscall_stop_ptr,
-    )
+    # ORIGINAL VERSION
+    try: 
+        segment_utils.validate_segment_pointers(
+            segments=runner,
+            segment_base_ptr=syscall_base_ptr,
+            segment_stop_ptr=syscall_stop_ptr,
+        )
+    # CAIRO-RS VERSION
+    except:
+        segment_utils.validate_segment_pointers(
+            segments=runner.segments,
+            segment_base_ptr=syscall_base_ptr,
+            segment_stop_ptr=syscall_stop_ptr,
+        )
+
     syscall_handler.post_run(runner=runner, syscall_stop_ptr=syscall_stop_ptr)
diff --git a/src/starkware/starknet/core/os/output.cairo b/src/starkware/starknet/core/os/output.cairo
index 0628e43..97765e9 100644
--- a/src/starkware/starknet/core/os/output.cairo
+++ b/src/starkware/starknet/core/os/output.cairo
@@ -67,8 +67,8 @@ func os_output_serialize{output_ptr: felt*}(
     serialize_word(starknet_os_config_hash);
 
     let messages_to_l1_segment_size = (
-        final_carried_outputs.messages_to_l1 - initial_carried_outputs.messages_to_l1
-    );
+        final_carried_outputs.messages_to_l1 -
+        initial_carried_outputs.messages_to_l1);
     serialize_word(messages_to_l1_segment_size);
 
     // Relocate 'messages_to_l1_segment' to the correct place in the output segment.
@@ -76,8 +76,8 @@ func os_output_serialize{output_ptr: felt*}(
     let output_ptr = cast(final_carried_outputs.messages_to_l1, felt*);
 
     let messages_to_l2_segment_size = (
-        final_carried_outputs.messages_to_l2 - initial_carried_outputs.messages_to_l2
-    );
+        final_carried_outputs.messages_to_l2 -
+        initial_carried_outputs.messages_to_l2);
     serialize_word(messages_to_l2_segment_size);
 
     // Relocate 'messages_to_l2_segment' to the correct place in the output segment.
@@ -88,8 +88,8 @@ func os_output_serialize{output_ptr: felt*}(
     let da_start = output_ptr;
 
     let deployment_info_segment_size = (
-        final_carried_outputs.deployment_info - initial_carried_outputs.deployment_info
-    );
+        final_carried_outputs.deployment_info -
+        initial_carried_outputs.deployment_info);
     serialize_word(deployment_info_segment_size);
 
     // Relocate 'deployment_info_segment' to the correct place in the output segment.
diff --git a/src/starkware/starknet/core/os/segment_utils.py b/src/starkware/starknet/core/os/segment_utils.py
index 1d09414..64a5741 100644
--- a/src/starkware/starknet/core/os/segment_utils.py
+++ b/src/starkware/starknet/core/os/segment_utils.py
@@ -8,7 +8,7 @@ from starkware.starknet.definitions.error_codes import StarknetErrorCode
 from starkware.starknet.public.abi import SYSCALL_PTR_OFFSET
 from starkware.starkware_utils.error_handling import stark_assert, wrap_with_stark_exception
 
-
+# LAMBDA MODIFIED
 def get_os_segment_ptr_range(
     runner: CairoFunctionRunner, ptr_offset: int, os_context: List[MaybeRelocatable]
 ) -> Tuple[MaybeRelocatable, MaybeRelocatable]:
@@ -21,10 +21,23 @@ def get_os_segment_ptr_range(
     ), f"Illegal OS ptr offset; must be one of: {allowed_offsets}."
 
     # The returned values are os_context, retdata_size, retdata_ptr.
-    os_context_end = runner.vm.run_context.ap - 2
+    # CAIRO-RS VERSION
+    try:
+        os_context_end = runner.vm.run_context.ap - 2
+    except:
+    # ORIGINAL VERSION
+        os_context_end = runner.vm.run_context.ap - 2
+
     final_os_context_ptr = os_context_end - len(os_context)
 
-    return os_context[ptr_offset], runner.vm_memory[final_os_context_ptr + ptr_offset]
+    # CAIRO-RS VERSION
+    try:
+        return os_context[ptr_offset], runner.get(final_os_context_ptr + ptr_offset)
+    # ORIGINAL VERSION
+    except:
+        return os_context[ptr_offset], runner.vm_memory[final_os_context_ptr + ptr_offset]
+
+
 
 
 def get_os_segment_stop_ptr(
@@ -61,14 +74,19 @@ def validate_segment_pointers(
     segment_base_ptr: MaybeRelocatable,
     segment_stop_ptr: MaybeRelocatable,
 ):
-    assert isinstance(segment_base_ptr, RelocatableValue)
+    # assert isinstance(segment_base_ptr, RelocatableValue)
     assert (
         segment_base_ptr.offset == 0
     ), f"Segment base pointer must be zero; got {segment_base_ptr.offset}."
 
-    expected_stop_ptr = segment_base_ptr + segments.get_segment_used_size(
-        segment_index=segment_base_ptr.segment_index
-    )
+    # CAIRO-RS VERSION
+    try: 
+        expected_stop_ptr = segment_base_ptr + segments.get_segment_used_size(
+            index=segment_base_ptr.segment_index)
+   # ORIGINAL VERSION 
+    except:
+        expected_stop_ptr = segment_base_ptr + segments.get_segment_used_size(
+            segment_index=segment_base_ptr.segment_index)
 
     stark_assert(
         expected_stop_ptr == segment_stop_ptr,
diff --git a/src/starkware/starknet/core/os/state.cairo b/src/starkware/starknet/core/os/state.cairo
index 0d3575f..ba59a78 100644
--- a/src/starkware/starknet/core/os/state.cairo
+++ b/src/starkware/starknet/core/os/state.cairo
@@ -62,8 +62,7 @@ func serialize_da_changes{storage_updates: StorageUpdateEntry*}(
         tempvar storage_updates = storage_updates;
     } else {
         assert [storage_updates] = StorageUpdateEntry(
-            key=update_ptr.key, value=update_ptr.new_value
-        );
+            key=update_ptr.key, value=update_ptr.new_value);
         tempvar storage_updates = storage_updates + StorageUpdateEntry.SIZE;
     }
     return serialize_da_changes(update_ptr=update_ptr + DictAccess.SIZE, n_updates=n_updates - 1);
diff --git a/src/starkware/starknet/core/os/syscall_utils.py b/src/starkware/starknet/core/os/syscall_utils.py
index 48645a0..f7e162f 100644
--- a/src/starkware/starknet/core/os/syscall_utils.py
+++ b/src/starkware/starknet/core/os/syscall_utils.py
@@ -17,8 +17,6 @@ from typing import (
     cast,
 )
 
-import cachetools
-
 from starkware.cairo.common.cairo_function_runner import CairoFunctionRunner
 from starkware.cairo.common.structs import CairoStructFactory, CairoStructProxy
 from starkware.cairo.lang.compiler.ast.cairo_types import CairoType, TypeFelt, TypePointer
@@ -64,7 +62,6 @@ class SysCallInfo:
     syscall_size: int
 
 
-@cachetools.cached(cache={})
 def get_syscall_structs_and_info() -> Tuple[CairoStructProxy, Dict[str, SysCallInfo]]:
     with open(STARKNET_SYSCALLS_COMPILED_PATH, "r") as file:
         syscall_program = Program.loads(data=file.read())
@@ -170,6 +167,10 @@ def get_syscall_structs_and_info() -> Tuple[CairoStructProxy, Dict[str, SysCallI
     return syscall_structs, syscall_info
 
 
+# Global variables; cached at this point for child processes.
+SYSCALL_STRUCTS, SYSCALL_INFO = get_syscall_structs_and_info()
+
+
 @dataclasses.dataclass
 class HandlerException(Exception):
     """
@@ -178,6 +179,9 @@ class HandlerException(Exception):
 
     called_contract_address: int
     stark_exception: StarkException
+        
+    def __str__(self) -> str:
+        return self.stark_exception.message
 
 
 class SysCallHandlerBase(ABC):
@@ -188,8 +192,6 @@ class SysCallHandlerBase(ABC):
     def __init__(self, block_info: BlockInfo):
         self.block_info = block_info
 
-        self.syscall_structs, self.syscall_info = get_syscall_structs_and_info()
-
     # Public API.
 
     def call_contract(self, segments: MemorySegmentManager, syscall_ptr: RelocatableValue):
@@ -218,7 +220,7 @@ class SysCallHandlerBase(ABC):
         Handles the deploy system call.
         """
         contract_address = self._deploy(segments=segments, syscall_ptr=syscall_ptr)
-        response = self.syscall_structs.DeployResponse(
+        response = SYSCALL_STRUCTS.DeployResponse(
             contract_address=contract_address,
             constructor_retdata_size=0,
             constructor_retdata=0,
@@ -239,7 +241,7 @@ class SysCallHandlerBase(ABC):
         """
         caller_address = self._get_caller_address(segments=segments, syscall_ptr=syscall_ptr)
 
-        response = self.syscall_structs.GetCallerAddressResponse(caller_address=caller_address)
+        response = SYSCALL_STRUCTS.GetCallerAddressResponse(caller_address=caller_address)
         self._write_syscall_response(
             syscall_name="GetCallerAddress",
             response=response,
@@ -250,9 +252,7 @@ class SysCallHandlerBase(ABC):
     def get_contract_address(self, segments: MemorySegmentManager, syscall_ptr: RelocatableValue):
         contract_address = self._get_contract_address(segments=segments, syscall_ptr=syscall_ptr)
 
-        response = self.syscall_structs.GetContractAddressResponse(
-            contract_address=contract_address
-        )
+        response = SYSCALL_STRUCTS.GetContractAddressResponse(contract_address=contract_address)
         self._write_syscall_response(
             syscall_name="GetContractAddress",
             response=response,
@@ -270,7 +270,7 @@ class SysCallHandlerBase(ABC):
 
         block_number = self.block_info.block_number
 
-        response = self.syscall_structs.GetBlockNumberResponse(block_number=block_number)
+        response = SYSCALL_STRUCTS.GetBlockNumberResponse(block_number=block_number)
         self._write_syscall_response(
             syscall_name="GetBlockNumber",
             response=response,
@@ -286,7 +286,7 @@ class SysCallHandlerBase(ABC):
             syscall_name="get_sequencer_address", segments=segments, syscall_ptr=syscall_ptr
         )
 
-        response = self.syscall_structs.GetSequencerAddressResponse(
+        response = SYSCALL_STRUCTS.GetSequencerAddressResponse(
             sequencer_address=0
             if self.block_info.sequencer_address is None
             else self.block_info.sequencer_address
@@ -306,7 +306,7 @@ class SysCallHandlerBase(ABC):
             syscall_name="get_tx_info", segments=segments, syscall_ptr=syscall_ptr
         )
 
-        response = self.syscall_structs.GetTxInfoResponse(
+        response = SYSCALL_STRUCTS.GetTxInfoResponse(
             tx_info=self._get_tx_info_ptr(segments=segments)
         )
         self._write_syscall_response(
@@ -329,7 +329,7 @@ class SysCallHandlerBase(ABC):
 
         block_timestamp = self.block_info.block_timestamp
 
-        response = self.syscall_structs.GetBlockTimestampResponse(block_timestamp=block_timestamp)
+        response = SYSCALL_STRUCTS.GetBlockTimestampResponse(block_timestamp=block_timestamp)
         self._write_syscall_response(
             syscall_name="GetBlockTimestamp",
             response=response,
@@ -345,8 +345,8 @@ class SysCallHandlerBase(ABC):
             syscall_name="get_tx_signature", segments=segments, syscall_ptr=syscall_ptr
         )
         tx_info_ptr = self._get_tx_info_ptr(segments=segments)
-        tx_info = self.syscall_structs.TxInfo.from_ptr(memory=segments.memory, addr=tx_info_ptr)
-        response = self.syscall_structs.GetTxSignatureResponse(
+        tx_info = SYSCALL_STRUCTS.TxInfo.from_ptr(memory=segments.memory, addr=tx_info_ptr)
+        response = SYSCALL_STRUCTS.GetTxSignatureResponse(
             signature_len=tx_info.signature_len, signature=tx_info.signature
         )
 
@@ -394,7 +394,7 @@ class SysCallHandlerBase(ABC):
         )
 
         value = self._storage_read(cast(int, request.address))
-        response = self.syscall_structs.StorageReadResponse(value=value)
+        response = SYSCALL_STRUCTS.StorageReadResponse(value=value)
 
         self._write_syscall_response(
             syscall_name="StorageRead",
@@ -426,7 +426,7 @@ class SysCallHandlerBase(ABC):
         """
         Returns the system call request written in the syscall segment, starting at syscall_ptr.
         """
-        syscall_info = self.syscall_info[syscall_name]
+        syscall_info = SYSCALL_INFO[syscall_name]
         return syscall_info.syscall_request_struct.from_ptr(
             memory=segments.memory, addr=syscall_ptr
         )
@@ -448,10 +448,10 @@ class SysCallHandlerBase(ABC):
         syscall_ptr: RelocatableValue,
     ):
         assert (
-            camel_to_snake_case(syscall_name) in self.syscall_info
+            camel_to_snake_case(syscall_name) in SYSCALL_INFO
         ), f"Illegal system call {syscall_name}."
 
-        syscall_struct: CairoStructProxy = getattr(self.syscall_structs, syscall_name)
+        syscall_struct: CairoStructProxy = getattr(SYSCALL_STRUCTS, syscall_name)
         response_offset = syscall_struct.struct_definition_.members["response"].offset
         segments.write_arg(ptr=syscall_ptr + response_offset, arg=response)
 
@@ -461,7 +461,6 @@ class SysCallHandlerBase(ABC):
     ) -> List[int]:
         """
         Returns the call retdata.
-
         syscall_name can be "call_contract", "delegate_call", "delegate_l1_handler", "library_call"
         or "library_call_l1_handler".
         """
@@ -478,7 +477,7 @@ class SysCallHandlerBase(ABC):
         retdata = self._call_contract(
             segments=segments, syscall_ptr=syscall_ptr, syscall_name=syscall_name
         )
-        response = self.syscall_structs.CallContractResponse(
+        response = SYSCALL_STRUCTS.CallContractResponse(
             retdata_size=len(retdata),
             retdata=self._allocate_segment(segments=segments, data=retdata),
         )
@@ -592,7 +591,16 @@ class BusinessLogicSysCallHandler(SysCallHandlerBase):
     def _allocate_segment(
         self, segments: MemorySegmentManager, data: Iterable[MaybeRelocatable]
     ) -> RelocatableValue:
-        segment_start = segments.add()
+        # FIXME: Here "segments" in really a Runner under the hood.
+        # May want to change the variable names.
+
+        # CAIRO-RS VERSION
+        try: 
+            segment_start = segments.add_segment()
+        # ORIGINAL VERSION
+        except:
+            segment_start = segments.add()
+
         segment_end = segments.write_arg(ptr=segment_start, arg=data)
         self.read_only_segments.append((segment_start, segment_end - segment_start))
         return segment_start
@@ -619,7 +627,7 @@ class BusinessLogicSysCallHandler(SysCallHandlerBase):
             syscall_ptr == self.expected_syscall_ptr
         ), f"Bad syscall_ptr, Expected {self.expected_syscall_ptr}, got {syscall_ptr}."
 
-        syscall_info = self.syscall_info[syscall_name]
+        syscall_info = SYSCALL_INFO[syscall_name]
         self.expected_syscall_ptr += syscall_info.syscall_size
 
         selector = request.selector
@@ -634,10 +642,10 @@ class BusinessLogicSysCallHandler(SysCallHandlerBase):
         args_struct_def: StructDefinition = syscall_info.syscall_request_struct.struct_definition_
         for arg, (arg_name, arg_def) in safe_zip(request, args_struct_def.members.items()):
             expected_type = get_runtime_type(arg_def.cairo_type)
-            assert isinstance(arg, expected_type), (
-                f"Argument {arg_name} to syscall {syscall_name} is of unexpected type. "
-                f"Expected: value of type {expected_type}; got: {arg}."
-            )
+            # assert isinstance(arg, expected_type), (
+            #     f"Argument {arg_name} to syscall {syscall_name} is of unexpected type. "
+            #     f"Expected: value of type {expected_type}; got: {arg}."
+            # )
 
         return request
 
@@ -831,7 +839,7 @@ class BusinessLogicSysCallHandler(SysCallHandlerBase):
 
     def _get_tx_info_ptr(self, segments: MemorySegmentManager) -> RelocatableValue:
         if self.tx_info_ptr is None:
-            tx_info = self.syscall_structs.TxInfo(
+            tx_info = SYSCALL_STRUCTS.TxInfo(
                 version=self.tx_execution_context.version,
                 account_contract_address=self.tx_execution_context.account_contract_address,
                 max_fee=self.tx_execution_context.max_fee,
@@ -905,10 +913,20 @@ class BusinessLogicSysCallHandler(SysCallHandlerBase):
         Validates that there were no out of bounds writes to read-only segments and marks
         them as accessed.
         """
-        segments = runner.segments
+        # ORIGINAL VERSION
+        try: 
+            segments = runner.segments
+        # CAIRO-RS VERSION
+        except:
+            segments = runner
 
         for segment_ptr, segment_size in self.read_only_segments:
-            used_size = segments.get_segment_used_size(segment_index=segment_ptr.segment_index)
+            # CAIRO-RS VERSION
+            try:
+                used_size = segments.get_segment_used_size(index=segment_ptr.segment_index)
+            # ORIGINAL VERSION
+            except: 
+                used_size = segments.get_segment_used_size(segment_index=segment_ptr.segment_index)
             stark_assert(
                 used_size == segment_size,
                 code=StarknetErrorCode.SECURITY_ERROR,
@@ -1044,7 +1062,6 @@ class OsSysCallHandler(SysCallHandlerBase):
     def start_tx(self, tx_info_ptr: RelocatableValue):
         """
         Called when starting the execution of a transaction.
-
         'tx_info_ptr' is a pointer to the TxInfo struct corresponding to said transaction.
         """
         assert self.tx_info_ptr is None
@@ -1092,4 +1109,4 @@ class OsSysCallHandler(SysCallHandlerBase):
         Called when skipping the execution of a transaction.
         It replaces a call to start_tx and end_tx.
         """
-        next(self.tx_execution_info_iterator)
+        next(self.tx_execution_info_iterator)
\ No newline at end of file
diff --git a/src/starkware/starknet/core/os/transactions.cairo b/src/starkware/starknet/core/os/transactions.cairo
index fab34f0..8000418 100644
--- a/src/starkware/starknet/core/os/transactions.cairo
+++ b/src/starkware/starknet/core/os/transactions.cairo
@@ -93,33 +93,27 @@ const L1_HANDLER_VERSION = 0;
 
 // get_selector_from_name('constructor').
 const CONSTRUCTOR_ENTRY_POINT_SELECTOR = (
-    0x28ffe4ff0f226a9107253e17a904099aa4f63a02a5621de0576e5aa71bc5194
-);
+    0x28ffe4ff0f226a9107253e17a904099aa4f63a02a5621de0576e5aa71bc5194);
 
 // get_selector_from_name('__execute__').
 const EXECUTE_ENTRY_POINT_SELECTOR = (
-    0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad
-);
+    0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad);
 
 // get_selector_from_name('__validate__').
 const VALIDATE_ENTRY_POINT_SELECTOR = (
-    0x162da33a4585851fe8d3af3c2a9c60b557814e221e0d4f30ff0b2189d9c7775
-);
+    0x162da33a4585851fe8d3af3c2a9c60b557814e221e0d4f30ff0b2189d9c7775);
 
 // get_selector_from_name('__validate_declare__').
 const VALIDATE_DECLARE_ENTRY_POINT_SELECTOR = (
-    0x289da278a8dc833409cabfdad1581e8e7d40e42dcaed693fa4008dcdb4963b3
-);
+    0x289da278a8dc833409cabfdad1581e8e7d40e42dcaed693fa4008dcdb4963b3);
 
 // get_selector_from_name('__validate_deploy__').
 const VALIDATE_DEPLOY_ENTRY_POINT_SELECTOR = (
-    0x36fcbf06cd96843058359e1a75928beacfac10727dab22a3972f0af8aa92895
-);
+    0x36fcbf06cd96843058359e1a75928beacfac10727dab22a3972f0af8aa92895);
 
 // get_selector_from_name('transfer').
 const TRANSFER_ENTRY_POINT_SELECTOR = (
-    0x83afd3f4caedc6eebf44246fe54e38c95e3179a5ec9ea81740eca5b482d12e
-);
+    0x83afd3f4caedc6eebf44246fe54e38c95e3179a5ec9ea81740eca5b482d12e);
 
 const DEFAULT_ENTRY_POINT_SELECTOR = 0;
 
@@ -187,8 +181,7 @@ func execute_transactions{
         range_check=nondet %{ segments.add_temp_segment() %},
         ecdsa=ecdsa_ptr,
         bitwise=bitwise_ptr,
-        ec_op=ec_op_ptr,
-    );
+        ec_op=ec_op_ptr);
 
     let builtin_ptrs = &local_builtin_ptrs;
     %{
@@ -311,14 +304,13 @@ func charge_fee{
 
     // Transactions with fee should go through an account contract.
     tempvar selector = tx_execution_context.selector;
-    assert (selector - EXECUTE_ENTRY_POINT_SELECTOR) * (
-        selector - VALIDATE_DECLARE_ENTRY_POINT_SELECTOR
-    ) * (selector - VALIDATE_DEPLOY_ENTRY_POINT_SELECTOR) = 0;
+    assert (selector - EXECUTE_ENTRY_POINT_SELECTOR) *
+        (selector - VALIDATE_DECLARE_ENTRY_POINT_SELECTOR) *
+        (selector - VALIDATE_DEPLOY_ENTRY_POINT_SELECTOR) = 0;
 
     local calldata: TransferCallData = TransferCallData(
         recipient=block_context.sequencer_address,
-        amount=Uint256(low=nondet %{ syscall_handler.tx_execution_info.actual_fee %}, high=0),
-    );
+        amount=Uint256(low=nondet %{ syscall_handler.tx_execution_info.actual_fee %}, high=0));
 
     // Verify that the charged amount is not larger than the transaction's max_fee field.
     assert_nn_le(calldata.amount.low, max_fee);
@@ -337,7 +329,7 @@ func charge_fee{
         calldata_size=TransferCallData.SIZE,
         calldata=&calldata,
         original_tx_info=original_tx_info,
-    );
+        );
 
     execute_entry_point(block_context=block_context, execution_context=&execution_context);
 
@@ -411,7 +403,7 @@ func execute_invoke_function_transaction{
         transaction_hash=transaction_hash,
         chain_id=chain_id,
         nonce=nonce,
-    );
+        );
 
     check_and_increment_nonce(execution_context=tx_execution_context, nonce=nonce);
 
@@ -468,7 +460,7 @@ func execute_l1_handler_transaction{
         transaction_hash=transaction_hash,
         chain_id=chain_id,
         nonce=nonce,
-    );
+        );
 
     // Consume L1-to-L2 message.
     consume_l1_to_l2_message(execution_context=tx_execution_context, nonce=nonce);
@@ -498,7 +490,7 @@ func get_invoke_tx_execution_context{global_state_changes: DictAccess*}(entry_po
         calldata_size=nondet %{ len(tx.calldata) %},
         calldata=cast(nondet %{ segments.gen_arg(tx.calldata) %}, felt*),
         original_tx_info=cast(nondet %{ segments.add() %}, TxInfo*),
-    );
+        );
 
     return (tx_execution_context=tx_execution_context);
 }
@@ -532,8 +524,7 @@ func check_and_increment_nonce{global_state_changes: DictAccess*}(
     tempvar new_state_entry = new StateEntry(
         class_hash=state_entry.class_hash,
         storage_ptr=state_entry.storage_ptr,
-        nonce=current_nonce + 1,
-    );
+        nonce=current_nonce + 1);
     dict_update{dict_ptr=global_state_changes}(
         key=contract_address,
         prev_value=cast(state_entry, felt),
@@ -571,7 +562,7 @@ func run_validate{
         calldata_size=tx_execution_context.calldata_size,
         calldata=tx_execution_context.calldata,
         original_tx_info=tx_execution_context.original_tx_info,
-    );
+        );
 
     execute_entry_point(block_context=block_context, execution_context=validate_execution_context);
     return ();
@@ -601,7 +592,9 @@ func contract_call_helper{
     %}
     relocate_segment(src_ptr=call_response.retdata, dest_ptr=retdata);
 
-    assert [call_response] = CallContractResponse(retdata_size=retdata_size, retdata=retdata);
+    assert [call_response] = CallContractResponse(
+        retdata_size=retdata_size,
+        retdata=retdata);
     return ();
 }
 
@@ -636,7 +629,7 @@ func execute_contract_call_syscall{
         calldata_size=call_req.calldata_size,
         calldata=call_req.calldata,
         original_tx_info=original_tx_info,
-    );
+        );
 
     return contract_call_helper(
         block_context=block_context,
@@ -670,7 +663,7 @@ func execute_library_call_syscall{
         calldata_size=call_req.calldata_size,
         calldata=call_req.calldata,
         original_tx_info=caller_execution_context.original_tx_info,
-    );
+        );
 
     return contract_call_helper(
         block_context=block_context,
@@ -690,8 +683,7 @@ func execute_deploy_syscall{
     assert request.deploy_from_zero * (request.deploy_from_zero - 1) = 0;
     // Set deployer_address to 0 if request.deploy_from_zero is TRUE.
     let deployer_address = (
-        (1 - request.deploy_from_zero) * caller_execution_context.contract_address
-    );
+        (1 - request.deploy_from_zero) * caller_execution_context.contract_address);
 
     let hash_ptr = builtin_ptrs.pedersen;
     with hash_ptr {
@@ -709,14 +701,14 @@ func execute_deploy_syscall{
         ecdsa=builtin_ptrs.ecdsa,
         bitwise=builtin_ptrs.bitwise,
         ec_op=builtin_ptrs.ec_op,
-    );
+        );
 
     // Fill the syscall response, before contract_address is revoked.
     assert syscall_ptr.response = DeployResponse(
         contract_address=contract_address,
         constructor_retdata_size=0,
         constructor_retdata=cast(0, felt*),
-    );
+        );
 
     tempvar constructor_execution_context = new ExecutionContext(
         entry_point_type=ENTRY_POINT_TYPE_CONSTRUCTOR,
@@ -727,7 +719,7 @@ func execute_deploy_syscall{
         calldata_size=request.constructor_calldata_size,
         calldata=request.constructor_calldata,
         original_tx_info=caller_execution_context.original_tx_info,
-    );
+        );
 
     deploy_contract(
         block_context=block_context, constructor_execution_context=constructor_execution_context
@@ -755,14 +747,14 @@ func execute_storage_read{global_state_changes: DictAccess*}(
     // Update the contract's storage.
     tempvar storage_ptr = state_entry.storage_ptr;
     assert [storage_ptr] = DictAccess(
-        key=syscall_ptr.request.address, prev_value=value, new_value=value
-    );
+        key=syscall_ptr.request.address, prev_value=value, new_value=value);
     let storage_ptr = storage_ptr + DictAccess.SIZE;
 
     // Update global_state_changes.
     assert [new_state_entry] = StateEntry(
-        class_hash=state_entry.class_hash, storage_ptr=storage_ptr, nonce=state_entry.nonce
-    );
+        class_hash=state_entry.class_hash,
+        storage_ptr=storage_ptr,
+        nonce=state_entry.nonce);
     dict_update{dict_ptr=global_state_changes}(
         key=contract_address,
         prev_value=cast(state_entry, felt),
@@ -796,14 +788,14 @@ func execute_storage_write{global_state_changes: DictAccess*}(
     // Update the contract's storage.
     tempvar storage_ptr = state_entry.storage_ptr;
     assert [storage_ptr] = DictAccess(
-        key=syscall_ptr.address, prev_value=prev_value, new_value=syscall_ptr.value
-    );
+        key=syscall_ptr.address, prev_value=prev_value, new_value=syscall_ptr.value);
     let storage_ptr = storage_ptr + DictAccess.SIZE;
 
     // Update global_state_changes.
     assert [new_state_entry] = StateEntry(
-        class_hash=state_entry.class_hash, storage_ptr=storage_ptr, nonce=state_entry.nonce
-    );
+        class_hash=state_entry.class_hash,
+        storage_ptr=storage_ptr,
+        nonce=state_entry.nonce);
     dict_update{dict_ptr=global_state_changes}(
         key=contract_address,
         prev_value=cast(state_entry, felt),
@@ -923,8 +915,7 @@ func execute_syscalls{
 
     if (selector == GET_TX_INFO_SELECTOR) {
         assert cast(syscall_ptr, GetTxInfo*).response = GetTxInfoResponse(
-            tx_info=execution_context.original_tx_info
-        );
+            tx_info=execution_context.original_tx_info);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -935,8 +926,7 @@ func execute_syscalls{
 
     if (selector == GET_CALLER_ADDRESS_SELECTOR) {
         assert [cast(syscall_ptr, GetCallerAddress*)].response = GetCallerAddressResponse(
-            caller_address=execution_context.caller_address
-        );
+            caller_address=execution_context.caller_address);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -947,8 +937,7 @@ func execute_syscalls{
 
     if (selector == GET_SEQUENCER_ADDRESS_SELECTOR) {
         assert [cast(syscall_ptr, GetSequencerAddress*)].response = GetSequencerAddressResponse(
-            sequencer_address=block_context.sequencer_address
-        );
+            sequencer_address=block_context.sequencer_address);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -959,8 +948,7 @@ func execute_syscalls{
 
     if (selector == GET_CONTRACT_ADDRESS_SELECTOR) {
         assert [cast(syscall_ptr, GetContractAddress*)].response = GetContractAddressResponse(
-            contract_address=execution_context.contract_address
-        );
+            contract_address=execution_context.contract_address);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -971,8 +959,7 @@ func execute_syscalls{
 
     if (selector == GET_BLOCK_TIMESTAMP_SELECTOR) {
         assert [cast(syscall_ptr, GetBlockTimestamp*)].response = GetBlockTimestampResponse(
-            block_timestamp=block_context.block_info.block_timestamp
-        );
+            block_timestamp=block_context.block_info.block_timestamp);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -983,8 +970,7 @@ func execute_syscalls{
 
     if (selector == GET_BLOCK_NUMBER_SELECTOR) {
         assert [cast(syscall_ptr, GetBlockNumber*)].response = GetBlockNumberResponse(
-            block_number=block_context.block_info.block_number
-        );
+            block_number=block_context.block_info.block_number);
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -996,8 +982,9 @@ func execute_syscalls{
     if (selector == GET_TX_SIGNATURE_SELECTOR) {
         tempvar original_tx_info: TxInfo* = execution_context.original_tx_info;
         assert [cast(syscall_ptr, GetTxSignature*)].response = GetTxSignatureResponse(
-            signature_len=original_tx_info.signature_len, signature=original_tx_info.signature
-        );
+            signature_len=original_tx_info.signature_len,
+            signature=original_tx_info.signature
+            );
         return execute_syscalls(
             block_context=block_context,
             execution_context=execution_context,
@@ -1064,8 +1051,7 @@ func execute_syscalls{
     assert [outputs.messages_to_l1] = MessageToL1Header(
         from_address=execution_context.contract_address,
         to_address=syscall.to_address,
-        payload_size=syscall.payload_size,
-    );
+        payload_size=syscall.payload_size);
     memcpy(
         dst=outputs.messages_to_l1 + MessageToL1Header.SIZE,
         src=syscall.payload_ptr,
@@ -1100,8 +1086,7 @@ func consume_l1_to_l2_message{outputs: OsCarriedOutputs*}(
         to_address=execution_context.contract_address,
         nonce=nonce,
         selector=execution_context.selector,
-        payload_size=payload_size,
-    );
+        payload_size=payload_size);
 
     let message_payload = cast(outputs.messages_to_l2 + MessageToL2Header.SIZE, felt*);
     memcpy(dst=message_payload, src=payload, len=payload_size);
@@ -1236,7 +1221,8 @@ func execute_entry_point{
     // Note that returned_builtin_ptrs_subset cannot be set in a hint because doing so will allow a
     // malicious prover to lie about the storage changes of a valid contract.
     let (ap_val) = get_ap();
-    local returned_builtin_ptrs_subset: felt* = cast(ap_val - contract_class.n_builtins - 2, felt*);
+    local returned_builtin_ptrs_subset: felt* = cast(
+        ap_val - contract_class.n_builtins - 2, felt*);
     local retdata_size: felt = [ap_val - 2];
     local retdata: felt* = cast([ap_val - 1], felt*);
 
@@ -1318,8 +1304,7 @@ func deploy_contract{
     tempvar new_state_entry = new StateEntry(
         class_hash=constructor_execution_context.class_hash,
         storage_ptr=state_entry.storage_ptr,
-        nonce=0,
-    );
+        nonce=0);
 
     dict_update{dict_ptr=global_state_changes}(
         key=contract_address,
@@ -1329,8 +1314,9 @@ func deploy_contract{
 
     // Write the contract address and hash to the output.
     assert [outputs.deployment_info] = DeploymentInfo(
-        contract_address=contract_address, class_hash=new_state_entry.class_hash
-    );
+        contract_address=contract_address,
+        class_hash=new_state_entry.class_hash,
+        );
 
     // Advance outputs.deployment_info.
     let (outputs) = os_carried_outputs_new(
@@ -1385,7 +1371,7 @@ func prepare_constructor_execution_context{range_check_ptr, builtin_ptrs: Builti
         ecdsa=builtin_ptrs.ecdsa,
         bitwise=builtin_ptrs.bitwise,
         ec_op=builtin_ptrs.ec_op,
-    );
+        );
 
     tempvar constructor_execution_context = new ExecutionContext(
         entry_point_type=ENTRY_POINT_TYPE_CONSTRUCTOR,
@@ -1396,7 +1382,7 @@ func prepare_constructor_execution_context{range_check_ptr, builtin_ptrs: Builti
         calldata_size=constructor_calldata_size,
         calldata=constructor_calldata,
         original_tx_info=cast(nondet %{ segments.add() %}, TxInfo*),
-    );
+        );
 
     return (
         constructor_execution_context=constructor_execution_context, salt=contract_address_salt
@@ -1437,7 +1423,7 @@ func execute_deploy_account_transaction{
         calldata_size=constructor_execution_context.calldata_size + 2,
         calldata=validate_deploy_calldata,
         original_tx_info=original_tx_info,
-    );
+        );
 
     // Compute transaction hash and prepare transaction info.
     let tx_version = TRANSACTION_VERSION;
@@ -1466,7 +1452,7 @@ func execute_deploy_account_transaction{
         transaction_hash=transaction_hash,
         chain_id=block_context.starknet_os_config.chain_id,
         nonce=[nonce_ptr],
-    );
+        );
 
     %{ syscall_handler.start_tx(tx_info_ptr=ids.original_tx_info.address_) %}
 
@@ -1528,7 +1514,7 @@ func execute_deploy_transaction{
         transaction_hash=transaction_hash,
         chain_id=chain_id,
         nonce=0,
-    );
+        );
 
     %{
         syscall_handler.start_tx(
@@ -1584,7 +1570,7 @@ func execute_declare_transaction{
         calldata_size=1,
         calldata=declared_class_hash_ptr,
         original_tx_info=cast(nondet %{ segments.add() %}, TxInfo*),
-    );
+        );
     let (transaction_hash) = compute_transaction_hash(
         tx_hash_prefix=DECLARE_HASH_PREFIX,
         version=tx_version,
@@ -1604,7 +1590,7 @@ func execute_declare_transaction{
         transaction_hash=transaction_hash,
         chain_id=chain_id,
         nonce=[nonce_ptr],
-    );
+        );
 
     check_and_increment_nonce(
         execution_context=validate_declare_execution_context, nonce=[nonce_ptr]
@@ -1671,7 +1657,7 @@ func compute_transaction_hash{builtin_ptrs: BuiltinPointers*}(
         ecdsa=builtin_ptrs.ecdsa,
         bitwise=builtin_ptrs.bitwise,
         ec_op=builtin_ptrs.ec_op,
-    );
+        );
 
     return (transaction_hash=transaction_hash);
 }
diff --git a/src/starkware/starknet/definitions/error_codes.py b/src/starkware/starknet/definitions/error_codes.py
index 43cedc2..a9b7c1e 100644
--- a/src/starkware/starknet/definitions/error_codes.py
+++ b/src/starkware/starknet/definitions/error_codes.py
@@ -111,7 +111,6 @@ feeder_gateway_error_code_whitelist: FrozenSet[ErrorCode] = frozenset(
         StarknetErrorCode.TRANSACTION_NOT_FOUND,
         StarknetErrorCode.UNINITIALIZED_CONTRACT,
         # Function call errors.
-        StarknetErrorCode.CONTRACT_ADDRESS_UNAVAILABLE,
         StarknetErrorCode.ENTRY_POINT_NOT_FOUND_IN_CONTRACT,
         StarknetErrorCode.FEE_TRANSFER_FAILURE,
         StarknetErrorCode.INVALID_RETURN_DATA,
diff --git a/src/starkware/starknet/definitions/fields.py b/src/starkware/starknet/definitions/fields.py
index 0e46854..9e21152 100644
--- a/src/starkware/starknet/definitions/fields.py
+++ b/src/starkware/starknet/definitions/fields.py
@@ -216,12 +216,6 @@ optional_class_hash_metadata = dict(
     )
 )
 
-address_to_class_hash_metadata = dict(
-    marshmallow_field=FrozenDictField(
-        keys=L2AddressField.get_marshmallow_field(), values=ClassHashField
-    )
-)
-
 
 # Class hash (as integer).
 
@@ -314,11 +308,6 @@ optional_state_root_metadata = dict(
 )
 
 
-optional_state_diff_hash_metadata = dict(
-    marshmallow_field=BytesAsHex(required=False, load_default=None)
-)
-
-
 # Declared contracts.
 
 declared_contracts_metadata = dict(
@@ -379,20 +368,6 @@ address_to_nonce_metadata = dict(
     )
 )
 
-
-# Storage.
-
-storage_updates_metadata = dict(
-    marshmallow_field=mfields.Dict(
-        keys=L2AddressField.get_marshmallow_field(),
-        values=mfields.Dict(
-            keys=everest_fields.FeltField.get_marshmallow_field(),
-            values=everest_fields.FeltField.get_marshmallow_field(),
-        ),
-    )
-)
-
-
 # ExecutionInfo.
 
 name_to_resources_metadata = dict(
diff --git a/src/starkware/starknet/definitions/general_config.py b/src/starkware/starknet/definitions/general_config.py
index b72637e..1262922 100644
--- a/src/starkware/starknet/definitions/general_config.py
+++ b/src/starkware/starknet/definitions/general_config.py
@@ -40,7 +40,6 @@ default_general_config = load_config(
 class StarknetChainId(Enum):
     MAINNET = from_bytes(b"SN_MAIN")
     TESTNET = from_bytes(b"SN_GOERLI")
-    TESTNET2 = from_bytes(b"SN_GOERLI2")
 
 
 # Fee token account constants.
diff --git a/src/starkware/starknet/definitions/general_config.yml b/src/starkware/starknet/definitions/general_config.yml
index eac6571..6aa0119 100644
--- a/src/starkware/starknet/definitions/general_config.yml
+++ b/src/starkware/starknet/definitions/general_config.yml
@@ -5,10 +5,10 @@ event_commitment_tree_height: 64
 global_state_commitment_tree_height: 251
 invoke_tx_max_n_steps: 1000000
 min_gas_price: 100000000000
-sequencer_address: '0x3711666a3506c99c9d78c4d4013409a87a962b7a0880a1c24af9fe193dafc01'
+sequencer_address: '0x416017615e785233a2ec6b6a16058eef596a40171b2517add5167bd5ba1ab88'
 starknet_os_config:
   chain_id: TESTNET
-  fee_token_address: '0x4c07059285c2607d528a4c5220ef1f64d8f01273c23cfd9dec68759f61b544'
+  fee_token_address: '0x5317a631bf21fdfa69e463467bdd693ff74ff19d63e0769879a9e1882afb26d'
 tx_commitment_tree_height: 64
 tx_version: 1
 validate_max_n_steps: 1000000
diff --git a/src/starkware/starknet/scripts/CMakeLists.txt b/src/starkware/starknet/scripts/CMakeLists.txt
index 92bd04f..1b63b24 100644
--- a/src/starkware/starknet/scripts/CMakeLists.txt
+++ b/src/starkware/starknet/scripts/CMakeLists.txt
@@ -2,7 +2,6 @@ python_lib(starknet_script_lib
     PREFIX starkware/starknet/scripts
     FILES
     starknet
-    starknet-class-hash
     starknet-compile
 
     LIBS
diff --git a/src/starkware/starknet/scripts/starknet-class-hash b/src/starkware/starknet/scripts/starknet-class-hash
deleted file mode 100644
index fbdf839..0000000
--- a/src/starkware/starknet/scripts/starknet-class-hash
+++ /dev/null
@@ -1,10 +0,0 @@
-#!/usr/bin/env python3
-
-import os
-import sys
-
-sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))
-from starkware.starknet.cli.class_hash import main  # noqa
-
-if __name__ == '__main__':
-    sys.exit(main())
diff --git a/src/starkware/starknet/services/api/gateway/transaction.py b/src/starkware/starknet/services/api/gateway/transaction.py
index 45966c8..9f59eae 100644
--- a/src/starkware/starknet/services/api/gateway/transaction.py
+++ b/src/starkware/starknet/services/api/gateway/transaction.py
@@ -145,10 +145,6 @@ class Deploy(Transaction):
 
     @staticmethod
     def compress_program(program_json: dict):
-        """
-        Deprecated.
-        Use starkware.starknet.services.api.gateway.transaction_utils.compress_program instead.
-        """
         return compress_program(program_json=program_json)
 
     @marshmallow.decorators.post_dump
diff --git a/src/starkware/starknet/services/utils/CMakeLists.txt b/src/starkware/starknet/services/utils/CMakeLists.txt
index a2b1f79..91990c6 100644
--- a/src/starkware/starknet/services/utils/CMakeLists.txt
+++ b/src/starkware/starknet/services/utils/CMakeLists.txt
@@ -15,6 +15,5 @@ python_lib(starknet_sequencer_api_utils_lib
     starknet_transaction_fee_lib
     starknet_transaction_lib
     starknet_transaction_objects_lib
-    starknet_transaction_state_objects_lib
     starkware_config_utils_lib
 )
diff --git a/src/starkware/starknet/services/utils/sequencer_api_utils.py b/src/starkware/starknet/services/utils/sequencer_api_utils.py
index 6d95e85..9c9285c 100644
--- a/src/starkware/starknet/services/utils/sequencer_api_utils.py
+++ b/src/starkware/starknet/services/utils/sequencer_api_utils.py
@@ -1,7 +1,7 @@
-from typing import Type
+from typing import Optional, Tuple, Type
 
 from services.everest.api.gateway.transaction import EverestTransaction
-from starkware.starknet.business_logic.execution.objects import ResourcesMapping
+from starkware.starknet.business_logic.execution.objects import CallInfo, ResourcesMapping
 from starkware.starknet.business_logic.state.state_api import SyncState
 from starkware.starknet.business_logic.transaction.fee import calculate_tx_fee
 from starkware.starknet.business_logic.transaction.objects import (
@@ -11,7 +11,6 @@ from starkware.starknet.business_logic.transaction.objects import (
     InternalInvokeFunction,
     InternalTransaction,
 )
-from starkware.starknet.business_logic.transaction.state_objects import FeeInfo
 from starkware.starknet.business_logic.utils import verify_version
 from starkware.starknet.definitions.general_config import StarknetGeneralConfig
 from starkware.starknet.services.api.feeder_gateway.response_objects import FeeEstimationInfo
@@ -65,7 +64,7 @@ class InternalAccountTransactionForSimulate(InternalAccountTransaction):
 
     def charge_fee(
         self, state: SyncState, resources: ResourcesMapping, general_config: StarknetGeneralConfig
-    ) -> FeeInfo:
+    ) -> Tuple[Optional[CallInfo], int]:
         """
         Overrides the charge fee method. Only calculates the actual fee and does not charge any fee.
         """
