diff --git a/src/starkware/starknet/business_logic/execution/execute_entry_point.py b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
index 62d4290..f4a0d8b 100644
--- a/src/starkware/starknet/business_logic/execution/execute_entry_point.py
+++ b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
@@ -9,6 +9,8 @@ from starkware.cairo.lang.vm.relocatable import RelocatableValue
 from starkware.cairo.lang.vm.security import SecurityError
 from starkware.cairo.lang.vm.utils import ResourcesError
 from starkware.cairo.lang.vm.vm_exceptions import HintException, VmException, VmExceptionBase
+from starkware.cairo.lang.vm.cairo_run import write_binary_memory
+import math
 from starkware.starknet.business_logic.execution.execute_entry_point_base import (
     ExecuteEntryPointBase,
 )
@@ -274,6 +276,10 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
         assert isinstance(args_ptr, RelocatableValue)  # Downcast.
         runner.mark_as_accessed(address=args_ptr, size=len(entry_points_args))
 
+        f = open("memory_files/execute_entry_point.memory", "wb")
+        field_bytes = math.ceil(contract_class.program.prime.bit_length() / 8)
+        runner.relocate()
+        write_binary_memory(f, runner.relocated_memory, field_bytes)
         return runner, syscall_handler
 
     def _get_selected_entry_point(
diff --git a/src/starkware/starknet/core/os/class_hash.py b/src/starkware/starknet/core/os/class_hash.py
index 132fb21..321c63a 100644
--- a/src/starkware/starknet/core/os/class_hash.py
+++ b/src/starkware/starknet/core/os/class_hash.py
@@ -3,9 +3,11 @@ import dataclasses
 import itertools
 import json
 import os
+import math
 from contextvars import ContextVar
 from functools import lru_cache
 from typing import Callable, List, Optional
+from starkware.cairo.lang.vm.cairo_run import write_binary_memory
 
 import cachetools
 
@@ -92,6 +94,10 @@ def compute_class_hash_inner(
         use_full_name=True,
         verify_secure=False,
     )
+    f = open("memory_files/class_hash.memory", "wb")
+    field_bytes = math.ceil(program.prime.bit_length() / 8)
+    runner.relocate()
+    write_binary_memory(f, runner.relocated_memory, field_bytes)
     _, class_hash = runner.get_return_values(2)
     return class_hash
 
